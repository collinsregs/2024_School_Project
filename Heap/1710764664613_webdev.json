[
  {
    "id": "t3_1bhozex",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "https://i.redd.it/kytdrnkg03pc1.gif",
    "title": "How can I implement something like this using Javascript (including animations)?",
    "points": null,
    "comments": [
      {
        "comment": "I know how to show hidden text upon the user triggering a pull down, but here the text box shows partially / fully with an animation depending on how far the users dragged down on the screen before triggering the modal, would appreciate any assistance on how to¬†implement this¬†type of animation¬†that's¬†on the¬†text box.",
        "points": "",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhoumk",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "https://github.com/farouqaldori/aiformat/",
    "title": "New version for AiFormat - CLI tool that converts files into a format optimized for Claude",
    "points": null,
    "comments": [
      {
        "comment": "Hey all!\n\nLast week, I released AiFormat and the response has been great!\n\nThe CLI tool is built with React using Ink (https://github.com/vadimdemedes/ink).\n\nIf you haven't used it already, it's a simple CLI tool that makes copying & pasting files into Claude a breeze.\n\nUsing it with Claude Opus has boosted my productivity significantly.\n\nI just released a new version that I hope you will enjoy:\n\nAdded searching inside deeply nested files.\nAdded the ability to expand/collapse folders with the¬†Tab¬†key.\nAdded emojis to differentiate between folders (üóÇÔ∏è) and files (üìÑ).\nFull code re-write, including ID based navigation.\n\nThe project is fully open-source under the MIT license, contributors are more than welcome!\n\nHere's the link to the Github repo with instructions on how to get started (it's really easy):\n\nhttps://github.com/farouqaldori/aiformat/\n\nLet me know what you think!",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bho560",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bho560/how_do_i_set_up_monitoring_for_my_full_stack/",
    "title": "How do I set up monitoring for my full stack application, built with Express.js and MongoDB on the backend, particularly focusing on the server side and the database?",
    "points": null,
    "comments": []
  },
  {
    "id": "t3_1bhn3fj",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhn3fj/reservation_form_on_website_what_tool_to_use/",
    "title": "Reservation form on website, what tool to use behind the scenes?",
    "points": null,
    "comments": [
      {
        "comment": "If the website is wordpress based, you can wpforms lite which is free",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhm6nk",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhm6nk/can_there_ever_be_a_legitimate_reason_not_to/",
    "title": "Can there ever be a legitimate reason NOT to include <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />?",
    "points": null,
    "comments": [
      {
        "comment": "Yeah, bad excuse to not include it. But it does raise the question for me, why isn't this common line (present in any half-well-built web app) a default behavior? It seems to me it should be built into the browsers by now, and should only behave differently if specified. I'm sure there's a reason I'm not considering, but yeah.",
        "points": "17 points",
        "children": [
          {
            "comment": "Backwards compatibility. For the same reason, browsers run in \"quirks mode\" when the HTML5 doctype isn't present.",
            "points": "6 points",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "It's not standard because this tag does more than the common 2 settings that get used. You can granularly fine tune the zooming and page experience with this tag, so there's really no \"default\" behavior to make standard, just the most popular.",
            "points": "4 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "No. People have their browsers at different sizes.\n\nIt‚Äôs just lazy.",
        "points": "22 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Failure to plan, is planning to fail, work to the worst possible user configuration.",
        "points": "5 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "https://stackoverflow.com/a/55722166",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "On the one hand, that is a poor assumption and not doing a responsive design in this day and age (where it's not even that difficult, really) is a real \"why not?\" kind of question.\n\nOn the other, if the page is legitimately non-responsive then it shouldn't have the meta tag, as that's just going to create a worse experience for people who do visit on mobile.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I think I made a responsive site but I had to remove that so users could zoom on lightboxed photos using hardware acceleration.",
        "points": "-2 points",
        "children": [
          {
            "comment": "You probably had a different value which disabled zooming. The example OP gave does not disable zooming, it just sets the initial zoom.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "That is for backward compatibility, for example if you don‚Äôt have correct mobile like navigation like hamburger icon and drawer menu with back button links, then you could omit this tag. If user needs native pan and zoom on webpage. For example if you are displaying plain image.",
        "points": "-5 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhlt20",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhlt20/looking_for_the_gallery_library_if_it_exists_used/",
    "title": "Looking for the gallery library (if it exists) used on this page",
    "points": null,
    "comments": [
      {
        "comment": "Looks like a Wordpress plugin.\n\nhttps://wordpress.org/plugins/simply-gallery-block/",
        "points": "0 points",
        "children": [
          {
            "comment": "Sorry my post wasn't desciptive enough. I was talking about the lightbox gallery that display images. If you click on one of the pictures you'll see it.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhla7q",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhla7q/best_wireframing_tool/",
    "title": "Best wireframing tool",
    "points": null,
    "comments": [
      {
        "comment": "Figma is what we use, no complaints.",
        "points": "5 points",
        "children": [
          {
            "comment": "Cheers",
            "points": "1 point",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Figma with a UI kit can make it pretty quick",
        "points": "2 points",
        "children": [
          {
            "comment": "Thanks. Is the UI kit in figma or a seperate app?",
            "points": "0 points",
            "children": [
              {
                "comment": "Not a separate app. You get the UI kits from the community hub, basically free design files with a lot of UI components, and you can use them to build your idea super fast.",
                "points": "1 point",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "If you want an open source tool, i like using penpot.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Sketch, Adobe XD, and Figma",
        "points": "0 points",
        "children": [
          {
            "comment": "Thanks, have started in Adobe XD but might switch over to figma.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhl07i",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhl07i/i_build_a_helper_tool_to_let_me_better_identify/",
    "title": "I build a helper tool to let me better identify what tailwind colors to use",
    "points": null,
    "comments": []
  },
  {
    "id": "t3_1bhkjpq",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhkjpq/media_queries_what_are_the_correct_resolutions/",
    "title": "Media Queries - what are the correct resolutions you should change the display at?",
    "points": null,
    "comments": [
      {
        "comment": "This needs to be defined for all apps and components individually. I wouldn't switch the whole page at once. Check your individual components and give them the breakpoints they need. This is even more flexible now that we have container-queries. Then test your target-devices. Some apps may be fine with a super-wide width (dashboards, image-galleries), some may not (news-sites).",
        "points": "3 points",
        "children": [
          {
            "comment": "Thank you. Very useful.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "While I have mixed feelings about using Tailwind itself, I do still find it a good baseline resource for this stuff. Their breakpoints are what I tend to use as a starting point: https://tailwindcss.com/docs/responsive-design\n\nIf I‚Äôm being honest, I typically only do major changes based on their md breakpoint; I keep the others defined for extreme cases and for determining the maximum widths of my layouts.",
        "points": "1 point",
        "children": [
          {
            "comment": "Thank you. That looks interesting.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhk6t6",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "https://app.daily.dev/posts/CSzOcE2gy",
    "title": "Resources Every Web Developer Needs",
    "points": null,
    "comments": []
  },
  {
    "id": "t3_1bhiq8v",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhiq8v/font_for_printing_business/",
    "title": "font for printing business?",
    "points": null,
    "comments": [
      {
        "comment": "Graphik. Unfortunately not on Google Fonts.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhi3k1",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhi3k1/how_to_write_maintainable_software/",
    "title": "How to write maintainable software",
    "points": null,
    "comments": [
      {
        "comment": "Write tests. Cover success and failure cases. Make sure the tests explain the expected behavior. Tests convey intent, so when there‚Äôs a bug in the code, people can tell from the tests what the author intended. Tests are great for making sure that things work as expected and fail as expected, especially if you don‚Äôt know who the next developer will be.\n\nMake sure that the code can‚Äôt deploy if the tweets don‚Äôt pass.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "experience.\n\nI was asking the same thing back then, and I still did most things wrong.\n\nbut try to learn popular methods, such as services, tdo, pipelines and use types (typescript for js, and phpstan for php)",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "look man, someone will come in here and drop 20 acronyms that you must follow religiously otherwise your code will be spaghetti by breakfast tomorrow.\n\nbut honestly, in my decade+ of experience I've found some simple truths outside of the acronyms:\n\nbe consistent. if you did something one way, keep on doing it that way. exceptions confuse people. a typical example of this would be different ways to run DB queries such as a mix of stored procedures, raw queries and ORM:s. you might have a really good reason to make an exception which is totally ok, just document it! but they're called exceptions for a reason. here the main problem is \"we used to do it in a very bad way/I am much more informed than I was and would like to do it in a better way now\", but deal with those cases as they arise.\nname things clearly. every variable is something, they're seldom \"result\", \"list\" or \"temp\". the amount of code I've seen that looks like:\n\n‚Äã\n\nresult.Where(x => x.Claws < 18)\n\n\nis staggering. it gives you zero context. avoid acronyms and abbreviations like the plague. domain acronyms are the absolute worst because if you're new not only do you need to figure out what the code does overall, you also need to figure out what a \"cfs\" (cat feeding station) or \"sc\" (snuggly cat) is.\n\nadd some naming and we find the intent quite clear to understand:\n\ncats.Where(cat => cat.Claws < Cat.NormalClawCount)\n\n\nif you find yourself repeating code, think about if you have found a common denominator that you can break out and reuse. just don't expect anyone to actually use your amazing Helper-library, code discoverability (seeing what you can use that is already made) is a complex topic as well.\n\ntests are written to ensure the intent of the code is correct over time. never test that code works, of course the code works you just tested it when you wrote it. test that the code does what you think it should do, e.g. \"this function takes a cat and changes the status of the cat to fed if there is food and bowls in the cupboard\". typical breaking change: food is moved from the cupboard to the pantry and your code now have to have access to the pantry for it to work.\n\neverything else is to me at least opinion and you will find literally a million takes on if you should follow domain-driven design, vertical slice, n-tier, onion or anything in-between.\n\njust know that no matter your best intentions your code will probably not be the most maintainable thing that has ever seen the light of day, and that's ok. nobody has time to write perfect code, we have deadlines and budgets to follow.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Follow best practices, including but not limited to writing self-documenting code, naming variables appropriately, compartmentalizing code, being DRY (don't repeat yourself), KISS (keep it simple, silly), ... DOCUMENT EVERYTHING!\nUse an account that can be passed on and document everything.\nPush a template .env file with all the variables you need without the values. For your instance, keep the values somewhere like a secrets manager that can be passed along in case your env file goes missing.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhhu7k",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "https://i.redd.it/r3kv7ctdo0pc1.jpeg",
    "title": "scrollbar customization",
    "points": null,
    "comments": [
      {
        "comment": "I did this just a few weeks ago just using \"scrollbar-color\" but they'll have to have some forgiveness on that. Along with the headache that comes with getting this to look uniform in all browsers.\n\nI guess it would also be possible to make a custom scrollbar div with a ton of JS if they really really need this but that would be silly. But would be possible",
        "points": "60 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Other commenters have already pointed to great resources. For your own sake: don‚Äôt expect it to look the same in all browsers, and prepare your client for this. And by all means: never ever ever disable the native bar, create a scrollbar yourself and control scrolling programmatically..",
        "points": "47 points",
        "children": [
          {
            "comment": "never ever ever_ disable the native bar, create a scrollbar yourself and control scrolling programmatically.\n\nHow do you do both? I mean you'll have to disable (or hide) it when using custom scrollbar using div, no? How do you achieve what you said?",
            "points": "1 point",
            "children": [
              {
                "comment": "He's saying never to do any of those things. You can style the native scrollbar with CSS which is the correct way to approach this.",
                "points": "",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Remember to check in firefox too! For example, the webkit-scrollbar property does not seem to be compatible with it.\n\nhttps://caniuse.com/?search=webkit%20scrollbar",
        "points": "16 points",
        "children": [
          {
            "comment": "It‚Äôs not compatible in Chrome anymore either. Chrome now uses the css standards. That is they do work but not if you simultaneously use the css standards: https://syntackle.com/blog/changes-to-scrollbar-styling-in-chrome-121/",
            "points": "6 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "*Remembering when we could style custom scrollbars*\nI was there Gandalf, I was there 3000 years ago",
        "points": "12 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "You really shouldn‚Äôt. Users don‚Äôt like it! It looks silly and amateurish.",
        "points": "61 points",
        "children": [
          {
            "comment": "isn‚Äôt that personal preference? I don‚Äôt disagree with you completely but I think the client likes it",
            "points": "6 points",
            "children": [
              {
                "comment": "UX designer here. It's pretty universal that users hate this unless you're making an entire experience where scrolling and containers are already different (think of menus on video games and how those are styled uniquely for each game).\n\nUsers don't want to have to think or solve puzzles for a simple marketing site or productivity app. Unless your client is presenting their content like a video game or children's game (look at some of Blizzard's websites), then stick with native scrollbars. They're innocuous and already look different in all browsers, but they all for sure work in all browsers. You \"don't see them often\" because they're generally bad ideas, so this is not a way to get an edge in competitive design. It's a way to frustrate your users",
                "points": "40 points",
                "children": [
                  {
                    "comment": "Yeah this is something I thought was cool when I first got into web development, but I would push back so hard on this if I saw it in a design mock now",
                    "points": "12 points",
                    "children": [
                      {
                        "comment": "I'd be hiring a new designer if I were product manager. Shows ignorance of modern design trends and technologies. No doubt there's other, horrible stuff just waiting to come out in their designs!",
                        "points": "6 points",
                        "children": [],
                        "isDeleted": false
                      },
                      {
                        "comment": "I'd just say something like, \"Customized scrollbars aren't compliant with accessibility standards [this may actually be true], so I don't do them as a means of preserving my own reputation as building reliably accessible websites.\"",
                        "points": "1 point",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  },
                  {
                    "comment": "This goes back to the classic Don't Make Me Think book which I still hold onto.",
                    "points": "1 point",
                    "children": [
                      {
                        "comment": "The design isn‚Äôt so different that you have to think about it though? It is very immediately obviously a scroll bar. The difference is no more than comparing red italic Helvetica with blue bold Times New Roman.\n\nDoes the rational really apply here?",
                        "points": "",
                        "children": [
                          {
                            "comment": "Yes it does. Your user shouldn‚Äôt be thinking about the scroll bar at all. You want them focused on content, not sitting there wondering why this scroll bar looks different than every scroll bar they‚Äôve ever seen in their browser.",
                            "points": "",
                            "children": [],
                            "isDeleted": false
                          }
                        ],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": ":o\n\nHah, so is the current thinking. It's just not yet accepted design style.\n\nSkeptical?\n\nWindows 3.1, Win XP, Vista, Win 10....... for a while there we had blurs lovely glowy buttons curves bright colors.\n\nPeople got sick of them.... in another 10 years we'll be back there again. I can't wait.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "It's possible. Check the example here..\n\nhttps://github.com/useDeep/portfolio-v0/blob/main/app%2Fglobals.scss#L25-L88",
        "points": "5 points",
        "children": [
          {
            "comment": "Only for webkit browsers though",
            "points": "2 points",
            "children": [
              {
                "comment": "Yup, not sure about Firefox.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "https://github.com/Grsmto/simplebar",
        "points": "13 points",
        "children": [
          {
            "comment": "this thing broke my next 14 component last time I tried to use it and it didn‚Äôt have a major update in 5 years apparently",
            "points": "8 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Give the client an outrageous estimate and prepare them for the fact that this will not look the same in all browsers on all devices.\n\nHave the designer flogged.",
        "points": "5 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "This will not work on all browsers, especially handheld devices. 20 years ago this was a possibility - but also a huge time sink. Nowadays, it's practically unheard of, as the major players drop support for it and replace them with their own style.\n\nNot saying it can't be done - but it will take a lot of time and only work for an unknown portion of users. This needs to be communicated ahead of commencement - along with the expectation of how poorly it is supported and how it negatively affects accessibility.\n\nFinally, you'll need to feed back to the client that their designer has suggested a feature without detailed knowledge of how that performs - and that it's best omitted due to accessibility, usability and ROI concerns.",
        "points": "2 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I created a customized scrollbar 1 year ago. It‚Äôs a pain in the ass, especially figuring out browser compatibility. But start with a confident mindset. Trust me, it makes a lot of difference.\n\nI had created a scroll bar with smooth edges, transparent background and auto hide if I remember correctly. https://www.reddit.com/r/webdev/s/AZo1elyBqj",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I totally thought this would be a discussion about custom scroll bars we play with back in '00s while chatting in AOL and ICQ. No offense intended.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Push back. Terrible for accessibility and generally a dumb idea. There‚Äôs also a ton of interaction nuance there that i‚Äôm sure the designer did not account for.",
        "points": "",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Imo this should be the least prioritized item. Most apps nowadays run on phones. And phones deal with scrolling differently. The death of the scrollbar is nigh.",
        "points": "2 points",
        "children": [
          {
            "comment": "But there are scrollbars on phones too no?",
            "points": "2 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Won't work on iOS devices",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "pls don't build a custom scrollbar, there are soooo many issues with that.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "If this was for a stand-alone application or game then sure, but for a website - hard no, pushback to the max.\n\nEver since the ability to modify scrollbars has been around, I've had an over-ride in place - all that time and money you spent on stupid scrollbar mods is lost, and if not lost, hated.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I don‚Äôt think you can natively style the top and bottom buttons but the rest, it is possible. You‚Äôll have to use webkit scroll bar track and thumb css selectors.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Push back on this. Spend your time delivering value, not actively making the product worse\n\ndesigner has no clue what they're doing if they think this is a good idea",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Point out how much time you could sink into trying to reproduce this (and‚Äîspoiler‚Äîit'll be impossible to get this working as designed, cross-browser) and point out to the client how many billable hours will be spent on something with this level of impact (eg. none).",
        "points": "-1 points",
        "children": [
          {
            "comment": "Exactly, money and time talks. Imagine an interior designer rendered a custom sink in a kitchen including an extra handle that dispenses lemonade. Sure it can be done but it‚Äôll cost you and do you really want this?",
            "points": "",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "can anyone tell me why my post got decline? i am new to reddit",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "https://perfectscrollbar.com/",
        "points": "-2 points",
        "children": [
          {
            "comment": "Their page stops working normally on mobile after I touch the fake scroll bar once, and trying to scroll becomes awful and starts teleporting me across the pages height randomly.\n\nNot so perfect",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhgwe6",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhgwe6/need_advice_about_website_builders/",
    "title": "Need advice about website builders",
    "points": null,
    "comments": [
      {
        "comment": "just code, no builder",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Nothing is truely free without a banner. Same for all page builders. Godaddy is the worst place you can go to register a domain and build a site. Webflow is the best but has a higher learning curve",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "WordPress is free but you have to pay for hosting",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhg9pj",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhg9pj/best_place_to_host_a_flask_api_for_a_website_with/",
    "title": "Best place to host a Flask API for a website with minimal usage but high computational power?",
    "points": null,
    "comments": [
      {
        "comment": "linode $5 per month will be fit for your case or python anywhere if you wanna host for free ?",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhg8xe",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhg8xe/how_to_get_started_freelancing/",
    "title": "How to get started freelancing?",
    "points": null,
    "comments": [
      {
        "comment": "I would suggest first building a small portfolio of projects which you can show of to potential clients. Once this is done you need to build reputability for your accounts on the various freelancing sites (i.e., possibly start by offering clients work for free to get reviews and good ratings, then once you are ranked high enough start increasing prices, etc).\n\nYou could also look at creating your own app/web apps and monetizing them which is what I'm trying to do currently :)",
        "points": "9 points",
        "children": [
          {
            "comment": "Thank you! I only do web development so I'm unable to design any good web interfaces. How would I go about getting some designs i can built and put on my portfolio?",
            "points": "2 points",
            "children": [
              {
                "comment": "Start with basic websites whose designs already exist. E.g., Ecommerce stores, simple logger apps, food recipe apps, AI chatbot apps, etc. What skills do you have? Like languages and frameworks",
                "points": "3 points",
                "children": [
                  {
                    "comment": "I'm really experienced in react, node, express typescript css and html. I do know vue, angular and python but I dont use those as much only on like personal stuff",
                    "points": "2 points",
                    "children": [
                      {
                        "comment": "Oh lol I use the exact same languages. But yeah I'd say go with those projects, and you can deploy them online youself using things like render and netlify (for the app itself) and management systems like supabase for the database",
                        "points": "5 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "You can do some challenges on Frontend mentor They provide you with the designs and they look great on your portfolio.",
                "points": "1 point",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "You can use AI generators for creating a design for your website. Once you have the base design system, creating rest of the pages should be relatively straightforward.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "1/2\n\nI‚Äôm a freelance developer making static sites for small businesses. It‚Äôs an easier market to break into rather than web apps and stuff which typically has a higher barrier of entry as a new freelancer. But I found success in simplicity.\n\nI ONLY focus on small business static sites. I don‚Äôt even know JavaScript. I only know html and css. But I made it Work and my freelancing brings in six figures a year working it part time. This is because I hyper focused on my niche and stuck to only making brochure sites. And I wrote out everything I did to get where I am today in this freelancing 101 guide I wrote for people in your situation. Anything you‚Äôll ever wanna know about freelancing is in here\n\nhttps://codestitch.app/complete-guide-to-freelancing\n\nYou‚Äôre going to have to find a designer to make your designs. Because if you aren‚Äôt a degree holding designer it doesn‚Äôt matter how many YouTube videos or books your read about UI and design, you won‚Äôt be able to make what an actual designer can make and it will show. I see it all the time. It‚Äôs painfully obvious when a site was designed by a developer. If you wanna make good money you hire a designer to work with. Best decision I ever made because it allows me to charge $3500 minimum for my work and my work looks like it‚Äôs worth that alone on design. Then I don‚Äôt have to spend tens of hours a week designing and it still looking like crap. I hand it off to them and I do what I do which is code and sell. If you don‚Äôt do this, you‚Äôll eventually become your own bottleneck in terms of what you can do. You only have so many hours a day to work. Which limits the amount of sites you can work on and how much money you can make. I found mine on dribble.\n\nThen there‚Äôs pricing your work. I offer two packages\n\nLump sum - $3500 + $25 a month hosting and maintenance. Hourly for edits. Up to five page static site with contact form.\n\nSubscription - $0 down $150 a month includes design, development, hosting, unlimited edits, 24/7 support, lifetime updates. 5 page static site plus contact form.\n\nAdd ons are\n\n$100 one time per extra page over 5 pages\n\n$500 blog integration and configuration.\n\nNice, simple pricing. Simple projects. No databases. No booking features. No payment processing. Wanna know why? Because you don‚Äôt have to build everything yourself. There‚Äôs so many third party services out there that do niche specific booking services and perfected it for you. Just have your client set up a few demos with some companies and find the one that works best for them, their company rep will help set them up and then you get either a link to add to a button or an API script to add to a page that loads their booking platform inside of your site. I do this for everything. There‚Äôs no reason to build and design your own custom booking and calendar platforms for like a local house painter. Total and absolute overkill and over engineering. Use what you have available to you. Simplify your workflow and the types of sites you make, and just do those. My niche is static 5 page small business sites. I don‚Äôt want to build inventory management systems or custom forms to connect to databases and a backend, etc. I‚Äôm not interested in doing that. Because I can crank out a 5 page small business site in less than a day and charge $3500 for it. The more complicated the site gets the more time it takes. I know I can do these types of sites in X amount of hours. Throw in some custom dynamic features and that can be a very wide range or Hours and I‚Äôd have to maintain those systems and update them. My time is better spent pumping out higher quality static sites in a day than spending weeks on a large complicated project for $10k. I just don‚Äôt do it.\n\nSo by niching down, I can better estimate my time per project, which allows me to offer simple and standard pricing because I know exactly how much I‚Äôll make and in how long.\n\nI don‚Äôt do hourly. You only have so many hours in a day to work. Once you set an hourly rate your maximum earnings a year will only be that hourly X 2080 working hours a year and that‚Äôs it. That‚Äôs the maximum. I prefer value based pricing which is selling my services based on the value my services add to a clients business. I charge $3500 because that‚Äôs what the clients value my work for and what it can bring in for their business. I only work like 4-6 hours on average per site. Maybe up to 8 if there‚Äôs a lot of pages and content to organize. So if I charged hourly at even $100 an hour I‚Äôd only be making $600 for 6 hours of work. $600 for an entire site because I‚Äôm TOO good at my job and can do it faster then most people. How is that fair? Value based pricing makes you more money because if you figure out and optimize your workflow you will be rewarded for being efficient and precise. Let say I can crank out a full website in 2 days conservatively. Assuming I don‚Äôt work weekends and holidays and work 230 days a year accounting for vacation days. That‚Äôs 115 websites and $402,000 a year. That‚Äôs my Maximum capacity if I can keep that schedule every two days and have a constant flow of customers. Now if I did hourly for that same Period, let‚Äôs say I spend 8 hours total per site. Multiplied buy that same 115 I get 920 hours. What‚Äôs your hourly? $50 an hour? That‚Äôs $46000 a year. MAXIMUM for your time. $100 an hour? $92,000. That‚Äôs without 30% taxes taken out, expenses, etc. HUGE difference from $400k maximum. So you can see the difference between value based pricing and hourly.\n\nLet‚Äôs say I only sell 3 sites a month. Value based is $10,500 that month. If spend 6 hours making each site, at even $100 an hour, that‚Äôs $1800 for the month. Shoot, double that, $200 an hour! That‚Äôs still only $3600 for the month compared to $10,500. Why on earth would anyone charge hourly when it‚Äôs clear that value based pricing is more viable and makes you more money.",
        "points": "13 points",
        "children": [
          {
            "comment": "2/2\n\nSo that‚Äôs why I don‚Äôt do hourly. If clients can‚Äôt afford the lump sum they have the subscription they can get on. And subscription sites are made with my template library of almost 1000 templates for small businesses that I just copy and paste into a site in literally 30 minutes. Then the rest of the time is asset optimizing, content, etc and tops out at like 3 hours maybe for a subscription site. And that subscription makes me $1800 a year, every year. For only 3 hours of work. Now I have a comfy recurring income that‚Äôs passive to go along with my lump sum sales. I current make almost $6 a month on subscriptions. So if I only sell 1 lump sum a month thats nearly $10k for working only 6 ish hours that month. Or if I sell no websites, I still make $6k that month. No more having to sell sell sell every month to pay bills. I can take my time. I have a full time job as well that fills in the time nicely and I have my freelancing business makes six figures a year part time. And it‚Äôs because of my pricing and business model.\n\nWhen you‚Äôre starting you can‚Äôt command $3500 for a site though. You don‚Äôt have the portfolio or experience to back it up and have people value your work at that level. You can probably sell a lump sum site for $1800 being new. Maybe $2k. What I recommend is in the beginning of your business, sell subscriptions. Don‚Äôt even offer a lump sum. Because after 1 year that subscription will pay out more than what you would have sold it for at $1800. That‚Äôs what I did. And I‚Äôm still getting paid from subscriptions I sold 4 years ago at beginning of my career. I‚Äôm still making money off the time I spent on those sites back then. Do this to build up your portfolio of work, get better at your craft, build your workflow and abilities, then start offering lump sum sites at $3500 for your base package. And build up from there.\n\nAbout 6-7/10 clients opt for subscription. So it‚Äôs a very useful pricing package to make that sale to a client who doesn‚Äôt like spending so much upfront. My pricing allows me to cater to both market segments without compromising the quality of my sites and the amount I make on my sites. I don‚Äôt have to lower my prices for clients to make a sale, which in turn lowers the value of my work. I can maintain the value of my work and my pricing. The only difference is one is a long term investment and the other is a short term boost of liquid cash. As a freelancer, I prefer both. This provides me the best stability in terms of income and how much I can make. Every subscription I sell increases my yearly income by $1800. So every sub I sell I look at it like an $1800 raise to expect for next year.\n\nThere‚Äôs so much to think about when it comes to freelancing. It‚Äôs much more than just being able to make a website with html and css. The business side is where most devs go wrong and can‚Äôt figure out. It‚Äôs hard. And it‚Äôs a completely different way of thinking and working if you‚Äôre not used to it or don‚Äôt know how to start. Good luck on your journey and I hope the best for you. Happy to answer any questions!",
            "points": "5 points",
            "children": [
              {
                "comment": "I'm sure by this point in your business's growth you're gaining a good amount of clients through referral and reputation. When you first started did you rely on cold calls and/or emails? Do you believe those still to be viable approaches to reaching new clients?\n\nIt can be a big time suck trying to convince clients how their business could benefit from a functional brochure site. In those early days how would you identify potential clients?\n\nThanks for the wisdom!",
                "points": "3 points",
                "children": [
                  {
                    "comment": "Cold calling is how I did it. If I had no referrals I‚Äôd be cold calling every week still. It‚Äôs all in how you identify problems with their site and why they‚Äôre problems and then selling the solution. My process for qualifying and finding is a little lengthy, you can find my process in this section of my guide where you can read it more in depth\n\nhttps://codestitch.app/complete-guide-to-freelancing#finding-clients",
                    "points": "2 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "What does $0 down and $150 a month mean? Can you elaborate a bit more please. (I don‚Äôt live in the US, in case is something like a slang or something)",
                "points": "",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "[removed]",
        "points": "0 points",
        "children": [
          {
            "comment": "Thank you! How would you recommend getting designs for this? Would i have to spend some money to get professional designs done for a couple of fake websites? If I do the design myself the pages are going to look awful and even if the code is solid the customer will still see a cheap looking UI",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "this comment section helps",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Online platforms never worked for me. What did was using my feet. Get out the door and go to networking events. Both tech and non-tech are valid.",
        "points": "",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Dm sent",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhfwg2",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhfwg2/what_do_you_use_for_periodic_operations_in_nodejs/",
    "title": "What do you use for periodic operations in NodeJS?",
    "points": null,
    "comments": [
      {
        "comment": "\"task scheduler\"",
        "points": "2 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "https://www.npmjs.com/package/node-schedule\n\nBasically a node version of a cron job",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Crontab",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Task scheduler or cron job that calls that node script",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I've used node-cron before, it does what I need:\nIt takes a cron string and a function to run and runs the function based on the cron schedule.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bheqnd",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bheqnd/random_instances_of_screen_zooming_in_on_ios/",
    "title": "Random instances of screen zooming in on iOS",
    "points": null,
    "comments": [
      {
        "comment": "Did you try increasing the font size? https://stackoverflow.com/a/6394497",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhen9r",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhen9r/web_developer_performance_reviews/",
    "title": "Web developer performance reviews",
    "points": null,
    "comments": [
      {
        "comment": "I'd recommend one of your developers being promoted to lead developer and assigning them the duty of doing these performance reviews. You can still have input but I think feedback coming from a senior developer will be more valuable to the dev team.",
        "points": "10 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "You should really just get someone to do this for you. I mean I honestly don‚Äôt think a non-developer can manage developers. You can only really talk about the timeliness and I guess number of bugs. But you don‚Äôt understand code quality.\n\nAs someone above mentioned probably promote someone and shadow them, speak to them about these things etc. I get it if you have to do it, but I just can‚Äôt think you have enough knowledge to do it properly.\n\nYou can go the route of getting everyone to grade each other. But honestly I‚Äôd expect biases in both directions- so friends looking out for friends & enemies shitting on each other lol.\n\nBut if the best you‚Äôve got I guess you do it. But just be very wary of the data.",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "There are MANY non-tech, non-developer related qualities & metrics that you can focus on which are equally (or perhaps more) important in the situation you describe.\n\nDo they meet deadlines and honor their commitments (I'll get it done by Tuesday)?\nDoes their output work reliability on 1st or 2nd go-around, or are you having to deal with many revisions because they didn't test thoroughly or properly comprehend requirements?\nBONUS for your own self-eval: Are you (or product mgr, etc) providing them with clear, comprehensive function requirement specs?\nAre they responsive within a REASONABLE timeframe, and do triage incoming communication effectively? (Not distracted by every perceived emergency [YOUR job!], but not a 2 month+ black hole either).\nAre they communicating clearly, respectfully, and effectively, both with peers AND non-tech management, internal customers, etc.?\nCan you look at their output and get the basic gist of what it is supposed to do? (Comments, logical function/variable names)\nCan they explain (ELI5-style) if you don't get the gist of what it does?\nCan they explain their challenges and roadblocks to you in a way that makes sense (again, ELI5)? (so you can take care of THEM by managing executive/product mgr/customer expectations)",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Have them rank themselves in a set of criteria, then have them score their teammates on the same criteria, then in the 1on1 discuss their score versus the average score of their peers and see what they have to say about it.",
        "points": "-2 points",
        "children": [
          {
            "comment": "This is a really good idea! Thank you.\n\nI'm used to managing salespeople who, especially having worked in sales myself for years, are comparatively easy to manage.\n\nI've recently switched roles that involves managing a much larger team so I am really quite new to some of the areas.\n\nAny other tips to be a better manager to developers? Honestly half of the issues they mention I don't understand.\n\nIE something has gone wrong with the laravel, or the sql, or the database.\n\nMy current response is to ask them if they can fix it, if so how long will it take and if not who in the organisation can. Is there a better way to do this?",
            "points": "-3 points",
            "children": [
              {
                "comment": "I'd also add, \"What can I do for you to help you get it resolved faster?\" To your list of questions you ask your technical team members.\n\nIf your organization is like many I've seen, the response will be some form of \"run interference for me so I can focus my attention on solving the problem\".\n\nEvery minute that developer has to waste on political BS interruptions is 20+ minutes of delay in actually fixing the problem. \"Make that F'ing sales guy stop blowing up my phone every 15min asking for a status update so I can FOCUS!\"\n\nThere may also be a variation of, \"Nag person X to get them to do Task Y, so I can move forward with Z and fix the issue\".\n\nOr perhaps, \"Get executive A to actually make a decision on B, because work on initiatives F, G, and H all depend on direction of B. I'd hate to make the wrong assumption and redo months worth of work...\"\n\nGiven your background in Sales and managing sales people, and dealing with executives, I'd imagine you might excel in serving your team quite well.",
                "points": "2 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "Additional thought: Ask them to ELI5 what Laravel is, what the SQL is (hint: it is the database), and how they are interrelated, AS IT RELATES to your company's product. Whiteboard block diagram it.\n\nSay, for example, your CMS (such as Laravel) is like a homewares store. Laravel, Drupal, Joomla, WordPress, etc. are like HomeGoods, Bed Bath and Beyond, etc. You should, however, learn what \"CMS\" stands for, and become able to explain why it is important to someone else (senior mgr) like they are 5yo.\n\nSay your DB is like a Hardware store. MySQL, MongoDB, etc. are like Lowe's, Home Depot, Ace Hardware.\n\nAs a mid level manager, you need to have a sense of the retail market, approximate locations of stores in your area, the type and quality of merchandise they carry, etc.\n\nYou need-not know that the \"fix\" is a 3/4‚Äù copper water supply pipe elbow in Aisle 5 of the Independently-owned HW store down the street. Nor that You're going to need flux & lead-free solder to fix it. Those are the responsibilities of your technical team & a knowledgeable vendor who takes good care of their customers.\n\nBy the same token, you need to establish & maintain your \"cred\" with your team. For example, DON'T insist that your senior-most electrician drive to the (now-closed, bankrupt) BB& Beyond on the other side of town, during rush hour, to \"fix\" it.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhdo03",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhdo03/cant_figure_out_cors_issue_with_vercel_mern_app/",
    "title": "Can't Figure out CORS issue with Vercel (MERN app) - Any Help?",
    "points": null,
    "comments": [
      {
        "comment": "On MongoDB I've also put in the IP 0.0.0.0 so it can be accessed from any IP address.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "So about CORS: typically if CORS is enabled, a client has to make an OPTIONS pre-flight request to get the necessary CORS headers, or something (i think, I'm still a noob myself)\n\nYou may have to explicitly create a .options() route to handle this OPTIONS request. it's actually a completely separate request from the actual GET or POST request the client is making. You have to return appropriate headers (research which ones)\n\nI'm on mobile so I can't really look up anything rn and this is just off the top of my head, but hopefully this points you in the right direction",
        "points": "0 points",
        "children": [
          {
            "comment": "Thanks for the input :) I actually created a test route and it seems to be working, but it might be just with my /items route.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhdake",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhdake/if_you_had_the_budget_for_one_would_you_go_with/",
    "title": "If you had the budget for one, would you go with dev.ui or frontend masters",
    "points": null,
    "comments": [
      {
        "comment": "If you mean ui.dev, then yes, their courses are really great especially react.gg, I learnt a lot while being taught directly about good vs bad practices. There's also a lot of hands-on to do.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Maybe I'm in an uninformed position as a dev with 14-ish years experience who doesn't keep up with the paid courses for stuff like this. But, based on what I've seen/taken/considered, I honestly think that FreeCodeCamp is best at teaching actually useful things. I had a few years of experience when I started, but I definitely recognized just how important and real-life applicable its sections were.\n\nDoes that answer the exact question you asked... No. But, based on my experience, I think that the free option might actually be better here. Admitting that I'm not particularly familiar with the two you're asking about here. FCC is just the best I know of from experience and hindsight of what's actually important.\n\nBetween the two, which one wasn't exclusively React? I'd go with that one! React is an over-saturated market full of noob devs with temporary and niche knowledge that's highly subject to becoming mostly useless on the next major version of React. At best, those skills have a limited shelf life. It's far more worth it to learn the fundamentals that carry over regardless of framework or library or version. More broadly applicable (generic) skills are just more valuable in the long-fun (and, just to be honest here... there's no guarantee React skills will even be in demand by the time you finish).",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "This might be unpopular opinion but I didn‚Äôt like frontend masters. It‚Äôs clearly geared for people who already know web development and want to brush up or keep up with latest stuff. Their beginner courses are not that great, very shallow and the course content feels like 2-3 min edited clips put together, just doesn‚Äôt feel right. If you are complete beginner I would avoid it. I found their workshops really good, long detailed lectures with QNA.",
        "points": "0 points",
        "children": [
          {
            "comment": "Totally agree tbh, their beginner courses were not great when I skimmed. I felt like I was really getting my money‚Äôs worth with mid-level stuff and up, like the Hard Parts courses.",
            "points": "1 point",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I‚Äôve tried Frontend Masters, not ui.dev\n\nFrontend Masters covers a large breadth of content, but everything is a taped course. There are no practice problems or interactive segments in the courses I‚Äôve tried. You‚Äôre watching videos of in-person lectures generally. That said they are damn good lectures, and if you‚Äôre going through the effort of watching a long video course, you can spare the 10% extra needed to follow along actively in your IDE.\n\nIt‚Äôs also cheaper than ui.dev, by $105 annually.\n\nui.dev seems to offer more interactive content and structured practice problems, with a narrower focus on JS, React and libraries that complement React.\n\nFor more breadth and like 25% less cost I‚Äôd take Frontend Masters unless I really had to cram React, and only React, fast. Or if I had no prior experience.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "If you‚Äôre experienced, Frontend Masters is great. I have a subscription and I use it often to learn new things or refresh my understanding. I like that it‚Äôs taught by industry professionals and they update the courses frequently.\n\nI‚Äôve never used dev.ui. I learned how to code from Team Treehouse but their content is more geared towards beginners. I‚Äôve also had good luck picking some courses on udemy for frameworks like Django and Vue when I needed them.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhd30v",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhd30v/personal_project/",
    "title": "Personal project",
    "points": null,
    "comments": [
      {
        "comment": "Delete account feature",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhcffq",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhcffq/can_database_ids_be_a_readable_string_is_it_good/",
    "title": "Can database ID's be a readable string? Is it good design ?",
    "points": null,
    "comments": [
      {
        "comment": "Use ints for multiple reasons as others have said: - Auto-Increment - Easier FK relations - Avoid Redundancy - Easier updates like when On Leave gets renamed to ‚ÄúPeriod of Absence‚Äù - For small tables/queries it probably won‚Äôt make a huge difference but string comparisons will be more work to perform",
        "points": "31 points",
        "children": [
          {
            "comment": "Easier updates like when On Leave gets renamed to ‚ÄúPeriod of Absence‚Äù\n\nOh, it's easy: the id stays \"on-leave\" and the value changes. And someone swears about it every week until someone fixes it on their free time.",
            "points": "10 points",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "As long as the foreign keys are correctly defined the update is not a problem. Just declare the column with 'ON UPDATE CASCADE'.\n\nI agree with the other points though, however if you only have a handfull of values then I would prefer this way because it makes things more readable.\n\nIf you are using postgres you should take a look at postgres enums.",
            "points": "-1 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "First example it‚Äôs better than second. Because redundancy.\n\nIf you want to join them later, you‚Äôll have a lot of problems pairing with foreign keys.\n\nI‚Äôd like to give you a better explanation but language barrier (i‚Äôm not english) :/",
        "points": "11 points",
        "children": [
          {
            "comment": "but Johnny is",
            "points": "-17 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I prefer the first option\n\nHuman readable IDs are helpful for debugging, but over time things change (maybe enrolled gets changed to registered in the future) and things get hard to maintain.\n\nIn the first case you mention, if you want to change \"enrolled\" to \"registered\", you just need to change the name value. In the second case you need to change both the ID and name, otherwise what benefit do you get with human readable IDs?\n\nChanging IDs then comes with additional risks. If you have any hardcoding in your codebase keyed off the old IDs, they will need to be updated.",
        "points": "4 points",
        "children": [
          {
            "comment": "So, what about using UUID strings as ids and when filtering at endpoints use \"name\" or \"description\" column as filtering value? Is that a good approach?",
            "points": "1 point",
            "children": [
              {
                "comment": "Most databases don't like the randomness as it will constantly bloat indexes",
                "points": "4 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "What value are you getting out of the uuid that you don‚Äôt get from the int?",
                "points": "0 points",
                "children": [
                  {
                    "comment": "Unpredictable incremental sequences. Security henefit.",
                    "points": "1 point",
                    "children": [
                      {
                        "comment": "Just don't expose the incremental ID to the user. You can use incremental IDs internally, but expose UUIDs or slugs to the user. Just set set unique constraints on them.",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "Yes, this is the right approach.",
                "points": "-6 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "lets say you have ID as \"on-leave\". What happens if you later decide to rename it? it is not onLeave, but rather \"goingToLeave\"? you can adjust statusName, but PK will remain the same. Then, from the code perspective, it gives misleading info.\n\nInteger types can be auto incremented\n\nRelated to the first one - if you have Students table which has \"status\" column which is FK for StatusID, you will need to rename that link in every row in case if you change statusID value\n\nedit: don't assume that status table values will always remain the same. Nothing remains the same",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "PoatgreSQL enums made for this kind of thing, sadly other vendors don‚Äôt have equivalent construct AFAIK.",
        "points": "2 points",
        "children": [
          {
            "comment": "MySQL has enum too.",
            "points": "5 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "My suggestion here would be to leave readable strings up to the part of the system that actually uses them (the front end - not the database). You shouldn't store readable strings. You should store atomic identifiers. If those atomic identifiers are readable at the same time, okay, great, but the point is that the data is atomic, that it ideally never needs to change because it is the ultimate truth.\n\n`enrolled` is atomic. That is what should be stored in the database. `Enrolled` is something than can be derived from `enrolled`. You should NOT be saving the formatted string in the database. Why? Because it's calculated data. You can derive it from `enrolled`. But let's say you disagree and you want a nicer string in the database. Then the argument becomes you should not depend on that nicer string for anything.\n\nYou shouldn't depend on the formatted `Enrolled` string in the database. You should, instead, derive it from `enrolled` as needed. Your database schema should NOT worry about formatting. If the formatting coincides with your schema, great, but that is not the focus at all.\n\nWhy?\n\nBecause all of a sudden stakeholders come to you with a demand to change the \"Enrolled\" to \"Enlisted,\" and now you've got to backfill the database. If you hadn't stored the formatted strings in the database, and instead you stored them in your code, mapping them out, then you are much more free to quickly change things.\n\nStoring computation results is a no-no. And this IS storing a computation result. You should store hard, concrete identifiers, and that's it. Atomic data. Not formatted data. Not computed data.\n\nStore `enrolled`. Keep a map in your code where `enrolled` points at `Enrolled`, such that you can easily derive `Enrolled` from `enrolled` (or derive `Enlisted` from `enrolled` <--- this is the important bit). Then you have something you can quickly change, without disturbing the database. You always need to keep backfills in mind. Like... will my design cause backfills to be inevitable? Or are we likely able to retroactively fix things without a backfill? If it requires backfills in order to change stuff like labels, like your design would, you should rethink it.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "In the second example the Id field is useless, you could have a 1 field table with a natural key.\n\nThe main point is that you need to understand what keys are for. And what kinds of keys there are.\n\nhttps://en.wikipedia.org/wiki/Surrogate_key\n\nhttps://en.wikipedia.org/wiki/Natural_key",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Good database design generally calls for synthetic keys. That mean the keys for your tables should have no meaning other than that they are the record key. This means that you should never need to change a key because of a real world change. If you use a natural key, as in 'on-leave', but then the value column is changed to some other value, \"Not Present\", your key is no longer in sync. So we always try to use values which are not meaningful.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Business logic != Database logic\n\nYou will change your business logic. It's not an if, it's a when. Then nothing will have meanings anymore.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Honestly you'd combine the 2. Use number ID, but keep the \"key\" rather than the string value, so you can have different translations and change the underlying string in a translation file without touching the database. Depends on the size of your project of course, but you shouldn't have to go through database to change \"On Leave\" to \"Absence\", especially if you want to change multiple strings you're going to have to write UPDATE queries instead of simple text replace",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "No. This fails dB normalisation level 1. The primary key should be independent of the data of the record.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "The ID should always be meaningless and completely disconnected from any other value in the database. It costs absolutely nothing, and makes things so much easier in the future.\n\nAs people mentioned, what if you decide to change \"On Leave\" to something else? Now you'll have an ID that is misleading.\n\nThese kind of string IDs gives you no advantage at all, and has a very high potential of creating problems.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "As long as they're guaranteed to be unique they could be an INT or a string. I use GUIDs as IDs all the time.",
        "points": "0 points",
        "children": [
          {
            "comment": "When you filter what do you use?\n\nExample\n\n1) GET /students?status=1\n\n2) GET /students?status=Active\n\n3) GET students?status=active\n\n4) GET students?status=active\n\nLet me explain\n\n1) Uses the id, be it integer or guid, whatever. 2) Uses the name column 3) Uses the id, but this time id is a readable string 4) Uses a separate new field called \"key\" or something like that, that is readable as well.\n\nWhat do you prefer?",
            "points": "0 points",
            "children": [
              {
                "comment": "If it's a known ENUM of values, I'll use the enum. If it's not, I'll use the ID.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Are you asking solely about foreign key tables or for all table types? There are plenty of reasons not to do this, and I can‚Äôt think of any reasons to do this.¬†\n\nHow do you sort it? Can you guarantee it will never be changed? What if someone who only reads Spanish needs to use this table?",
        "points": "0 points",
        "children": [
          {
            "comment": "My main concern is on filtering.\n\nExample:\n\nGET /students?status=1\n\nversus\n\nGET /students?status=active\n\nSee my point?",
            "points": "0 points",
            "children": [
              {
                "comment": "Then do that with a diff query. You shouldn‚Äôt ever be checking foreign keys directly, you should be checking by a join on the main table.",
                "points": "2 points",
                "children": [
                  {
                    "comment": "I am not so experienced. Can you explain further? Maybe an example please? Would be great",
                    "points": "0 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "It's a good practice, IMO, to use readable values for things like status. Anything that could be an enum, really. But I don't really get the need to put those in a table, unless they're user editable. I'm not sure why you'd want to make status editable, though. I've worked on systems like that. They're a nightmare.\n\nIf you have to, however. Why not go with columns: id, slug, title? No worries about id collisions and you get your nice url.",
                "points": "0 points",
                "children": [
                  {
                    "comment": "Okay. So, if you don't put status values in a table, how do you store them? As a simple Varchar field? Is that in line with the first 3 normal forms?",
                    "points": "0 points",
                    "children": [
                      {
                        "comment": "Yes, your student has a status, the same as they have a birthdate or last name. You wouldn't try to design a table to store last name values.",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Primary Keys should ALWAYS be integers + use RDBMS‚Äôs auto increment option. Is it mandatory? No. But it‚Äôs good practice and it‚Äôs good following rules for clear writing in general.\n\nWhatever problem you have don‚Äôt consider this an option. You need to think of another road friend.",
        "points": "0 points",
        "children": [
          {
            "comment": "Primary Keys should ALWAYS\n\nonly siths deal in absolutes.\n\nprimary keys should not always be integers nor use an auto increment option. as a simple example, what happens if you have a cluster of databases working together in a high availability scenario? two databases would have two different records with the same ID.\n\nand about the primary key being an integer, also not really the case. first and foremost integers are not unique and have to be generated by a source of truth (typically a database) to be used. as you can see in our distributed system above that is complex - which database is the source of truth?\n\nwe also have to wait for the source of truth to give us an id before we can continue, which might not be logically what we want. example say that you want to create an order. this means saving shipping data relating to the order. but you don't have the order ID yet, because the order isn't saved in the database, so you have to save the order, get a response back, then proceed with the rest of the flow.\n\nas a side note, integer ID:s are typically responsible for business data exposure. a very common data gathering attack by competitors is sending two orders with a fixed offset, say two weeks. then they simply look at the ID of the first order and the ID of the second order, substract the first ID number from the second and now they know your two week sales volume.\n\nhow do we fix all of this? we use GUID:s. GUID:s are able to be created client-side meaning they don't need the database to give them an ID, and they're also just random garbage with no meaning so external parties can't use them to figure out things about your operations.\n\nthat is not to say auto-incremented integers don't have their place, but they do come with a slew of downsides that have to be taken into consideration before locking it in as the \"only\" primary key alternative.",
            "points": "1 point",
            "children": [
              {
                "comment": "Nice one. Really nice one. I should have not been so ‚Äúabsolute‚Äù ok but the thing is that all your scenarios (that are fine yes) are let‚Äôs say, a bit more complex. Kid above is trying to make a DB for a kindergarten or something. He needs the basics also he needs to start writing with rules and THEN, when he hits his first rule breaker, break them for a nice reason.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "... but why tho? I need the why... please?",
            "points": "0 points",
            "children": [
              {
                "comment": "Alright. So. A Primary key is a UNIQUE (which also means NOT NULL) value that identifies a row. A primary key can be of type CHAR yes. It can actually be anything. It only needs to be unique in the specified table for every row or else your table wouldn‚Äôt called ‚ÄúRelation‚Äù.\n\nA PK doesn‚Äôt also have to be 1 column. It can also be a combination of columns.\n\nWe tend to use integers for Primary keys because modern Database Management systems (DBMS) can automatically if we tell them to take a specific column (customerID for ex.) and use it for primary key. This also places on top the auto-increment function of the DBMS. In other words you never have to worry that your Primary Keys won‚Äôt be unique because your DBMS is handling it and can‚Äôt make mistake.\n\nBut you can. Human factor is the worst thing possible when talking about mistakes. So to sum up. It‚Äôs your choice. You can risk it and make your own PKs or leave it up to the DBMS.",
                "points": "-1 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Are these statuses hard coded? Or will you be dynamically adding/editing them?\nIf they're just a finite set of statuses that don't change I wouldn't even bother with the table. Just store \"enrolled\", \"on-leave\" etc in a column with the records they're attached to.\nThe \"display\" form (On Leave) is really just an UI concern and you can leave it out of the db.\n\nIf they're dynamic I'd go with the second example most likely, just cause it makes your urls and queries more readable.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I mix it up, depending on need. Since you want to use these values in filtering, I see 2 challenges with using words directly: - what if the program is used by someone who doesn't speak English? - what if somebody changed the primary keys in the DB but forgets to update the application that depends on them?\n\nFor a program I'm building, I do use words as primary keys in some places, like international language names and data type enumerations. But no user sees these. Administrators do, but cannot change them. In other places I use an auto number.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Note: common convention is to have lowercase table and column names. Both should be underscore_case, not PascalCase. Column names should not contain the table name, because that is redundant. The id column should be autoincremented int or bigint. Also, the StatusName column that you have here should ideally be ENUM, not VARCHAR, if it is intended to be restricted to a specific list of choices.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I like the second one better, because it's more self-explanatory. I don't know if that is a good reason, but when I see: State=5, then my first reaction is:ffs, now I have to do more work to find out what 5 means.\n\nAlso, holding presentation text inside a database bugs me, because it's a presentation thing. What if you want to apply multi-language applications?",
        "points": "-5 points",
        "children": [
          {
            "comment": "I mean. You gotta have at least the english description or name in there, right? Otherwise how can you know which row is which row...?",
            "points": "0 points",
            "children": [
              {
                "comment": "When you have a task with a state: pending, on hold, in progress, completed, ..., ..., the only place I need it to be is inside the task record. I don't need a second table \"State\", where a kind of key value pair is stored. Inside the domain I'm only concerned about the technical name of the state. Possible it is used as an enumeration. When it is presented to a user it can be translated into a more user friendly text.",
                "points": "-1 points",
                "children": [
                  {
                    "comment": "Does this approach follow the first 3 normal forms?",
                    "points": "0 points",
                    "children": [
                      {
                        "comment": "I find it the same as gender or religion, those things don't change that much, thus you can just store them as strings in the database. Otherwise you end up in a join hell.",
                        "points": "-1 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I see no problem with an ID being a string, but some points need to be considered. Generating a string can be a bit more costly; if performance is a requirement, the string can pose an issue. Another point to consider is the table's growth. Depending on the volume, over time, performance may degrade compared to a numerically indexed field. For example, a BTREE index will incur a higher cost with each new insertion as it needs to traverse the tree to find the index position, which can impact the efficiency of data query and manipulation operations.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhar5m",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhar5m/launching_a_startup_with_little_experience/",
    "title": "Launching a Start-up with little experience?",
    "points": null,
    "comments": [
      {
        "comment": "Running a startup is much more of a sales and finance task than a computer science task. Actually creating the product is probably the easiest part of the job as a founder.\n\nConsider finding a co-founder who has in-depth experience in sales and finance to balance your technical skills.",
        "points": "2 points",
        "children": [
          {
            "comment": "Currently working for a small startup with almost no customers, have to agree with this.\n\nEven if you think you have connections that might be interested in your project, getting them to commit and invest in an unproven bit of software vs established ones can be a massive hurdle to overcome. Finding good sales staff can be a real challenge, so anyone with experience in your chosen domain is invaluable.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bhaef8",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bhaef8/best_way_to_use_3d_models_in_angular/",
    "title": "Best way to use 3d models in Angular?",
    "points": null,
    "comments": [
      {
        "comment": "The \"Angular\" part seems entirely unimportant. Three.js is good and is pretty popular",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bha3xa",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bha3xa/after_adding_firebase_importing_from_the_core_and/",
    "title": "After adding Firebase (importing from the core and database SDKs), my PageSpeed Insights score has TANKED",
    "points": null,
    "comments": []
  },
  {
    "id": "t3_1bh7xax",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh7xax/rank_your_companys_documentation_game_and_why/",
    "title": "Rank your company's documentation game and why! (Scale 1-10)",
    "points": null,
    "comments": [
      {
        "comment": "1, they don't write docs.",
        "points": "51 points",
        "children": [
          {
            "comment": "Ditto - on the extremely rare case they write docs, they're never kept updated so they're redundant anyway.",
            "points": "",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "It was 1 when i joined and i was the first one to start writing docs.",
        "points": "18 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Where is 0?",
        "points": "18 points",
        "children": [
          {
            "comment": "It is representing the number of docs I have written.",
            "points": "5 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "What docs? üò¨",
        "points": "12 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "9.\n\nCommenting code that looks complicated but does the business logic correctly.\n\nHaving some markdown documents with developer guides, e.g. how to use some written library code that we only need once or twice a year for a new feature, in version control so it's always up-to-date with the current version of the library sources.\n\nHaving Word files and Excel sheets for deployment procedures, deployment blogs (for documenting when we had to do something more than \"push the deploy button\"), etc.\n\nAnd mostly up-to-date documentation for the whole application, because the customer tells us what he wants, we write documentation about what we would implement where and how the user would use it, and only if the customer reviewed and accepted the \"feature set\", it gets implemented.\n\nWhy only 9 of 10? To remind us there is always room for improvements. ;)",
        "points": "19 points",
        "children": [
          {
            "comment": "That last part sounds like documentation driven development üòÜ",
            "points": "1 point",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Answer: 0\n\nWhy: Because I am in charge of it",
        "points": "5 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "1 - basically non-existent for code",
        "points": "2 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "We have a boiler plate the uses a combination of Code Igniter 2, 3 and 4. All wrjtter are by our CEO through the years. With zero documentation.\n\nHe created his own \"modelus\" that we don't have to interact with, so to create anything you have to do it his way.\n\nAn example. To create a simple route, you havr write a multidimensional array in which you have set value pages for everything. From values for slug, view's filename, tag names etc. Every thing you write here it will be part of the route for that page.\n\nOh, and every each entry in this array is ordered numerically. As in page One, Page 2, page 3 and so on.\n\nControllers are something close to this. We dont have access to his modules, therefore we have 4 general controllers, submit, request, auth and forgot the last one.\n\nHere, if you want to submit a form, you open submit cpntroller, write a function that matches the name of the form. Forms also have names as numbers, just like pages. Forms are everything 500+. In the function you manipulate your date and submit it.\n\nAt request tho, you have to connect to the db and write your query, inside the controller. And since routes have been abstracted to this array I mentioned previously, if you want the request to point to a view, you have to add to the pages array a new item, \"action\" => \"name Of Function\".\n\nNot to mention, the boilerplate front is done with jquery, and all css related things are made using display: table. And, the funniest thing for me, you can't use a button to submit a form. You have to use a div. Because he didn't know about (e).preventDefault when he made this boiler plate.",
        "points": "2 points",
        "children": [
          {
            "comment": "How are your lighthouse scores lol",
            "points": "1 point",
            "children": [
              {
                "comment": "Pretty bad...I'm doing my best to only use webp for images, or at least encode them with a modern codec to serve them as small as possible.\n\nAnd of course, no bundling. Every library and file is inserted into a project through, you guessed it, a global multidimensional array. ü´†",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "what in the cluster fuck is this?",
            "points": "0 points",
            "children": [
              {
                "comment": "My comment, which is full with typos and grammatical mistakes? Or his frankenstein boilerplate/framework implementation?",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "I personally use divs instead of buttons and still have to use e.preventDefault. I'm seldom using any of the actual <form> stuff, and I could be doing any amount of indeterminate things with the data - the submit and save buttons are just formalities that might not even exist (depending on the context). There are probably benefits also to the other approach, but a long time ago I became frustrated with having to keep track of some other scope / container / parent/child relationship in the DOM and decided \"screw it, I'll just access whatever I need individually\", and haven't really looked back since.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "who has time for that shit when there are 99999999 more important things to do.",
        "points": "7 points",
        "children": [
          {
            "comment": "This guy startups",
            "points": "5 points",
            "children": [
              {
                "comment": "He gives PM vibes.",
                "points": "1 point",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "2/10. Only because I‚Äôve started documenting the 508 accessibility stuff I‚Äôve been working on. I haven‚Äôt seen any documentation for anything in the 2 years I‚Äôve been here.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "5",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "What docs...?",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "How can I rate something that does not exist?!",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Things change too quickly for anyone to feel like it's worthwhile to establish & maintain documentation, apparently.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "10 for the sheer number of high quality docs I write for my team.\n\n1 for how much time my team puts into reading them haha.",
        "points": "0 points",
        "children": [
          {
            "comment": "Any tips? I don‚Äôt even know what it should look like except that I would try and make documentation that is as best as possible like someone walking you through a code base.\n\nWhat do you do it in? Mind you, these are personal projects but I think it would be good for the hiring process (and for me whenever I stray from the current projects and return later!) as I‚Äôm in the middle of a career change to SWE.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Lots of documentation, but fragmented, out of date and only covers the most basic cases.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Started working with a start-up 8 months ago. Essentially zero documentation beyond a few token notes in the gitlab wiki on how to deploy the project and some custom laravel commands. Mostly it's been learning as I go and taking a lot of my own notes so I guess on the scale it's a solid 1 lol.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "After all these years I'm starting to think there's people gaslighting us into believing it's actually real.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I do my best to document my projects and stay up to standards and im feeling like a fucking clown reading those comments lmao",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "0 = none",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "6 it‚Äôs documented when people keep asking how",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "1, what's a \"documentation\"?",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "At least it‚Äôs there, organization is a whole nother beast",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "1",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Outdated. Written by me and my colleagues right before we leave.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Current company - 8\nPrevious company - 0",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "-1 they write docs but by people who don‚Äôt know the system",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "We Implemented the four types of documentation https://documentation.divio.com/# and it really helped organize things and help people create better docs\n\nAdded document status (approved, needs review, draft, deprecated) and owners. A 3 month scheduled review.\n\nWe are using confluence but getting frustrated with limited navigation controls. Customers have their own confluence wiki for documentation, requirements etc\n\nStarting to link documentation, tutorials and guides into a career framework and training priorities.\n\nStill much more to do but only a small firm with 10 people.\n\n6/10",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "It's in our heads.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Critcal data is documented but otherwise almost everything is outdated or there are not documentation available.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh6op1",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "https://totaltypescript.com/type-predicate-inference",
    "title": "Type Predicate Inference: The TS 5.5 Feature No One Expected",
    "points": null,
    "comments": [
      {
        "comment": "Amazing!",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Honestly this has been one of my biggest pain points with TS. Nice to see it.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh6f4j",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh6f4j/used_technologies_in_famous_website_web_app/",
    "title": "Used technologies in famous website / web app editors?",
    "points": null,
    "comments": []
  },
  {
    "id": "t3_1bh66yx",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "https://tools.link.sc/",
    "title": "[Showoff Saturday] I built an open source low code data extractor tool for any website",
    "points": null,
    "comments": []
  },
  {
    "id": "t3_1bh5rrl",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh5rrl/how_do_you_manage_a_team_of_developers/",
    "title": "How do you manage a team of developers?",
    "points": null,
    "comments": [
      {
        "comment": "Hire the right people. That's the hardest answer unfortunately but the most important one.\n\nI really don't think you need a bunch of project management with a tiny team. Just find people who are comfortable working on their own and experienced in your stack who you personally mesh with. This will probably be very difficult but so will hiring the wrong people and finding you've burned a ton of money on ill-fitting devs who can't work without a JIRA ticket.\n\nMake sure requirements are clear. Like really clear. And those devs you hire should be capable of giving feedback and contributing to requirements too.\n\nDon't try to run your company like Google or Microsoft.\n\nMinimal PM. Independent, efficient devs. Solid requirements. That's what it takes. And a ton of money to find and retain the right devs, good luck.",
        "points": "94 points",
        "children": [
          {
            "comment": "Exactly. Good devs need little attention and can handle their own work.",
            "points": "15 points",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "\"...retain the right devs\" is a part where a lot of start-ups fail to do, I feel",
            "points": "2 points",
            "children": [
              {
                "comment": "Yup. I've left a couple startups because the owner assumed that I cared as much about their company as they did. One asked fairly desperately how he could retain me, and I told him not to ask me to do nights/weekends anymore, because it wasn't going to happen. He flipped out and asked me if I \"even cared about the company,\" and I said, \"if you want me to care, how about putting me on a W-2, giving me health insurance, and giving me equity?\" His response to that? \"Then you'll work nights and weekends?\" He still blames me for his company failing. He threatened to sue me and I had a lawyer write him a letter that was basically a very professional sounding \"you can't sue a 1099 for quitting their job, you fucking moron.\"\n\nAll that to say: don't make that mistake, OP. Whoever you hire, no matter how good they are, will always be there to exchange their time for money, not because they share whatever your dream is. Treat them like human beings.",
                "points": "1 point",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "Every interview, bad or good, shows this is way harder to do in practice. You wait for the smartest candidate possible, hire them on board, and they don't have any drive - they sit on tickets and barely get work done. You change your interview process, get a candidate that seems alright, go for it, and they need a lot of hand-holding to get started. Maybe in time, they become amazing.\n\nThe \"right\" people are elusive. When you hire, you're dealing with the folks available now, kinda like fishing. Once they're on board, they may take time and communication to become great. It's a process, honestly. Be patient, record everything, and fail quickly.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I use Wrike to manage individual scrum boards of other developers. I break most things up into smaller tasks and will assign a due date. I give them the opportunity to touch base on each task prior to starting to make sure they have what they need and their dev environment is working as expected.\n\nEvery project is versioned in git. Each task gets its own feature branch. When tasks are marked completed in Wrike I will QA the work and then merge the feature into production.\n\nWe are mainly doing PHP development so I add a DDEV config to each one to simplify setup and onboarding to each project.\n\nOur DevOps developer manages all deployment related tasks. We just give him project requirements and he handles.",
        "points": "10 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "We use a management software that we can breakdown all of the projects into smaller tasks. We can then assign each dev a task or they can jump onto another task. This will help give a visual representation of that they need to do and ask questions.\n\nAlso proper git tools like github or gitlabs allows you to control version control easier. Assign one person this job will be assigned to just one person to merge all of the code. It is one thing to work with two devs on a project, it is another to deal with 4 people working on code",
        "points": "12 points",
        "children": [
          {
            "comment": "Thanks for your answer! Do you mean Jira right?",
            "points": "3 points",
            "children": [
              {
                "comment": "We use Monday but yeah there are a dozen different tools that you can use. Just pick the right tool for you.",
                "points": "6 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "I've been a software project technical lead for the last 4 or 5 years. Naming in software is inconsistent, but basically I take a customer proposal and convert that into a Software Functional Spec that the customer agrees on, then convert that into software design, then convert that into actionable tasks for the development team (including myself) and then am responsible for leading the project execution and project delivery.\n\nOne of my biggest sticking points is that there are naturally major disconnects between the hours estimation used, the software design / project execution plan, and what actually needs to be done. There are a couple ways to address this.\n\nSimplify what you're offering. If you're performing similar deliverables for each customer you can reduce the unknowns in the next project.\n\nBudget for the gaps. Inevitably there will be things like rework.\n\nRecognize the gaps. Getting revenue flowing is important, meaning at the point of the sale, design work hasn't yet happened. And when the project was designed, the unknown bugs weren't there. That is okay (to an extent). That also means you cannot just rely on the stories in Jira be 100% of what is remaining on a project, because the unexpected will come up.\n\nReduce the gaps. At the end of each project you should be looking at your actuals and what all steps went into the project and updating your estimates and any templates being used to plan the project. Too often I've seen zero hours estimated for dealing with things like firewalls on my projects. Its not that big of a deal, but it inevitably eats up a couple developer days to get fixed or isn't addressed until someone's trying to test an integration and realizing its failing because our customer hasn't configured the rules properly.\n\nManaging a dev team is largely a matter of trust and verification.\n\nCode doesn't have to be perfect. If a teammate pushes code and you point out a few things that should be different, no need to get on them about naming convention or something trivial. Y'all's first goal is to make a working product.\n\nYou want your developers to be confident that they are pushing code that will work. You want to be performing code reviews. The purpose isn't for an individual to gate keep, but so that you are working to make a quality product. You're most senior person on a project should be getting their code reviewed by people with less experience. It will help them learn and they might even have insight on something you missed when in a rush.\n\nTest all of your code. At this point you likely don't have QA, but you need a verification round performed by someone other than the developer.",
                "points": "4 points",
                "children": [
                  {
                    "comment": "Thanks a lot, your answer is very helpful!",
                    "points": "1 point",
                    "children": [
                      {
                        "comment": "Glad to help. If I were in your position, I'd also put an emphasis on having your tools and documentation organized. Its super easy to decide to be process oriented or want to be a test-driven development team or commit to some other overly specific process. Its a trap and you don't want to get bogged down by processes. But what you do want is organization. Have a place where your team can keep and update design work. Have a place where you are tracking your project management, budget, hours, etc... It doesn't need to be figured out on day 1. Basically you want to avoid a mess in your documentation / tools in the same way you want to avoid spaghetti code.\n\nAnd good luck. I hope it goes well.",
                        "points": "1 point",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "Notion!!",
                "points": "-4 points",
                "children": [
                  {
                    "comment": "Expensive, and becoming bloated :( I miss the simpler version.",
                    "points": "2 points",
                    "children": [
                      {
                        "comment": "Glad it's not just me. Shocked by how rapidly Notion went full enshittified.",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "jira is too expensive. my team is using openproject",
                "points": "-1 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "How to manage?\n\nperson must have good mindset - most important factor\nperson must have skills\n\nSet rules of for your people\n\nIn contract\nexpress that in everyday communication\n\nSet rules for yourself\n\nClearly define what is a good result of work\nDefine what is not enough\n\nThere are things you won't predict and can't predict. Adapt.\n\nYour people should know exactly what to do and if they don't you should talk to them and see if they improve. It's never easy.\n\nand most important of all\nfail faster\n\nManaging is more difficult than most people imagine. Especially if YOUR OWN money is involved and you're not satisfied with quality.",
        "points": "5 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Give them concrete goals and deadlines. Then leave them alone and don‚Äôt micromanage.",
        "points": "102 points",
        "children": [
          {
            "comment": "excuse me what?\n\nin what fantasy world do you live in where you can leave a dev you just hired and have 0 experience in with alone to work on a 2-3 week project?\n\nlike what, I swear some of these redditors are so lost",
            "points": "50 points",
            "children": [
              {
                "comment": "I dunno. I think that‚Äôs a great strategy for after you‚Äôve established trust. But you‚Äôre right, at first I‚Äôd be doing a daily 1:1 at minimum.",
                "points": "36 points",
                "children": [
                  {
                    "comment": "Yeah, big difference between a question of \"how do I manage a team\" vs. \"how do I onboard an engineer to autonomy.\"",
                    "points": "19 points",
                    "children": [],
                    "isDeleted": false
                  },
                  {
                    "comment": "thank you.\n\nat least someone has some experience around here and knows how things work.",
                    "points": "-20 points",
                    "children": [
                      {
                        "comment": "Why are you hiring someone you dont trust? But yea first few tasks should be softballs",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "Where did they say 2-3 weeks? Concrete goals and deadlines could be \"come up with a model for users in this API\" and the resulting code could be a single file, and you expect it done within a day. It's a small and silly example, but it's a concrete goal and deadline that has nothing to do with spending weeks or completing a project",
                "points": "6 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "It's pretty easy when you hire competent developers who can work with minimal oversight.\n\nGive them an overview of the code base, point out anything weird they may not have seen before, and let em have at it. If they're good it'll work out. Startups specifically need that kind of get-shit-done person.",
                "points": "9 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "Where does it say \"0 experience with (working) alone\"?",
                "points": "3 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "For sure.. Jr devs required daily‚Äôs for them to be productive, they don‚Äôt have to be formal meetings, but if you want jr‚Äôs to grow and flourish they have to be carefully guided.\n\nMed to sr‚Äôs should be more at mercenary level. More autonomous, clearly defined deliverables should be all they need. And the ability to get answers to details",
                "points": "1 point",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "I'm def lost, I have no experience in the field at all!",
                "points": "0 points",
                "children": [
                  {
                    "comment": "I would assume you are still in high school and have 0 experience leading a team of developers.",
                    "points": "-8 points",
                    "children": [
                      {
                        "comment": "What a shit attitude you have, son",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "If you‚Äôre not doing daily stand ups and using slack or similar for communication you‚Äôre gonna have a bad time.",
            "points": "16 points",
            "children": [
              {
                "comment": "If someone has to be told they need slack and frequent standups and they are from the tech world, they are going to fail",
                "points": "16 points",
                "children": [
                  {
                    "comment": "You said ‚Äúleave them alone‚Äù, so I was saying that you still need constant communication, just structured so devs have time to focus but also a async channel for help and clarification when needed.",
                    "points": "11 points",
                    "children": [
                      {
                        "comment": "pretty sure primeagen says he never does standups at netflix",
                        "points": "-19 points",
                        "children": [
                          {
                            "comment": "But they can afford to only hire the 0.01%\n\nBob joining random startup as employee One, ain‚Äôt quite going to be of the same quality",
                            "points": "10 points",
                            "children": [],
                            "isDeleted": false
                          },
                          {
                            "comment": "And they get to pick their devs from the top of the pack. If you have all seniors or devs that are excellent at communication, you definitely have flexibility to do things like that.",
                            "points": "4 points",
                            "children": [
                              {
                                "comment": "obviously, my point is that it was a bit too generalized for my tastes",
                                "points": "0 points",
                                "children": [],
                                "isDeleted": false
                              }
                            ],
                            "isDeleted": false
                          }
                        ],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "I don't understand the hate for stand ups.",
                "points": "3 points",
                "children": [
                  {
                    "comment": "Stand ups are great when they‚Äôre what they‚Äôre supposed to be. Either quick meetings or asynchronous updates that give you a chance to update everyone on what you‚Äôre working on and get some help or ask questions if needed.\n\nNot an hour long conversation about random bullshit that has nothing to do with work and just eats up time to actually be productive. ‚ÄúToday‚Äôs standup question of the day is‚Ä¶‚Äù\n\nOne of these types of standups is much more common than the other.",
                    "points": "4 points",
                    "children": [
                      {
                        "comment": "If I was assigned to a team that had one of these mythical one-hour standups, I would simply make it a habit to audibly leave after 15-20 minutes (after properly communicating that our standups drag on for way too long).",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      },
                      {
                        "comment": "What questions you ask during your standup meetings?",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      },
                      {
                        "comment": "Is this in the context of multiple people working on one project? Would you still have daily standups if each dev has their own project to get on with? And if so, why?\n\nAt the agency I'm at, we have WIP's on Mon/Wed/Fri. And even then, I'm sometimes just like 'yep... still working on X... nothing to report..'. We generally have our own project that we look after from start to finish.\n\nI can see this may be different if there are multiple dev's working on a single project.",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "Terrible take",
                "points": "2 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "I wish all partners, clients and operators went by this",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "Yes.. for example: see this websites? Instagram ? You have 2 weeks to do it. Good luck everybody.\nGoals are good, it inspires people. Random deadlines are the worst. Deadlines should be set after a discussion or two with the dev, you his estimates and set deadline for 1.5x that time. On your planing you note 2.5x of the original time.",
            "points": "-1 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "At my job we write functional designs for the devs. Typically you have PMs work on timelines and SOWs of the project. Then analysts will gather requirements to share with the dev. Dev builds thing, anaylst might do the QA and test then present to the client. Rinse and repeat. Check out Software Development Life Cycles (SDLC)",
        "points": "4 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Hire someone that knows how to lead :)",
        "points": "4 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "https://linear.app/method use it as inspiration.",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "i have a small company and this is what has worked for me:\n\nfigure our their strengths, weaknesses, likes and dislikes.\n\nthe most juniors should work on their strengths until they understand your projects and star becoming self reliant, The most seniors will be able to understand most of the process faster than juniors, so use the seniors where you actually need help.\n\nhave a standup every other day, and just talk about the project and maybe allow the devs to setup a call after the standup in case they need to do some pair programming.\n\nyou should remind them that they are a team and everyone should be able to support each other and they all have the same goal.",
        "points": "2 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Hire the most Sr. / lead Dev you can afford and convince them to join the efforts.¬†\n\n¬†They will manage everyone you hire. ¬†\n\nDon‚Äôt be intimidated, there‚Äôs no substitution for experience.\n\nYou guys may be good, but process is everything. And that usually comes from experience in the grind",
        "points": "2 points",
        "children": [
          {
            "comment": "As we are just starting the budget is not that high, we can‚Äôt afford a Sr. / lead dev, we would like to learn everything that we need to become the lead devs ourselves if it‚Äôs possible.\n\nWe have to make experience somewhere, so it can be a good starting point. Sure we will do a lot of mistakes but this is life, we‚Äôll learn from them",
            "points": "0 points",
            "children": [
              {
                "comment": "One word: Equity. Offer that first super-senior dev very substantial equity, maybe make them a co-founder.\n\nAlso, if you‚Äôre starting your own company, you will not become a ‚Äúlead dev‚Äù. You‚Äôll become a manager. That‚Äôs the skill set that the company will ask you to develop. Exception is if you do a Mitchell Hashimoto and hire somebody else to run the company instead.",
                "points": "-1 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Hire someone with Sr. Principal / Archtect skills from a non-startup that knows the ways of very large development teams. That person will understand how to work with you to develop standards that scale, will know how to document them, and will understand the pitfalls of not doing so - listen to them.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I worked for a startup for a while that didn‚Äôt want to do daily standup. I learned a lot from that time, but perhaps the biggest lesson is that getting the team together regularly to discuss their priorities is extremely important. That and as development resources come on and speed up, don‚Äôt forget to scale up testers. Mine didn‚Äôt and deployments were constantly behind due to testing.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "First off, congrats on striking out on your own. This is not the first challenge you‚Äôll face in this area, and chances are not the last time you‚Äôll think (or re-think) how this is handled. As you and your teams scale, you‚Äôll likely find yourself re-evaluating old decisions to see if they still hold merit. They may, but they may not!\n\nThere‚Äôs no one size fits all answer here. I‚Äôll provide my opinion on it, but it‚Äôs just that: an opinion. I‚Äôm sure others may disagree, and will have valid reasons for doing so.\n\nThe first thing I think you should think about is ‚Äúhow do you want to work?‚Äù Do you expect the new developer to be able to do what you and your partner do? Do you expect them to make the same decisions, have the same opinions, figure out resolutions to the same problems? Do you expect collaboration before decisions, or to just assign a problem and have them execute? How you work, where you want to be spending your time, will inform the who you‚Äôll try to hire. It will allow you to clearly define expectations of the role and help you find the right talent to fill it. It will require different levels and types of investment getting a senior developer to do what was mentioned above compared to a junior.\n\nOnce the how and the who are determined, you can find the right tool to help you organize. In this case a tool could be abstract as in a framework to approaching work, or something more concrete like a product that brings with it its own opinions.\n\nPractically, your team is still small enough to be able to effectively share most (if not all) information informally. This is expedient but will pose scaling problems later. The two biggest issues i‚Äôve seen scaling teams are 1) combating tacit knowledge and 2) shifting away from highest possible performers as a staffing strategy.\n\nSome effective things i‚Äôve seen on teams in the 3-5 (operating individually, not part of a larger org) are to have clear expectations of ‚Äúdone work‚Äù which includes appropriate testing levels and support documentation, to have agreement to keep administrative overhead to a minimum (don‚Äôt overplan your roadmap, don‚Äôt introduce needless task breakdown, etc) , and to communicate multiple times a day to stay aligned.\n\nOf the books i‚Äôve read on this topic, none of them have covered how to do this as part of a startup and all have the bias of existing within a larger structure. So I can‚Äôt really recommend anything specific unfortunately.\n\nGood luck, and hope this was at least a little helpful.",
        "points": "1 point",
        "children": [
          {
            "comment": "Really valuable tips, thanks a lot for your answer! :)",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Don't overthink it, just decide what you want the person to do, and ask them to do it. Write it down somewhere like Trello so everyone knows who is working on what.\n\nBe hands off, don't micromanage, but make it clear that you welcome questions and input.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Amazing amount of bad advice here. Read The Art of Doing Twice the Work in Half the Time by Jeff Sutherland. If you scale beyond 7 developers or just need more practical advice, read Essential Scrum by Kenneth Rubin. It's more like a textbook, so maybe read the first quarter or so, then skip to chapters that feel relevant.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I‚Äôm not a project manager but, I find that processes are very crucial when it comes to efficiency and quality of the product. It takes trial and error but you do need to find a good process to follow when proposing requirements/developing/testing etc.\n\nAlso, establish some kind of requirement baseline for requirements / iterations. The last thing you need is an argument with your team or stakeholders about implementing the wrong feature or leaving something out. In other words, there should be some kind of ‚Äúsign off‚Äù for requirements that way everyone‚Äôs on the same page.\n\nThank you for reading.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I'm a dev lead on a team of 5 (not including myself). A few things I've learned:\n\nSpend a lot of time planning. Ideally, you want to know 2-4 weeks in advance what your team will be working on, so you can get things ready and ensure that everyone has relevant work.\nBe very aware of what block each other. In my team, we have a product manager, and if I let her decide what we work on, she'll say \"all 5 of you work on X feature\". But the problem is, the feature has to be worked on in sequence, so ticket 1 blocks 2, then 2 blocks 3 and 4, then either 3 or 4 blocks 5. The better way to do things is to work on more features at once, so people can work on the first ticket in a blocking chain rather than sit there waiting for work to be ready for them.\nDo some analysis on what's the most blocking tickets and give them to your most experienced devs, which is often yourself. You'll be faster than anyone else, and you handling one ticket of work can unblock 4 tickets for the rest of the team.\nBe actively involved in as many PR reviews as possible.\n\nNo advice for learning about this deeply, this is all my advice moving from individual contributor to dev lead in the past few years.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I'm in need of a sales person for my company if anyone is knowledgeable",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Surround yourself with subject matter experts who have the same goals as you do relative to the topic. Don't be afraid to give control away, especially if you know you can do it on your own.\n\nReally, being the subject matter experts yourself will help you break down work to be done. Delegating tasks is easier when you can demonstrate the expected result (have clear and finite expectations), have trust that the delegate can achieve the result, and be willing to be the gateway for commits on trunk based development. This also means having clear expectations in writing about code style, standards, best practices, and security available for quick reference.\n\nWhen you all agree on the expected results, and you all agree on what tools and \"materials\" to use, it's up to the developer to execute.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Hey, I've been doing software development management for about a decade now. Here's what I've learned.\n\nEngineering Management is not Project Management or Product Management. You want all three of those roles held by different people. Engineering Managers ensure quality. Product Managers worry about scope. Project Managers worry about speed. This is the Iron Triangle as a management structure. You won't have real negotiation about these things unless there are three distinct stakeholders.\nYou can not work backwards from what you need and when you need it. If you do this you will fail because something always goes wrong. Humans are terrible as estimation so don't live or die by those estimates.\nBuild your product in iterations. Every iteration should be small. Every iteration should be tested. Lean into testing early. Every test you write is a product feature that can't break.\nTeams are just groups of people who share rituals. Create those rituals. Keep meetings short and try to schedule meetings so they directly abut other things on the schedule like lunch. Context shifting is expensive; do it as little as possible.\nEvery developer needs 30 minutes weekly (some people do every other week) with their boss. 1:1s are the single most powerful tool in your management kit. These are time for your employee to talk about whatever is on their mind. Frustrations with other employees, their kids' soccer schedule, whatever. Listen. The goal here is to make sure that they KNOW they can bend your ear on the regular; that way they won't derail meetings or blindside you with stuff.\nLearn about Agile. Not because Agile is the best thing ever but because Agile is a good starting place. Limit your long term planning; most of it is worthless anyway. Do the planning work to ensure that the code you're writing really is the code you want to be writing. Be pedantic about this stuff. It'll save you headaches in the long run.\nSet aside time for professional development. The tech world never stops changing which means you either have to hire new people every couple of years or you need to make sure your team has time to learn. Take note of who uses this time well. That tells you a lot about the kind of engineer they are likely to become.\nHiring sucks. You will get frustrated. You will feel like there aren't any decent developers out there or, if there are, they're not applying to your job. Be patient. It's much, much, much better to pass on a good candidate than it is to hire a bad candidate.\n\nGet out in front of the HR stuff early. You should avoid creating policies for everything but you do need some basics. Are you going to have public or private compensation figures? How will vacation work?\n\n\nGreat engineers often don't make great managers. Consider finding someone you trust who's done something like this before to help get you started. The older and more experienced they are in the industry the better; personal networks are the best source of new hires.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Put processes in place, and those processes will put everything else in its proper place.\n\nOne must make sure these processes are solid, robust‚Äîyet still flexible enough to deviate from the mold when circumstances require malleability over immovability. Once one has the proper processes, the human aspect of the equation is easy. If the process is thoroughly comprehensive, new employees will be able to easily habituate themselves to the workflow.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Put the work into sprints. Do a standup every morning, ask if anyone has any blockers, be supportive, and make it a safe place. Point of the sprint isn‚Äôt to manage the project, it manages the progress. It‚Äôs very clear what your velocity is after a few weeks and issues with the team or devs can be identified quickly. Ideally sprint review (like 15 mins will do) with the team on what issues arose and what you should do better next time. Sometimes there‚Äôs nothing. Just make sure you foster a safe space to talk. When someone keeps lagging, identify them as a problem to solve. Do they need training? Do they keep hitting the same hurdle? Or are they just uninterested. Keep emotions out of every decision (except THEIRS) and you‚Äôll be miles ahead of most managers",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Hire the right people. You want hard-working self-starters who have good experience working in your setting.\nMake sure your onboarding experience is air tight. Take note of popular open source projects and how they handle docs, CI/CD, etc. Optimize workflows wherever you can.\nDon't \"manage\" - enable! Get out of your devs' way when they're producing well. Inquire when they aren't. Be encouraging, supportive and make sure you recognize their achievements (positive reinforcement and whatnot).",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Generally agree with what top comments says. I've seen other comments mention setting due dates yourself. I think it's good practice if the work to be performed is well understood. But, chances are in your case, and many other cases, that it is not. Now you're trying to estimate how long a project will take to complete. For somebody else.\n\nAlso I worked at a startup where one of the things the founder did early was establish culture. Really, like weeks without difficult work to get everyone on the same page. I think it was the right move.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "a tree of bananas",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Plan the project in enough detail to be able to allocate out sections with well defined deliverables for the developer to execute on. Document your coding standards and make available to the team. Document what libraries/state management/framework will be used and how they will integrate. Document architecture and file structure (what goes where) Weekly check ins. Weekly review. Plan how you want to use branching effectively - when you deploy you want updates to be seamless and segregated on another branch before adding to production version.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Lateral Management is the best way and also the most demanding. When hiring the most important is motivation and soft skills. Everything else can be learned.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "My advice after almost a decade in early stage startups would be to not overthink the organization. 4/5 is not that different from 2, it's still a group of people that you can hold in your mind with little effort. The difficulty comes when you reach a dozen but in 95% of cases you'll never reach that scale - most startup ideas are just SMBs in a trenchcoat and the co-founders shoot themselves in the foot by over-raising and over-hiring.\n\nProcesses and organizational layers are a very costly liability. You should strive to keep them at a minimum - a small engineering team is not an orchestra it's a punk band rehearsing in a garage. Forget authority, the group should self-organize on technical and organizational legitimacy. Cultivate your engineer's strong points and preferences, it doesn't matter if your team looks unbalanced what matters is that it can accelerate in good times and not decelerate too much in bad times. There's a lot of decisions that should make you feel like a fraud in front of other entrepreneurs, and you'll have to double down on these decisions if you don't want to be a loser in this game.\n\nYou said somewhere that you didn't have the budget for senior developers, well if that is the case i can guarantee you have even less the budget for hiring juniors. They cost a lot more than they seem to and they need management or things will break down. 1 scrappy senior costs more upfront but it's a multiplier for your business and won't eat up your attention.\n\nBe selective in your hiring, then trust your people. Explain the business to them every chance you get, give them the keys to the kingdom, let them self-organize while providing them as much support as you can. YOU are a service provider to THEM, never forget that. In the unlikely event that you do scale to a larger team in the next few years, they will be the layer 0 of your organization, and at that point if the machine makes sense you can hire an engineering manager and ask them to scale it.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Read Buy Back Your Time. It has so many good tips. This one stood out to me: give your team a definition of done (DoD) for everything.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Here‚Äôs all the advice I keep to myself and tactfully don‚Äôt share with other non-technical founders:\n\nFor a tech startup the developers are your only strategic employees (until you start scaling much later). Everyone else, and I can‚Äôt emphasise this enough, are utterly superfluous.\n\nI see founders wasting huge amounts of their day endlessly talking to marketers, designers, even fucking HR because they don‚Äôt like developers. If that‚Äôs your problem then learn to like them or quit while you‚Äôre ahead.\n\nThere is no such thing as a ‚Äúcheap‚Äù developer, their market rate isn‚Äôt set by ego, it‚Äôs competition and any search for ‚Äúcheap‚Äù developers means you‚Äôve already lost that competition.\n\nDon‚Äôt be a developer incel, nobody owes you their time or code, especially if you can‚Äôt get any yourself. Good news is that with coding (unlike incels) it is perfectly legal and even encouraged to simply pay for it.\n\nDevelopers will work for a paycheque not your dreams of a yacht. If you‚Äôre not paying market rate then those developers will start to question what exactly you‚Äôre bringing to the table.\n\nOh and they will 100% do that, especially out of spite if you give them a reason. If you think they‚Äôre not out there creating startups because they lack some special trait you have, think again. They are more than capable of removing you from the equation and Zuckaberging your dreams.\n\nThat‚Äôs all the big mistakes I‚Äôve seen, most multiple times now. Other than that managing developers is easy, bring them a big problem clearly articulated and they will work magic.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Hey.. fellow startup owner here..\n\nI just hired my first 2 developers last week. I understand your concern, as I'm facing them right now.\n\nLike the others have said... the developers should be good that is the most important thing. They should know their subject matter and should be well versed with your stack.\n\nBeyond that, another important skill is git, especially if you will have more than one person working on the same project with the possibility of working on the same file).And by git i dont just mean pushing and pulling, there should be a set method to merge changes and avoid git conflicts, this should be determined and explained/taught to them by you.(I literally just finished doing this 5 mins ago).\n\nLastly, use ClickUp, its a good project management tool, break down your project into features and features into tasks.. assign them to a dev, that way they know exactly what they are supposed to do. The free tier would be sufficient for this.\n\nAll said and done, I'll tell you one thing... managing a team is difficult, especially if you have less experience managing a team or group of people of any kind.\n\nBut there's only one way forward, you will make mistakes and learn from it.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Get a process down that tracks work, and make sure the new devs move into it. GitHub projects, Jira, whatever. Pull requests, build tools, you'll need some dev ops - more than you have for a 1-2 person dev team. Doesn't need to be immediate, just will eventually.\n\nHire on 60 day trial basis, if you can. Maybe it's legally prohibitive, but a 1090 for 60 days to try-before-you-buy would help avoid some buyer's remorse.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "The last updated approach of managing a team of devs it to simply lay them all off.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Get a solid CRM, I love Asana for managing my team, timeline, productions, scheduling and incorporating client action etc. Tracking progress. Building out workflows and workflow templates. Keeping internal best practices well documented along with the myriad of other things that need to be documented. Automation is also a big factor in streamlining the process from onboarding to project completion.",
        "points": "0 points",
        "children": [
          {
            "comment": "Also asana users here! It's a great tool, but sometimes I find it too flexible. Putting up guardrails on overdue tasks, missed tasks etc is quite difficult.",
            "points": "1 point",
            "children": [
              {
                "comment": "Say more here. Let‚Äôs hive mind it, friend",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Manage your backlog and make it as detailed and picked over as possible. Be aware of complexity and know who you need to trust to take on the hard stuff.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Learn on then job; make early mistakes, fail fast; don‚Äôt get discouraged and frustrated and become a better person for the future. This will piss a lot people you meet earlier in your journey.\nHire right people, trust and delegate to them; and learn by observing.\nGet a consulting firm, outsource and manage; yet you still need to manage the consultant.\n\nMany ways to go, learning is a journey, enjoy it.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Finding someone who understands git and pull request that way you never have to talk to them",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Be organized.",
        "points": "-2 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "carrots and sticks will get them in line.\n\ndo you need a product designer?",
        "points": "-2 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Use tools like Jira. Hire good leaders make sure no one has to directly overlook more than 5 people.",
        "points": "-2 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh4iaj",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh4iaj/xampp_not_loading_css_images/",
    "title": "XAMPP not loading CSS images",
    "points": null,
    "comments": [
      {
        "comment": "Show us the CSS line in question as well as what should be an example of your website URL structure.",
        "points": "1 point",
        "children": [
          {
            "comment": "The line in question would be below + my structure looks like this:\n\nhttp://127.0.0.1/webpage/index.html\n\nbackground-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(img/background.jpg);",
            "points": "0 points",
            "children": [
              {
                "comment": "First, use quotes for that url('../path/to/img/background.jpg'). Then note this may be relative to where the CSS file is located. You can also use a fully qualified URL like so: url('https://example.com/img/background.jpg')",
                "points": "-1 points",
                "children": [
                  {
                    "comment": "True, but it is good practice to use quotes.",
                    "points": "-1 points",
                    "children": [],
                    "isDeleted": false
                  },
                  {
                    "comment": "That url doesn't need quotes.\n\nQuotes are required if the URL includes parentheses, whitespace, or quotes, unless these characters are escaped, or if the address includes control characters above 0x7e.\n\nThe following are all valid and equivalent:\n\nurl(\"../img/example.png\")\n\nurl('../img/example.png')\n\nurl(../img/example.png)",
                    "points": "0 points",
                    "children": [],
                    "isDeleted": false
                  },
                  {
                    "comment": "Did that, no changes. (\n\nurl('C:/wamp64/www/webpage/img/background.jpg')\n\n\nIt's just really weird that my vsc live server shows it how it's supposed to be and neither XAMPP nor WampServer show the css images. Could it be an Apache issue?",
                    "points": "-1 points",
                    "children": [
                      {
                        "comment": "Close! You need to realize there is a difference between a local operating system file path, and what is considered the web url path that your (local) web server is listening on.\n\nNow, I'll just ask a simple question. What would be the public URL for the website if you were to put it online? Consider also what would that look like if you host it locally on your computer.\n\nModify appropriately.",
                        "points": "0 points",
                        "children": [
                          {
                            "comment": "Dear cshaiku,\n\nif I could give you an award, I would.\n\nYou have saved me from breaking down crying with one simple trick.\n\nJokes aside, thank you so much, I didn't realize that it searches only in web url path for the pictures.",
                            "points": "1 point",
                            "children": [
                              {
                                "comment": "It's all good. Fundamentals are important. I didn't want to spoon-feed you the answer when it was more important for you to learn why.",
                                "points": "0 points",
                                "children": [],
                                "isDeleted": false
                              }
                            ],
                            "isDeleted": false
                          }
                        ],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh4g7t",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh4g7t/please_suggest_some_free_hosting_services_for/",
    "title": "Please suggest some free hosting services for Node apps.",
    "points": null,
    "comments": [
      {
        "comment": "Vercel, Netlify.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh40xv",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh40xv/blocking_an_entire_thread_from_appearing_per/",
    "title": "Blocking an entire thread from appearing per keyword?",
    "points": null,
    "comments": [
      {
        "comment": "Are you talking about Reddit specifically? Because RES lets you filter by keyword\n\nhttps://redditenhancementsuite.com/",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh2mcb",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh2mcb/s3_storage_overkill_for_personal_website/",
    "title": "s3 storage overkill for personal website?",
    "points": null,
    "comments": [
      {
        "comment": "S3 has an option to act as an HTTP file server, which you can integrate into Cloudfront (AWS-managed CDN) for caching and HTTPS. While it may seem like over-overkill, if you look at the data transfer rates for Cloudfront it could actually save you money.",
        "points": "20 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "It's good for learning, you can replace mysql with sqlite and use litestream.io to keep the db data also replicated in S3.\n\nBut for just having something online, for this scale definitely gh pages or cloudflare pages would be a simpler solution.",
        "points": "13 points",
        "children": [
          {
            "comment": "But for just having something online, for this scale definitely gh pages or cloudflare pages would be a simpler solution.\n\nThis. Use Cloudflare Pages with their CDN and managed SQLite.",
            "points": "9 points",
            "children": [
              {
                "comment": "Yeah this is what I've decided to go with. thank you.",
                "points": "2 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "Alright thanks :]",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Where do you need to serve your images? I used to store a json on the client side that includes the links to the CDN. Then you don't even need a backend, just update your json file and there you go - a computing instance can make it pricey on long run.\n\nNow I created my own backend (kind of a headless CMS) which handles all the automatic compressions to webp (thumbnail, medium,...) just for convenience sake as well as learning purposes :) but tbh it's an overkill if you don't update the website often",
        "points": "5 points",
        "children": [
          {
            "comment": "(if im interpreting you correctly) They are being served on a multipage gallery (something like this) with simple filter options. They will also be served individually with a unique URL on their own dynamically generated page like xkcd\n\nCould I ask what you mean when you say that you don't even need a backend? What sort of updates are you doing to the JSON file? Sorry I'm not very well versed with .js, im more of a PHP sponge",
            "points": "0 points",
            "children": [
              {
                "comment": "What you want to achieve is doable in many different ways :)\n\nIf you control the frontend code (the website you see), instead of making calls to the backend to fetch your data from MySQL, you can simply create a json file on the client side and therefore eliminate a need to store your information in a database.\n\nThen you can just do client side code for filtering etc as well in JS, removing the need to have a 1. PHP logic and a server to run it and 2. MySQL (for cost measures)\n\nIn terms of having the URL for a single photo, the flow in the application would look something like this:\n\nUser accesses URL, i.e. /image/123 where 123 is the image-id\nYou find the JSON object with that ID, which also stores the URL to the image\nYou take this image URL and display it on the website\n\nRather than having a PHP with MySQL where the flow is like this:\n\nIs the same\nYou take the ID and send it to the backend to give you the information from MySQL for this record, which contains the image URL from the CDN\nReturn the data to the client in the request response body, which then uses the info to display it\n\nI am not sure if it's clear, so feel free to DM and I can elaborate further (and also show you how it works on mine - don't want to get banned for self promotion). Ultimately there are always various trade-offs to be made with each approach, so it really depends what is important to you. I am a fresh college graduate and therefore I want to optimize for the cost, if you can spare 10$ a month, doing it the way you know it will be the best as you won't need to learn as much along the way.\n\nI have been solving this exact issue over the years in many different iterations as I am also a photographer and always coded my own portfolios.\n\nAlso I think using CloudFront is really nice to serve images from S3, you get some performance benefits due to caching and so on, while having a bit more secure S3 bucket access policies.\n\nEDIT: Maybe I have also just overengineered my website (for learning purposes too), I saw you decided to go with the other great suggestions - goodluck on your way and feel free to ping if any questions arise :)",
                "points": "5 points",
                "children": [
                  {
                    "comment": "what the fuck\n\nfirst of all you've completely blown my mind. Thank you for such an extensive, in depth response. Secondly I have a few questions then if you don't mind me picking at your brain for a bit.\n\nWouldnt it be a pain in the ass if you wanted to add a completely new attribute to the json file?\nWouldnt it also mean I'd have to code all the sorting algorithms basically from scratch? Wouldn't it be a lesser pain in the ass to just let SQL handle it?\nalso you are crazy for making your own backend, what other features did you build into it?\nslightly offtopic, would you recommend mongodb for something like this over sql? If you have touched mongodb at all, that is\n\nI thought about doing it with a JSON initially. It sounds much more straightforward to deal with. But it would be absolute fucking insanity because a lot of the tags are relational, I move around a lot of files based on personal grouping taste, need to query and sort a lot. Also this is an up-to-date gallery to store my artworks and I draw every day, meaning for every artwork completed would require parsing the JSON daily and the thought of doing that is enough to piss me off. lol\n\n‚Äã\n\nedit: removed a question because i figured it out",
                    "points": "2 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I think for the amount of data and traffic you‚Äôre talking about your monthly cloud bill would not be too high ( as long as you use SqlLite like one of the other comments said)\nUnless of course you start to get crazy high traffic",
        "points": "4 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "S3 is fine or just buy $5 vps from Hetzner or somewhere. On Hetzner all plans include 20TB traffic per month.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh1p0o",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh1p0o/how_to_use_event_delegation_for_events_that_dont/",
    "title": "How to use event delegation for events that don't bubble?",
    "points": null,
    "comments": [
      {
        "comment": "I haven't worked with web components, but as a general rule a root-level listener with matchers seems like an unmaintainable solution. Any time you add a new button or change the behaviour, you'll have to add increasingly complex discrimination logic. It goes against the Open-Closed principle of SOLID.\n\nThis blog suggests using connectedCallback() and disconnectedCallback() to add/remove listeners to specific children.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Why not just assign an event listener to that class .myinput afterwards, for any focus events? You could do this:\n\ndocument.querySelectorAll('.myinput').forEach(element => {\n  element.addEventListener('blur', () => {\n    // ... act accordingly\n  });\n});",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh1dha",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh1dha/feeling_a_bit_frightened_everyone_keeps/",
    "title": "Feeling a bit frightened. Everyone keeps mentioning that DEVIN will take our place.",
    "points": null,
    "comments": [
      {
        "comment": "At this point we‚Äôve had so many posts about this that it feels more like someone is advertising the bot by pretending to be scared developers.",
        "points": "110 points",
        "children": [
          {
            "comment": "Honestly, I think we should ban all AI-related posts, I don't think any of them has been productive",
            "points": "32 points",
            "children": [
              {
                "comment": "I don‚Äôt care about banning AI discussion, but I‚Äôm pretty tired of ‚Äúwill X replace me‚Äù and this is the fourth nearly identical post about this specific bot in the last 24 hours or so",
                "points": "3 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "it's a very saturated topic, i must admit that i follow tech news a lot less since AI has become the new trendy thing because i'm tired of hearing about it.",
                "points": "5 points",
                "children": [
                  {
                    "comment": "All the same crypto GPUs and all the same crypto shysters desperately hoping to keep their investments afloat by pivoting.",
                    "points": "4 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "honestly AI generated code reminds me a lot of when WYSIWYG editors were more popular, sure it works, but a lot of the time the code is absolutely horrible.",
        "points": "25 points",
        "children": [
          {
            "comment": "It will be just an another option for people with low budget to get something done.\n\nJust google \"Will WIX replace web-devs?\"",
            "points": "16 points",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "You haven‚Äôt seen my code, lol",
            "points": "2 points",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "There's a reason that there's a rules banning those questions.",
            "points": "1 point",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "Fun fact, customers don't care about code quality, as long as it works.\n\nFrom what I've seen with Devin, it's just a prototype. The demo videos were definitely cherry picked. I'd imagine it's fairly expensive to run, and for every successful demo they showed, there were 5+ times where it would run of course and never complete the task as explained.",
            "points": "0 points",
            "children": [
              {
                "comment": "they don't care about code quality until they want a small change and the entire code base is such a mess they get an 800 hour estimate to fix it. i've seen this happen.",
                "points": "11 points",
                "children": [
                  {
                    "comment": "Problem with all of these gotchas is how long will they remain true?\n\nThese systems are not going away and are only ever going to become more sophisticated. Particularly as the underlying technologies progress.\n\nI doubt sufficient sophistication will be beyond the end of my career.",
                    "points": "1 point",
                    "children": [
                      {
                        "comment": "Unless AGI is possible I don't believe AI will ever reach the point where it is 100% reliable, I mean machine learning models are punished during training when they do \"too well\" to make them more useful as general tools rather than solving problems only on the training data, so they inherently can't be perfect.\n\nQuality of training data could also fall considerably if people rely on AI instead of producing quality articles and inventing new ways of doing things, at least if we continue to train AI by web scraping.\n\nSome companies are also not exactly happy that their content is essentially being stolen and regurgitated through hallucinating AI, so we could see regulations that require compensation for that in the future which could slow down improvements.\n\nOf course things are going to improve, but we don't know at what rate, and personally I'm probably a bit more pessimistic about it than most. AI demo showcases are always extremely cherry picked at the moment, so AI isn't as good as many are lead to believe even if it is impressive.",
                        "points": "4 points",
                        "children": [
                          {
                            "comment": "If you look at something like the system that's now spitting out new protein shapes every couple of weeks, they trained it using synthesised data because enough known protein shapes simply don't exist.\n\nAll of this idea that AI will somehow eat itself is already bypassable.",
                            "points": "-2 points",
                            "children": [
                              {
                                "comment": "So you think AI will be able to automatically make new frameworks and libraries, or that it will somehow just become aware of them without having quality training data to pull from? Otherwise I'm not sure what you're trying to say with that. Your example is a completely different problem than what a software developer needs AI for. My argument is not AI doesn't have uses, if that's your conclusion from my comment I can't do much for you",
                                "points": "3 points",
                                "children": [],
                                "isDeleted": false
                              }
                            ],
                            "isDeleted": false
                          }
                        ],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "You're buying into the marketing. Just look at their website. It's a pile of shit. It tells you everything you need to know about them.",
        "points": "20 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "If your that worried then take up a physical trade like plumbing, because if AI manages to replace software engineers (which I don't believe it will, atleast not any time soon) then it's also bye bye to a ton of other professions, the only thing AI won't have devoured by that point will be physical jobs, builders, electricians etc\n\nUntil the whole smart humanoid¬†robot thing becomes reality atleast, then we'll be working for them, serving our new masters on earth.¬†\n\nChin up bud, the futures looking bright.",
        "points": "6 points",
        "children": [
          {
            "comment": "Those are already at risk over the medium-ish term. Human superior dexterity robotics are currently expected sometime next decade.",
            "points": "-8 points",
            "children": [
              {
                "comment": "Yeah, but it'll be a long time before they can work on electrical circuits following all safety regulations, or go onto a roof to assess damage and do repair works, or get into a tight space to get to a leaking pipe and fix it.¬†\n\nWe were told self driving cars would drive us around everywhere by 2020 and here we are in 2024 and they haven't taken off due to various problems, don't always believe the hype.",
                "points": "1 point",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Embrace the tools, don't fear them. I use AI every day now as a developer and architect. It's amazingly helpful.",
        "points": "9 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "not again...\n\nAI posts are the new JS framework posts.",
        "points": "8 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Devin is a proof of concept. It's not inconceivable that companies will roll out demoes that look promising for VCs to throw money at them.\n\nDid nobody here watch an Ubisoft demo before? Back in 2012 when ray tracing was a distant possibility, every company was rolling out gorgeous demos they'd eventually not deliver on, all because it could conceivably pass as an MVP.\n\nThis is nothing new. And when it comes to something as complex as literally mimicking a human brain (the more advanced between us, as well, because that's an efficient software engineer), I'm not sure I'm buying this half-baked \"demo\" from a company that didn't bother with a home page that doesn't look like it's from the 90s. Some people got a look at the preview and say it looks nothing like what was showcased before.\n\nBtw, Cognitive AI are hiring software engineers.",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I suspect it‚Äôll be a while before AI can fully replace engineers. On the order hand, I do believe that engineers who can effectively use AI to generate good code will replace engineers who can‚Äôt.",
        "points": "2 points",
        "children": [
          {
            "comment": "Yeah, it's almost like using a calculator.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "If you think an AI is going to replace you, might be time to find another job. You're already out of your depths.",
        "points": "2 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Mods please fucking ban AI topics all together. It's time.",
        "points": "4 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Stop it Devin",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "No matter what, it is coming eventually. Engineering salaries are so high, and the incentive to minimize spend in that area is simply too great for companies. I don't think that there is any reason to stress about it, though.\n\nOur jobs will change along with the tools we are afforded. More companies will develop more software because of this too, so there will definitely be more opportunities with these advancements eventually.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Just like every other post, no AI is not going to take our jobs. Like many other revolutions or technological progress, the efficiency will increase people their performance and act as aid/assistance. So yes maybe skill level will up a bit as required by more low level actions being possible by automation. But you will also be able to easier by the use of that AI. I have heard of DEVIN but didn't find much data yet. As far as I know Claude (the latest model(s)) are at the top of a 'single' agent AI or better said LLM. And it is quite good at certain things but if you have a degree or expert in a field you will outperform it. Not only now but will do so in the near future. We are currently also at the limit of at least local LLMs due to size/speed. The best/biggest models at about 70B+ do require a lot of VRAM (on GPUs) to work in an 'interactive' way. So bigger models will need to stay in the cloud on dedicated hardware to stay fast.\n\nDon't be afraid and just keep an eye on the progress while you keep developing yourself and doing your job. If you are learning or have learned well you will be fine.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "We are done pivot now!!!!!!",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "It is definitely a rough time to be a developer compared to just a couple of years ago. The market has changed and we have seen big layoffs at the larger companies.\n\nIt is important to understand that none of the layoffs we have seen has been dues to advancements in AI.\nThey are result of a economic downturn after a period of extreme over hiring in tech.\n\nThere is currently In my view, no reason to think that AI will take your job anytime soon! While ChatGPT is incredibly impressive it is no where near replacing a human programmer. Devin is just the latest hype in this area. It is important to understand that Congnitive labs (the company behind Devin) is not building a new LLM. They are simply using GPT4. They just built an algorithm that recursively prompts GPT. They have not really shown anything remarkable yet. All their demos could have been done in a fraction of the time by a human with copilot, and Devin is nowhere near able act as a fully autonomous engineer.\n\nBut things are changing. Learning how to code is easier than ever, and very soon it will not be enough to be guaranteed a job. We are already seeing this today with a lot of programming jobs being outsourced to countries with a cheaper labour force.\n\nSo the one thing you can do is to keep learning. Keep investing in your self. Learn new technologies. Learn to understand the current technologies you work with much deeper. Become an engineer instead of just a coder. Someone who understand that problem they are trying to solve. Why it has value to the end user, and to the business you work for. How a solution may impact other parts of the system you are working on.\n\nIf you learn how to solve problems for people then you will never be irrelevant.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "HOLY FUCK",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "‚ÄúWater needs no advertising.‚Äù\n\nThese posts and articles are probably written either by people who understand the industry from an adjacent headspace, or nothing at all.\n\nAI has some pretty crazy capabilities, I‚Äôve toyed with it to a small degree. I was impressed with what it could do, but never felt threatened.\n\nWhen it can revise the front end to make clients happy, and efficiently handle multiple API calls, connections and write all the logic in between them yeah, maybe. Even then, who is gonna be auditing the code for relatability and correctness? Not a salesperson I can say that much.\n\nLet‚Äôs say it does though, the core development and computer science concepts you‚Äôre indirectly picking up on by learning React/Node will translate to any of the other thousand flavors of computer science. Keep at it.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "AI isn‚Äôt a silver bullet. Currently at a start up that uses AI to ‚Äúrevolutionize‚Äù an industry and it isn‚Äôt happening and people aren‚Äôt buying it. Don‚Äôt think you have to worry about AI. You gotta worry about shitty management thinking they can replace devs and wrecking the market further.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "In the long term, no one really knows because we're not sure if this tech has hit a plateau yet. A lot of people in this sub will insist that it has hit a plateau, but that's pure speculation. It's clear enough that some level of innovation is still occurring. Claude Opus is a clear improvement compared to GPT 4, which itself was a clear improvement compared to GPT 3.5.\n\nNew models are going to come out soon. Will they be mind blowing or incremental improvements? By bet is the latter, but you start stacking these incremental improvements and eventually we're going to get to a point where, yes, you should be concerned about basically every white collar worker's job prospects.\n\nAll of this is speculation. Anyone who tells you anything with certainty one way or another is either selling you something or, on the pessimistic side of things, protecting their own ego because they've based their identity on their professions (something you should never do, btw).",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "As long as clients keep not being able to clearly and comprehensively outline their needs. Im pretty sure we will be safe.\n\nAI will increase dev producticity but not replace us. Granted - might lead to a cut in workforce if demand cant keep up with it.\n\nJust my 5am thoughts on a sleepless night. Might be wrongü§∑üèº‚Äç‚ôÇÔ∏è",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I do not currently work in projects related directly to webdev (more backend) but I must say that ai-code assistant are very helpful and there is currently absolutely definitely no way they could replace devs and humans driving the projects",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "‚ÄúBy the way, what do you recommend learning next in the tech field?‚Äù\n\nHow to find other jobs that aren‚Äôt in the tech field.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "To some of the commenters: Crazy how many people in this sub seem to underestimate the implications of LLMs and feel safe in their current jobs. Good for you.",
        "points": "-4 points",
        "children": [
          {
            "comment": "Crazy how many people have no idea about the capabilities of LLMs and overestimate their real world performance.\n\nIt's all a huge hype",
            "points": "4 points",
            "children": [
              {
                "comment": "Your opinion seems to be the more popular one on this subreddit for sure.",
                "points": "0 points",
                "children": [
                  {
                    "comment": "Given the current state and usability of AIs for software development and the aggressive marketing, it seems the opinion is not too far away. The more the average population and shilling media hypes a tech thing up, the more it is a overestimated garbage (just in general, AIs aren't garbage).\n\nNo doubt that AI fueled tools will stay and if done right sure improve development speed and the mental health of the devs. Copilot is great for offloading basic code writing. Sophisticated auto completion is a gift. But if you view the topic objectively, we are talking about productivitity increases of maybe 10-30%, which is great but won't render devs redundant.\n\nAnother positive effect is that developers are more seen as, well developers instead of code monkeys. There is a lot more to writing sofware than just generating code.",
                    "points": "0 points",
                    "children": [
                      {
                        "comment": "You made some good points! I also enjoy coding with the help of an AI copilot and have the feeling that many tasks become easier this way. I guess time will tell how much human work will be replaceable. I don‚Äôt think there will be technologies that will make software engineers obsolete, but I am afraid that the average software engineer will become so empowered through AI that the competition amongst humans becomes bigger and bigger, because the existing work can be managed by less humans compared to before.",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "[deleted]",
        "points": "-1 points",
        "children": [
          {
            "comment": "Written by ChatGPT",
            "points": "-1 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "No one knows the future.\n\nIn it's current form, even DEVIN is just a TOOL for you to use. Most execs, project managers, owners, and stakeholders don't really understand what AI can do. The worst thing you can do is resist change. Learn how to use some AI tools to accelerate your skills, like writing test code, asking it to optimize something, adding documentation to code, etc. It's your little buddy. It might replace us all in the future, but you will have to learn to adapt, like every other industry in the history of mankind.",
        "points": "-5 points",
        "children": [
          {
            "comment": "i have seen the argument of getting AI to write tests a fair bit, but i think that's probably one of the only things where you definitely shouldn't use AI.\n\nif the point of a test is to define expected behavior that's a job for the developer in my opinion, otherwise they don't have any value. if we're going to rely on this technology the least we can do is define how we expect it to function and have that part separated from potential AI hallucination and bugs.",
            "points": "2 points",
            "children": [
              {
                "comment": "Also, Copilot absolutely sucks at tests.\n\nThere are other LLMs that do a better job.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "The worst thing you can do is resist change.\n\nOh, I'm not so sure about that.\n\nThis is a soft disagree, a very, very soft disagree. You're absolutely right about using AI as a little buddy.\n\nMy point: Humanity has gone from memorizing epic poems to having the attention span of gnats. That's a change to be resisted.\n\nBefore the LLM's hit, about 3 years ago, I posted to the Gen-X subreddit the idea that \"If you use auto-complete, your voice is gone and it's the computer doing the thinking, even if it says what you think you were going to say, and be honest: have you ever just accepted the auto-complete even though you were going to say things slightly differently?\"\n\nI had good karma at that time in that sub and got absolutely buried in downvotes, but I don't think my concerns are unwarranted.\n\nI think it's really striking the mentats were demoted in the new Dune movies. The powers that be don't really want us thinking too hard about computers making decisions for us.\n\nReject modernity. Return to monke (in this case, vi/vim and a browser)",
            "points": "-1 points",
            "children": [
              {
                "comment": "not many people able to use vi/vim‚Äã",
                "points": "0 points",
                "children": [
                  {
                    "comment": "I take it you mean for jobs, and of course.\n\nI had a bad time at a job using R where the powers that be were into RStudio. I preferred using the Rgui (a command line interface) and Notepad++, and was treated as a Luddite.\n\nIt was bizarre because folks there knew how to use certain libraries, but were demonstrably ignorant of basic R (fun fact: the basic data unit in R is a vector):\n\n> lol <- \"abc\"\nlength(lol) \n[1] 1 \nstr(lol) \nchr \"abc\"\n\n\nDoes it matter that they didn't know that, or the difference between an R matrix and an R data frame? Probably not, we used data table anyway (data table is also fantastic).\n\nSo yeah, I know what you mean: Many people are required to use tools/paradigms required by the organization, for sure.",
                    "points": "0 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bh0ujs",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh0ujs/need_help_in_deploying_please/",
    "title": "Need Help in Deploying Please",
    "points": null,
    "comments": []
  },
  {
    "id": "t3_1bh0dwa",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bh0dwa/which_analytics_should_i_believe_in/",
    "title": "Which analytics should I believe in?",
    "points": null,
    "comments": [
      {
        "comment": "Sessions, users, and requests are all different data points. They cannot be compared.",
        "points": "21 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Requests (Vercel‚Äôs metric) will count every file or page served, so for a single page view likely anywhere from 5-50 (or even 100) requests. A single visitor who visits your site will load a certain number of pages on average so it stands to reason that your user visits (Google Analytics / Microsoft Clarity) is a small percentage of your overall request count. You should check the definition of each tool with the provider in question to be sure how they‚Äôre counted. Something misunderstood by many seems to be that Google Analytics and any other JavaScript based analytics will not see a chunk of traffic at all because many bots, crawlers and spiders won‚Äôt load JavaScript at all. Therefore missing what might sometimes be a significant amount of traffic (requests).",
        "points": "5 points",
        "children": [
          {
            "comment": "Also, AdBlock is a thing, and those also likely block analytics from being loaded and/or making requests if it's loaded through some means that aren't blocked.",
            "points": "4 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Be aware that Google Analytics (GA4) is currently undergoing spam attacks on the google tags. You may want to filter out all events from Poland as that is where the attacks are being routed through.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgzope",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "https://i.redd.it/afd6q8e9twoc1.jpeg",
    "title": "Help!",
    "points": null,
    "comments": [
      {
        "comment": "Do you have a node_modules folder?",
        "points": "0 points",
        "children": [
          {
            "comment": "Thanks but its now solved And yes I have but it should not upload in a git or any where",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "did you set the build command to \"npm i\" or \"npm install\"?",
        "points": "0 points",
        "children": [
          {
            "comment": "üòè",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "Bhai dono alag alag he ke! Thanks but its now solved",
            "points": "1 point",
            "children": [
              {
                "comment": "no, its the same thing.\n\nhow did you solve it tho?",
                "points": "0 points",
                "children": [
                  {
                    "comment": "Wo actually i have a client and server both in one dir thats why its a problem as i am using react and render only deploy a thing in a folder maybe i wrong but finally as it working by separating client and server code in different repo then deploying",
                    "points": "0 points",
                    "children": [],
                    "isDeleted": false
                  },
                  {
                    "comment": "Aur bhai There is no difference, since \"npm i\" is an alias for \"npm install\". They both do the exact same thing (install or update all the dependencies in your package-lock. Ye google ki taraf se hai",
                    "points": "0 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I experienced this issue before. Remove the module from package.json and reinstall it through npm.",
        "points": "0 points",
        "children": [
          {
            "comment": "Thanks but its now solved",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Are you using render for Server side code ? Or their frontend hosting service ?",
        "points": "-1 points",
        "children": [
          {
            "comment": "Thanks but its now solved Actually I am using for server",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgzn72",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgzn72/css_transitions_for_background_color/",
    "title": "CSS Transitions for background color",
    "points": null,
    "comments": [
      {
        "comment": "This is probably a quirk of css-in-js. You have to use camelCase for css prop names in css-in-js, so backgroundColor is correct as a prop name, but not as a prop value, that would still need to be background-color.\n\nTry changing:\n\ntransition: 'width 0.3s ease, backgroundColor 0.3s ease'\n\nto\n\ntransition: 'width 0.3s ease, background-color 0.3s ease'",
        "points": "0 points",
        "children": [
          {
            "comment": "That did it... You ser are a lifesaver",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgytir",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgytir/rest_api_design_filter_by_ids_or_by_names/",
    "title": "REST API design. Filter by IDs or by Names?",
    "points": null,
    "comments": [
      {
        "comment": "In my opinion, statuses should be word names. ID's (such as UUID's) should represent objects that must be unique. Objects like users, posts, messages, activities (logging), or any other type of permanent data that resides in the database.\n\nThis way, you can instantly understand the operating process both in the code and in testing by looking at the network call or logs, or code. Using UUID's helps ensure that people cannot iterate and know any particular object by guessing/hacking, as it were.",
        "points": "9 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "that depends...\n\nnaming = user friendly, you know exactly what you search for\n\nuuid = could be messy... don't really know what is what and could lead to gibberish\n\ngenerally it is better with naming, since it is more understandable, more of an issue is how you get the records via database\n\nalso, is it GET request to get records or POST?\n\nGET Request has limit of 2K chars which could be an issue if you have more filters along the way.",
        "points": "0 points",
        "children": [
          {
            "comment": "These days the limit is practically 8k, but yes, use names. Far easier to understand the meaning.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Unless you have a need to obfuscate your operation use names. Your database should use enums for the status field, which makes name lookups easy, efficient, and easier for future you to troubleshoot.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Your ids/pks could be english terms, and have an index on them. Ex: Active status (id: \"active\", name: \"Active\")",
        "points": "0 points",
        "children": [
          {
            "comment": "that's bad, id not as an integer, will cost more for search",
            "points": "-1 points",
            "children": [
              {
                "comment": "It's a ratio between performance and usability. There is only a finished number of statuses, pretty sure an index scan on an indexed string pk over 7 row is not that bad ;)",
                "points": "0 points",
                "children": [
                  {
                    "comment": "in most cases you don't save status in table as independant, usually you have like\n\nOrders table with status_id as column that is a foreign key to the statuses table...\n\nso it's not only 7 rows, and each row holds a set of bytes that multiplied by amount of records",
                    "points": "0 points",
                    "children": [
                      {
                        "comment": "Agreed, but the I still think that usability wins over performance here. I'm looking at a row, and just by looking at the fk value I know the status, and I don't need to join anything. At least thats how we work at my company, the performance difference is so small (even for millions entries tables) that we implement enum-like tables with char column as pk.",
                        "points": "0 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "IDs because that's what you'll probably use in your database - using strings inside a status column would be huge bloat.\n\nIdeally your API contract should specify the available status-values.",
        "points": "-1 points",
        "children": [
          {
            "comment": "You should be using enums for things like status, not ints or strings. Then use status name for lookup.",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "You should have a reference table of statues with their names and only link records based on ID between tables.\n\nThat way you don't have any update anomalies in your data or typos to work against on the backend.\n\nWhen sending the data to the client unless needed you can probably drop the ID along with any other data that the client doesn't need.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgyi91",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgyi91/php_or_js_for_a_social_media_site/",
    "title": "PHP or JS for a social media site?",
    "points": null,
    "comments": [
      {
        "comment": "The one you know the most.\n\nPremature optimization is the root of all evil. You wont see much difference at the languages level in most apps.\n\nThe scale at which language chosen had noticeable impact would be millions or tens of millions\n\nAnd let be honest here, if you have that kind of userbase, you are not asking this question here",
        "points": "27 points",
        "children": [
          {
            "comment": "Totally valid and insightful answer. By the time you scale up, you're already doing things at that level that you can dictate everything.",
            "points": "1 point",
            "children": [],
            "isDeleted": false
          },
          {
            "comment": "Disagree. If the goals are to \"use the resources effectively\" and not \"spend way too much\" ... PHP is not a good option. If your traffic goes up, as you will need to pay for more resources to scale compared to NodeJS.",
            "points": "0 points",
            "children": [
              {
                "comment": "People are spoiled by modern serverless solution that they forget that the cheapest VPS can serve thousands of Wordpress site. PHP inherently doesnt use memory at idle.\n\nPHP is THE least resource intensive language to build a webserver and the language with the most hosting options and cheapest hosting price out there.\n\nAnd if you want, PHP had asynchronous and multithreading runtime like OpenSwoole or ReactPHP. (Swoole is more performant than nodejs, you can test it if you want)\n\nOr, you can run PHP with native serverless solution with Bref",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          },
          {
            "comment": "Sure but if you know both languages I would opt out to node since you can do the same thing on php but node works better with real time data out of box which most likely you'll need.",
            "points": "-1 points",
            "children": [
              {
                "comment": "Node does not inherently \"better at realtime\", whatever you define that is. Anything that you can achieve in node can be achieved in PHP.\n\nAnd let's be honest, if you are doing anything serious, you would most likely opt for a third-party service, like Pusher.\n\nEven if you decide to self-host. The websocket server live in a different container than the application server anyway",
                "points": "2 points",
                "children": [
                  {
                    "comment": "Why are you repeating my words? I also said that both can achieve same results.\n\nSure but you talk about premature optimization and then about being serious... It's easier to work with real time data on node and that's a fact.",
                    "points": "0 points",
                    "children": [
                      {
                        "comment": "It's easier to work with real time data on node and that's a fact.\n\nWhat? How is it easier to work with real time data in node? In either case, your data delay is going to be limited by your database, not your language.",
                        "points": "-1 points",
                        "children": [],
                        "isDeleted": false
                      },
                      {
                        "comment": "why are you repeating my words?\n\nYou said node is inherently better at realtime data, i said it is not.",
                        "points": "-1 points",
                        "children": [],
                        "isDeleted": false
                      }
                    ],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Well, this is like asking: Which is better: beer or wine?\n\nSo: it depends on many thing, and it's also a matter of taste.",
        "points": "4 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "For backend it doesn‚Äôt really matter but for frontend a modern JavaScript framework like react or vue would give you that SPA feeling",
        "points": "1 point",
        "children": [
          {
            "comment": "I prefer using php for front-end, and JS for back end. /s",
            "points": "-1 points",
            "children": [
              {
                "comment": "You probably use Text Editor to write code and VSCode to write simple text files",
                "points": "0 points",
                "children": [
                  {
                    "comment": "I use Word for code, that way I can color code my blocks.",
                    "points": "0 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I would recommend using JS and building on the APIs of existing open source social networks like mastodon. This allows you to focus on the app and not on how the internals work. I already build a few small apps on top of mastodon and it's quite easy.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "There is no one that's better. Use what you can build the fastest with.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Others already posted that this is a matter of choice, or the language that you are more comfortable with.\n\nMy question is - what is your goal? If you want to have the site up ASAP, you can pick any open source project that does that job (could be even wordpress + plugins) and adapt it to your needs.\n\nIf you're doing it to learn about the code, pick the one you know best.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I'd say PHP but that's because I know it better but I'd say JS and PHP is pretty equal in this type of application. PHP could have a better performance in the long run but JS is easier to scale.\n\nFor a faster and more scalable backend I'd go with GO.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "The first version of Facebook was written in PHP...",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Doesn't really matter that much. It's probably going to be IO bound anyway. I personally hate both options. I'd try doing it in Go just because that's what I want to learn next.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "if its a niche social site, JS can handle a lot of connections than PHP.\n\nIn any case it depends on your requirements. PHP and JS both are scalable. I would advise to use whatever you know better.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "PHP",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Which is better a tank or a helicopter?\n\nThey do different jobs.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I personally find PHP one of the ugliest languages in existence.",
        "points": "-4 points",
        "children": [
          {
            "comment": "i thought so at first too, then i came to like it a bit somehow over the past half year lol",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgyfz5",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgyfz5/is_hostinger_a_good_site_to_register_my_domain/",
    "title": "Is hostinger a good site to register my domain with?",
    "points": null,
    "comments": [
      {
        "comment": "Check out Porkbun!",
        "points": "18 points",
        "children": [
          {
            "comment": "Can't go wrong with Porkbun. Top registrar along with Cloudflare.",
            "points": "7 points",
            "children": [
              {
                "comment": "oh aye, these are the only two i'd ever use. cloudflare first, then porkbun if cloudflare don't have the TLD i want (they only do the main ones, weirder niche ones i get through porkbun)",
                "points": "2 points",
                "children": [
                  {
                    "comment": "Yes exactly, Porkbun have all of the weirder niche and fun TLDs apart from the main ones. I use Porkbun for domain registration and Cloudflare for DNS and hosting. It's good to keep these separate and not put all of my eggs in the same basket.\n\nCloudflare didn't have DEV domains before and now do, but I have no reason to switch registrars since prices are very comparable (within the $1 range for renewals) and Porkbun do a lot of amazing first year deals. Very happy with them overall compared to Namecheap in the past who not only are a lot more expensive with renewals but also don't give SSL for free which should be a given today when the whole web is moving completely towards HTTPS.",
                    "points": "3 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I know a lot of people love hostinger. But i hate them from the bottom if my heart. They multiplied my time spent on a simple site by 10 times. Sadly it was wordpress with divi, constant caching issues, wp rocket wasnt usable (instant resource issues) etc. Just fuel for nightmares.\n\nOther then that, nice support, overall good vps, just ruined for me personally..",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "They're a great company, service. I personally use https://namecheap.com for my registrations/renewals and use Hostinger for hosting/vps. I don't like putting my eggs in one basket, as it were.",
        "points": "8 points",
        "children": [
          {
            "comment": "May I ask why? Is it risky to have hostinger for registration and hosting?",
            "points": "1 point",
            "children": [
              {
                "comment": "No, not risky per se. I just like using namecheap as they are slightly more established and based in the United States for registration purposes. Hard to negotiate with foreign companies over domain registration if things go south.",
                "points": "2 points",
                "children": [],
                "isDeleted": false
              },
              {
                "comment": "The rule of thumb: always separate registar and host.\n\nIdeal, industry standard, is:\n\n1. registar - namecheap, pokbun et\n2. DNS server - Cloudflare, etc\n3. host - hostinger, linode, digitalocean etc\n\nIt gives you freedom to change any of them, without any influence of the other two.\n\nWorst case is to have all three by the same company. You do not want to be caged.",
                "points": "2 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "I'm a huge Cloudflare fan.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Good company with good human support.",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "find the cheapest place to buy your domain, when the promo ends, just transfer it to cloudflare, they dont charge fees so you will pay only the original domain price",
        "points": "1 point",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "When it comes to domain names, I stay away from hosting companies.\n\nI would go with the most established registrars. As a domain investor, security and longevity is my top priority, but it‚Äôs a little different when you‚Äôre holding 6 figure domain names.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I use GoDaddy, Namecheap, AWS, Veerotech, and Hostinger for domains and hosting.\n\nI like all of them but my favourite is Hostinger and Veerotech. AWS is great but more setup is required.",
        "points": "-8 points",
        "children": [
          {
            "comment": "I use GoDaddy,\n\nWho hurt you?",
            "points": "10 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgxvrh",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgxvrh/i_created_a_vue_like_web_framework_using_my_own/",
    "title": "I created a Vue like Web Framework using my own programming language",
    "points": null,
    "comments": [
      {
        "comment": "Looks fun, personally I don't like \"attribute logic\" (I call it angular.js PTSD). But you sure went all in and made something new. Nice :)",
        "points": "8 points",
        "children": [
          {
            "comment": "Thank you!\n\nI haven't worked with Angular before, just Vue and React. What's the drawback of attribute binding and what's a better alternative?",
            "points": "0 points",
            "children": [
              {
                "comment": "Something like <div #nameDiv> is from angular as a way to make the element accessible and to reference the element in your JavaScript. this.nativeElement.nameDiv. or something like that. So, you aren't using things like document.querySelector(). It's been a couple years since I used angular so I might be slightly off on my syntax.",
                "points": "1 point",
                "children": [
                  {
                    "comment": "Ah yeah fair enough, it seemed like a good idea so not surprised it already exists in one of the large frameworks",
                    "points": "0 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "I, much prefer just JavaScript.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "impressive üëè",
        "points": "4 points",
        "children": [
          {
            "comment": "Thank you üôè",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgxvjm",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgxvjm/creating_a_web_dont_know_what_to_do_help_lol/",
    "title": "Creating a Web, don't know what to do, help lol",
    "points": null,
    "comments": [
      {
        "comment": "Pay someone who have any idea whats happening here.",
        "points": "26 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Why would you take on a project on that you don't know how to do? That's a disservice to your client.\n\nIf they want a website, without 3rd party branding and other limitations, they are going to likely have to pay a monthly or yearly subscription fee whether it's for a 3rd party service like Wix or for web hosting. I'm assuming that this client is a business; it's a cost of doing business in this century.",
        "points": "10 points",
        "children": [
          {
            "comment": "I didn't take on the job yet. They liked my aesthetics and design and asked if I could do a Web. I literally haven't replied to them yet cause I'm not sure I can. So I'm doing research and whatever to see if u can. If I can't I'll refuse obviously. I know it's a cost they have to pay but I'm sure they find that as a no no lol.",
            "points": "-1 points",
            "children": [
              {
                "comment": "Can I use ur designs when I make a website?",
                "points": "0 points",
                "children": [
                  {
                    "comment": "Huh? Sorry, not sure what u mean?",
                    "points": "-1 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "... just bail. This won't end well",
        "points": "3 points",
        "children": [
          {
            "comment": "Forget about this project, I just want to learn. Any tips will be helpful.",
            "points": "0 points",
            "children": [
              {
                "comment": "Do you know HTML, CSS, JavaScript? How basic are we starting here?\n\nA cool pretty design for a static web page I might be able to bang out very quickly, but if you're looking at any interactive or animated elements you may be getting in deeper than you want to go.",
                "points": "1 point",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Welcome to the complicated world of WebDev! :P\n\nIt's actually fairly straightforward:\n\nBasic: Vercel (Free Tier)\nDescription: Vercel offers a free hosting solution that's great for static sites and works seamlessly with Next.js and other front-end frameworks. You can deploy a landing page quickly with automatic HTTPS, global CDN, and more.\nPros: Easy deployment, automatic HTTPS, integrates well with modern frameworks.\nCons: Limited to hobby projects on the free tier, with usage limits that might require an upgrade as traffic grows.\nDIY Level: Low. Requires basic knowledge of deployment processes and Git.\nMid-Tier: Netlify (Pro Plan)\nDescription: Netlify offers a more robust solution for static and dynamic sites with its Pro plan. You get features like form handling, serverless functions, and more.\nPros: Easy to use, great for both static and dynamic sites, automatic HTTPS, continuous deployment from Git across all plans.\nCons: Costs can increase with additional features and higher traffic.\nDIY Level: Medium. Similar to Vercel but with more features that might require additional setup.\nCustom/Hard: Self-Hosting\nDescription: Use https://hostinger.com with either a Shared Hosting account, or a VPS for more contrl.\nPros: Full control over the server, scalability, and the ability to host multiple services.\nCons: Requires significant technical knowledge to set up and maintain, including handling server security, updates, and uptime monitoring.\nDIY Level: High. Requires in-depth knowledge of server management, domain configuration, and security.\nRecommendations:\nFor the Client: Given the simplicity of the requirement and the client's limited budget and technical knowledge, starting with a free tier option like Vercel is advisable. It offers an easy way to deploy and manage a landing page without upfront costs.\nDomain Purchase: You should discuss with the client whether they would like to have a custom domain. Purchasing a domain on behalf of the client is common, but they should be aware of the annual renewal fees. I recommend https://namecheap.com.\nHandover: Create detailed documentation on how they can manage the site and renew the domain. This ensures they are not left helpless when you hand over the project.\n\nThis strategy allows you to deliver the project within the client's budget while ensuring they have a professional and functional landing page.",
        "points": "3 points",
        "children": [
          {
            "comment": "Finally someone that is HLEPING!! Thank you!!! Okay okay, I'm getting you. What about if they don't want to purchase every month? They don't want to pay... Is there options for that? üò≠",
            "points": "-13 points",
            "children": [
              {
                "comment": "No, hosting is a monthly cost and that's what having a website entails. They will also have to renew their domain each year, unless u buy multiple years up front.",
                "points": "5 points",
                "children": [
                  {
                    "comment": "Thank you!",
                    "points": "-2 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              },
              {
                "comment": "Use Vercel. Again though, you get what you pay for. If this is going to be business oriented then it is a business expense. Period.",
                "points": "1 point",
                "children": [
                  {
                    "comment": "There are others than just Versel. Even GitHub pages would work in this case",
                    "points": "-1 points",
                    "children": [],
                    "isDeleted": false
                  }
                ],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Payment for things like hosting or at least the domain are basically inevitable. You can find free tiers for hosting, but the domain is going to probably be at least $12/year. Email probably also costs per month if the client wants email at the domain... recurring costs are unavoidable.\n\nAnd I recommend that you not take the job, especially for very little payment. Your client is wanting something outside of your skill set, and this is going to be far more work than you're expecting.\n\nHowever, if you must, use something like Wix... Don't try to figure out how to build it yourself. You'll only waste a bunch of time building something horrible and probably dangerous. And I actually hate Wix, but it's the better option here.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I don't feel like doing stuff from scratch if you rely on all the CSS capabilities of modern Browsers. Wix is for advanced controls, like guest books, appointment. A static page is best written in Visual Studio Code. You could start with a huge image from photoshop and then add the HTML you recognize. HTML export from word was pretty broken last time I checked. Also I find word more difficult than writing HTML.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "They/you have to buy a domain name, which is paid by year. This depends on the agreement you have with the client.\n\nThen there is hosting. Sounds like you will be fine with static pages, most of the platform allow for a free tier for websites like this.\n\nHowever, the biggest hurdle as I see for you is to turn your design into html/css. Again, this should have been discussed prior to work, who is responsible for creating the website and not just the design. If it is on you, you can learn simple web dev in a month or so, almost without touching JavaScript. Or you can find a plugin to Figma (or wherever you created the design) that turns it to code. The quality though is usually shit",
        "points": "0 points",
        "children": [
          {
            "comment": "which is paid by year.\n\nFTFY.\n\nAlthough payed exists (the reason why autocorrection didn't help you), it is only correct in:\n\nNautical context, when it means to paint a surface, or to cover with something like tar or resin in order to make it waterproof or corrosion-resistant. The deck is yet to be payed.\n\nPayed out when letting strings, cables or ropes out, by slacking them. The rope is payed out! You can pull now.\n\nUnfortunately, I was unable to find nautical or rope-related words in your comment.\n\nBeep, boop, I'm a bot",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Buy a template",
        "points": "-2 points",
        "children": [
          {
            "comment": "I know how to create the template and design it. But not sure how to make a domain and if I can not create a domain and they can use it as is. Its just a simple local business",
            "points": "-1 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "You can use No-code tools such as Webflow or FRAMER (my personal favorite). The UI of Framer is very similar to Figma, and you can use their plugin to easily copy your design from Figma to Framer.",
        "points": "-1 points",
        "children": [
          {
            "comment": "Just looking at framer (thanks so much for the recommendation) how do i give it to the client? Do they have to pay monthly? Thank u so much for ur help!!!",
            "points": "1 point",
            "children": [
              {
                "comment": "No. Actually, you can create a remix link (search Google on how to create one) and then you can send that remix link to the client, so the client can copy that website in his own account and publish the website.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Or you can leave the web dev part to me and after I'm done, you can deliver it to your client. Win-win.",
        "points": "-1 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "If you can achieve your design in Wix, I'd probably do that. It has a CMS so they can actually update their website without you if they are willing to touch a computer, I know some clients like this aren't. Don't try and overcomplicate this unless you are really interested in learning to be a coder I'd say. I had a designer friend who would design and then build wix sites, it's a reasonable service to offer, especially if the client needs no fancy functionality and it's essentially a marketing site.",
        "points": "-1 points",
        "children": [
          {
            "comment": "Exactly this. I've been trying to say this is what I need to achieve all day here on reddit but kept getting misunderstood as if I actually want to code. Thank u for this. So basically I create my design on whatever platform and then create it on wix and then send it off to the client right! . I know how to do all this process and its simple. I thought that this wasn't the way designers do it all the time so I asked here. Really many thanks and I'm so happy with ur help and clarification.",
            "points": "0 points",
            "children": [
              {
                "comment": "I mean, you are going to run into brick walls quickly, so be certain this is just a marketing site and nothing fancier. But a lot of coders are going to come at you with purist views about this stuff because it steps on their toes, you can kinda tell by the 0 upvotes even though what I'm saying is reasonable. Design is important, and time is precious, if someone pays a designer to make a really nice looking site and they then implement that in Wix, that seems like a fine service to offer to me, just don't make promises about anything super fancy. It'll just be a static site that acts as an online business card essentially, which is still a worthwhile thing for a lot of businesses to have.\n\nHowever, if I was to give my opinion, this whole thing sounds like the kind of job you take on as a favour and turns into a headache. There is no guarantee Wix works perfectly for your needs without me seeing an actual design, but I don't think using Wix in itself is some taboo. The issue is if you hit any sort of brick wall your going to end up spending hours researching solutions as it is your first time building a website, and you'll end up doing some weird hacks just to close the chapter I imagine.\n\nYou should be comfortable not being paid a lot of money and spending a lot of time on this if you commit to it. The only real reason to do that is if you wanted to keep offering this as a service and are willing to make a loss in order to build portfolio and improve your skills in building a Wix site.\n\nAlso, if you choose to offer Wix sites as a service you'll forever be dealing with small business clients, people are correct here that if you want any serious functionality you'll end up learning code and 99% of big client wants serious functionality, not just aesthetics.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Use Vercel best choice for a Nextjs app or netlify also good one.",
        "points": "-3 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgwjcx",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgwjcx/in_wordpress_which_type_of_theme_is_better_for/",
    "title": "In WordPress which type of theme is better for clients? Block themes or classic themes?",
    "points": null,
    "comments": [
      {
        "comment": "The whole FSE system is a convoluted, confusing mess that gives you very little control over many things that just about everyone wants control over.\n\nClassic themes for sure, and if your needs aren‚Äôt too crazy use a site builder theme like Bricks(more simple), or a plugin that disables themes like Breakdance(more powerful).",
        "points": "3 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Classic theme with ACF. Clients like to break things and block themes are just so easy to break, classic theme ACF is so simple and easy to work with on the dev side as well",
        "points": "5 points",
        "children": [
          {
            "comment": "This is the only answer imo",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Classic. Block themes are sluggish when rendering.",
        "points": "1 point",
        "children": [
          {
            "comment": "Really?",
            "points": "-2 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "Whatever best fits their site's use case. Don't pidgeon-hole yourself into always going one over the other.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "The block editor is not the easiest to work with. If your intent is to allow clients to use a theme builder themselves and edit their site, I‚Äôd recommend a theme builder like Beaver Builder, Elementor, or Bricks.",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "I would say block as it‚Äôs the future. Get them used to it. You can style around the block widgets and their built in CSS. ACF flex content is great but the future is to have everything embedded directly in the block editor.",
        "points": "-3 points",
        "children": [],
        "isDeleted": false
      }
    ]
  },
  {
    "id": "t3_1bgwjbo",
    "subreddit": "r/webdev",
    "dataType": "link",
    "dataUrl": "/r/webdev/comments/1bgwjbo/what_stack_to_use/",
    "title": "What stack to use?",
    "points": null,
    "comments": [
      {
        "comment": "Why would you have to use both databases? If you have to I'd choose to save playlists and songs because in a none relational database and then save artists, users ect in a relational database then relate those users with the playlists or songs they have in the relational database. Probably do mongodb and postgres or mysql.\n\nFor backend it doesn't really matter whatever language you like works, I'd do it in PHP or GO.\n\nFrontend I'd choose Vue but I think most people would say React or Svelte is better although I think it doesn't really matter. Then add in Tailwind for styling.",
        "points": "2 points",
        "children": [
          {
            "comment": "Why would you have to use both databases?\n\nProbably to demonstrate knowledge in both. Kind of weird, but I guess it's better than letting students pick the one they're already good at and then let the other dwindle",
            "points": "0 points",
            "children": [],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "The one with open jobs in your area",
        "points": "0 points",
        "children": [],
        "isDeleted": false
      },
      {
        "comment": "Use whatever front-end and back-end you know the best or what was taught in class, those doesn‚Äôt really matter until you hit scale or need long-term maintenance, neither of which are a concern for you.\n\nI would ask your professor if a multi-personality DB is allowed. If so, use Yugabyte, since it allows you to have both postgres and redis (but it saves to disk) in one program. It‚Äôs marked as deprecated but this is a school project, so that doesn‚Äôt really matter. Unreplicated should be fine for your demo. If that is not allowed, deploy postgres and redis separately and configure redis for persistence. Put the music binary blobs in REDIS and the keys for said files into postgres. Turn on the REDIS REST API and use that to get data out, but deny uploads without an API key. This allows you to simply point the browser at REDIS and use the native html5 multimedia for audio, and let the browser handle the hard parts. If you do anything other than point the browser at an mp3/oog/flac/whatever audio file and use the builtin controls, you will have a bad time.\n\nStore all data except for the music files in postgres, and you should do decently well and not have a hard time.",
        "points": "-1 points",
        "children": [
          {
            "comment": "Yeah since that project wont hit production use whatever. The .1s you will get in taking the exact good stack wont matter.\n\nIt wont matter for probably 90% of devs anyways.",
            "points": "0 points",
            "children": [
              {
                "comment": "I would love to live in a world where .1s was an amount of time I could toss away. That‚Äôs 10x the standard 99% latency target for my specialty, meaning 99% of requests answered in 10ms or less. Now, those only apply inside of a DC or DC cluster (cloud region) so it‚Äôs a little close to 40ms for full end to end, but that much wiggle room would be save me a lot of linux kernel documentation reading.",
                "points": "0 points",
                "children": [],
                "isDeleted": false
              }
            ],
            "isDeleted": false
          }
        ],
        "isDeleted": false
      },
      {
        "comment": "For development, Next.js + Tailwind + Jotai(state manage)\n\nFor hosting, Zeabur(full stack and database) or Vercel/Netlify(only static)\n\nDatabase: MongoDB",
        "points": "-3 points",
        "children": [],
        "isDeleted": false
      }
    ]
  }
]