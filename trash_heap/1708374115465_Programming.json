[{"text":["Empower Yourself with Advanced C# Concepts"],"points":0},{"text":["How Reddit Scaled to Millions of Decisions Per Second","Ok, but what we're really interested in is how the hell they made such an awful video player.","But how does that explain the decision to remove the \"subscribe\" option in the new website?Millions of decisions does not mean millions of good decisions.","Does this explain the enshitification process?","now they can sell your data even faster!"],"points":45},{"text":["Building a 2FA app that tells you when you get `012345`","checked","This is so stupid that I like it","The unique selling point of this totp app involves displaying 2FA codes as lock screen alerts at pseudorandom intervals. Sounds about right.","Genius.","This seems like the kind of thing that invites side-channel attacks...","What a pointless waste of energy..."],"points":40},{"text":["How to be a -10x Engineer","My CTO is epitome of ‚Äúhire bright engineers, kill them with useless tasks‚Äù.¬†hmmm arch is overly complex. Let‚Äôs add more if else loops. Instead of taking a step back and fixing things, keep piling tech debt.¬†be pedantic over trivial dashboards every 2nd day, when they are for visual inspection. Never look at alerts, though which are more important.¬†when if else programming fails, blame Engineers for not doing their job.¬†come with code piece and demand it be coded as is, instead of requirements. If you raise where are the requirements, threaten Engineers in a demeaning tone.¬†I hate this style of morons.¬†/rant over.","Change requirements as far into development as possible. To avoid blame, obfuscate requirements from the start.Cackling at this. You can feel the fury emanating off of these words like heat from a dumpster fire.","We call those managers","For 10x of pay. Not 10x less","I probably wouldn‚Äôt be exaggerating if I said a crap ton of managers of dev teams check most of those boxes.","Wouldn't it be a \"0.1x Engineer\"?","This was spread across reddit a little less than a year ago in what I think are subsets of this community. I think it would be good to have a reminder + never posted here as far as I can tell.","In my org we have a brilliant jerk. He‚Äôs forced everyone to use his bonkers custom BDD framework. Unit tests look like assembly code. Figuring out how they bind to dependencies requires days of stepping through code. Oh, and the thing you need to do? That isn‚Äôt supported yet but feel free to contribute.","TIL ‚Äú10x‚Äù is the new term for ‚ÄúRockstar‚Äù/‚ÄúFull Stack‚Äù/‚ÄúNinja‚Äù egineer","It's always about finding that unicorn individual. Like with the NBA; everyone talks about the great but they are wishing LeBron James joins.Or I mean, you have capable people and you just need those individuals to be more effective. Enter management -- the party responsible for root causing these inefficiencies. If they are just spewing this stuff and not actually doing actual root causing, what failures are being hidden?Tech is always talking about the optimization of some rarified air but few look at the general group and lift that group up even just a little.","Is there such a thing as a 10x manager? How do we measure their efficacy.","recompilation should take at least 20 secondsI dream of the days compilation only took 20 seconds.Regards, androiddev"],"points":244},{"text":["Setting up the new 16\" M3 Max MacBook Pro (16 CPU/40 GPU, 48GB) for programming - maybe someone could find it interesting"],"points":0},{"text":["Musings about \"On Call\""],"points":0},{"text":["TypeScript Kirby-like Platformer Game Tutorial"],"points":0},{"text":["Why aren't Identity Cookies saved and sent back to BackEnd for authentication and authorization?"],"points":0},{"text":["Tech Talks Weekly #4: all recently uploaded tech conference talks in one place","This is the #4 issue of Tech Talks Weekly, a newsletter I've recently started building. It provides all the recently uploaded talks across all tech conferences (+100 at the moment!).Your feedback is very welcome!"],"points":1},{"text":["Adding Keyboard Shortcuts to a 24 Year Old Government Website with Userscripts","that looks good","What about using Vimium? Does that not work?","Good info and will look into that ViolentMonkey. As a user, I created macros scripts with an app called hot-keyboard and it's always quite beneficial to have an alternative apps. I noticed your website had actual customer names and address, it maybe better to tweak names and address along with other customer identifying info."],"points":2},{"text":["[GOTO 2023 - Clare Sudbery] Continuous Integration: That‚Äôs Not What They Meant","When I hear \"run it on CI\" I do a facepalm... Do you mean I have to run it on daily commits and avoiding feature branches? Continuous Integration means exactly that. Deployment pipelines are for the builds."],"points":0},{"text":["Every Programming Language Ever Explained in 8 Minutes Part 2","lmao \"part 2\""],"points":0},{"text":["How To Center a Div","After 20 years, I still don't know."],"points":12},{"text":["Managing mutable data in Elixir with Rust"],"points":0},{"text":["How to Scrape a Website Using Python and BeautifulSoup"],"points":0},{"text":["Rye Grows With UV","Ok... i thought this was in the wrong sub but was curious on the agricultural techniques regarding growing rye with UV light.Turns out this is not about agriculture and is on the correct subreddit."],"points":2},{"text":["Union, intersection, difference, and more are coming to JavaScript Sets","It's good news of course, but... it's been nine years since this was supposed to happen.","üò§‚úã Using set operations to explain SQL joinsüòéüëâ Using SQL joins to explain set operations","As the person who championed this feature in TC39 most recently, let me comment on why it took so long:There's not really any methods in the standard library which take instances of a class as arguments, so we had to decide how that was going to work before we could add these. And that meant a lot of discussion needed to be had, which no one was driving forward until a few years ago. For example:If you pass a subclass of a Set with an overridden .has method as an argument to .intersection - baseSet.intersection(subclassInstance) - does that overridden method get called? Under what circumstances? Which exact methods get called?What about the reverse i.e. subclassInstance.intersection(baseSet)? Does that invoke the subclass instances's has method?Assuming at least some of the methods are actually invoked, which precise algorithms do we use for each of these things? The choice is observable because invoking user-defined methods is observable. Some choices have different performance characteristics than others, especially when one set is much larger or smaller than the other.What order does the resulting Set have? Remember that you can iterate over the items in a Set, so this is observable. My original choice for the result order for .intersection turned out to be impractical to implement in Safari given how their implementation works under the hood, so we had to come back to committee to choose a different one.Does invoking these methods on a subclass instance produce an instance of the subclass, or of the base Set type? If a subclass, how does that work? ES2015 introduced Symbol.species to customize instance creation, but Symbol.species has been responsible for more vulnerabilities than it has actually useful userland features, so there was not a lot of appetite for using it. Does that mean no customization at all?And, of course, Sets weren't added to the language at all until 2015. Much has been written elsewhere about why ES2015 took so long, so I won't say more there.Here's a rough timeline:1995 - 2015: Sets do not exist at all.2015: Sets are introduced, but given that ES2015 was already taking forever, these methods are omitted so they don't have to work out details like the above before shipping ES2015.2016 - 2017: No one is working on this; energy is mostly going into more foundational or frequently used things like async/await, shared memory, etc.2018: Sathya first introduces the proposal and it gets to stage 2 (basic shape is decided but details to be worked out).2019: He presents again and we discuss the subclassing issues in more detail.~2020: Sathya changes jobs and no one else has bandwidth to pick up the proposal.2021-2022: I get back to the proposal and over the course of several meetings work out all the details above in committee. Proposal gets stage 3.2023: Implementations and tests are underway. Safari ships in September. The person who had been contributing tests for the new methods doesn't have time to finish, and Chrome wants tests before shipping, so I come back and write the remaining tests.2024: Chrome ships. Firefox has finished their implementation and will presumably ship soon.Could this have been done sooner? Yes, of course. But no one had time to work through all the fiddly precedent-setting details until recently. As is usually the case, the fundamental answer is that things do not exist until someone does the work to make them exist, and people have other things going on.","30 years after the language was created. And people still argue that JS has an acceptable standard library.","Now the question, is this any more usable than the dozen library implementations? Or is JS fuzziness just give devs another footgun","yey finally!","Call me when I can define my own equality operator on a Set/Map.Because right now I always end up with a Map<Hash<K>, { key: K, value: V}>Since the key needs to be a value type I cannot use an array/object as the key. I need to make it into a key myself. So I need to keep the original value myself.","Having union/intersection without good value semantics is rather pointless. As long as new Set([[],[]]) , gives a set of size 2, these operations are not going to make much sense.Also, I don't think constructor methods should be on instances. union, intersection, difference, symmetricDifference are all operations that take two sets and build a new set. They are not things that a set can do on another set. So e.g. Set.union(s1, s2) would be clearer than s1.union(s2), despite the latter being closer to how you would read out one of the ways you could write out expression mathematically.","Welcome to 1970, javascript.The current state of the IT industry where clown languages rule sovereign and proper languages are second class citizens honestly makes me vomit.","Wonderful. More garbage in typeless language that just keeps piling on features.","Hard to believe that this was not part of the set api to start with."],"points":545},{"text":["Bloom Filter in Java using Google Guava"],"points":0},{"text":["How to Become a Great Software Developer ‚Äî Best Advice from Top-Notch Engineers","Curiosity - The number one trait of great developers in my opinion. promotes learning and exploration.Critical thinking - The ability to constantly question assumptions, your own and others.An obsession with delivering great experience to all stakeholders. This doesn't just mean delivering a great experience to the end users. This means delivering a great API experience to other developers, delivering beautiful code written to be understood by others, delivering great knowledge to the team on how the software was designed, built, and tested. It means adding value and enriching everyone's experience with your work, however it touches their lives."],"points":0},{"text":["Research API/DAPI marketplace"],"points":0},{"text":["Coding Challenge - Sora's Usage Analysis"],"points":0},{"text":["Go language hits top 10 in the Tiobe index","Bro, do not ever look at Tiobe index for information.","i wish r/programming banned tiobe-based links at last. their index is completely stupid, as evidenced by their results.","Tiobe index currently:Python 15.16%C 10.97%C++ 10.53%Java 8.88%C# 7.53%JavaScript 3.17%SQL 1.82%Go 1.73%Visual Basic 1.52%PHP 1.51%I'm so glad someone keeps an index to tell people that SQL is more popular than Go, totally comparable languages.","Tiobe is meaningless"],"points":206},{"text":["Nintendo streetpass"],"points":0},{"text":[".NET Aspire - Preview 3: Expanded Component Support with Azure OpenAI, MySQL, CosmosDB, Kafka, and More"],"points":0},{"text":["Spring Boot SSL Hot Reload on Kubernetes - Piotr's TechBlog"],"points":0},{"text":["Why the hex. numbers which represent the subsequent memory locations of 5 \"int\" type variables are increasing only by 4 knowing that each digit in hex. system represents only 4 bits so to go to the next memory location for an \"int\" (i. e. add 4 bytes) should not it increased by 8? why only by 4?","I don't exactly follow.Modern computers are byte-addressed, and an int is 4 bytes long. So if you have 2 adjacent integers in memory, the address of one will be 4 greater than the other.","Hex is just base 16 rather than base 10. The reason we use it is because base 10 digits don‚Äôt line up on a bit boundary. That is the number 9 is the binary number 1001b, while the number F in hex is 1111b.We could use octal (base 8) but that has 3 bits per byte (7 is 111b) so it does not line up as nicely. Don‚Äôt think about the size of the base, think of it as any other number system. So 0xFF is 11111111b or 8 bits, but 0xFFFFFFFF is 32 bits or an int on most modern computers.Yes there is probably a base 32 system, but it would use most of the letters of the alphabet and be confusing. Base 16 just adds A-F and is the shortest solution that aligns evenly on a bit boundary that still saves enough space.","Each hex \"digit\" is half a byte. An int is four bytes, so you move ahead by four bytes. You are correct that an int is eight hex \"digits\", but this is not relevant. Memory is addressed by the byte, not by the \"digit\". (Or if you insist on thinking about it in terms of \"digits\", then you need to work in base-256. Not base-16.)","Linket virker ikke (for mig).Sp√∏rgsm√•let er s√• uklart formuleret, at jeg ikke helt forst√•r hvad der sp√∏rges om.G√•r man fra en 32 bit into til en 64 bit long g√•r he repr√¶sentationen ganske rigtigt fra 8 til 16 tegn.","Whether the notation is hex or some other base, the locations of adjacent 4-byte wide values will always differ by 4. Or were you expecting an int to be 8 bytes wide? The size of built-in integer types depends on the language. Modern languages tend to bake this info right into the type name, e.g. u64, int32"],"points":27},{"text":["Instantiation and decleration in c++(non oop)","What exactly is your question? Chatgpt was correct.¬†You need to give a name to a part of ram before you can put something there.","Variable creation = declarationVariable creation with a value = initializationJust like how an object is an instance of a class. The compiled program will create an instance of that variable into RAM, that is instantiation."],"points":0},{"text":["Memory in C++ Why the hexadecimal numbers is increased by 4 only and we know that each digit represents only 4 bits (half byte) note 8 bits (one byte)?","Well thats only slightly more legible than your last post, this is the wrong sub for this question, but in what context is a hexadecimal number increasing by 4?","stop over thinking it. each memory address holds 1 byte of data, 8 bits, and nothing smaller. just because hex has two (2) characters in it to represent that number doesnt change the fact that it's still 8 bits and 1 byte in memory. it's just how we represent it in hex because hex is base 16. base 10 of 0xFF would be 255, but that doesnt mean it contains three 1/3rd bytes, its still one byte and 8 bitsints are architecture dependent, 32 or 64 bit. on a 32 bit machine ints are 32 bits. when you have a contiguous array of 32 bit ints they each take up 4 bytes (32 √∑ 8 = 4) so as you iterate through the array you move your address by 4 bytes each time, because each are 4 bytes","wtf?","Your question isn't clear, and those of us who don't have Twitter cannot see whatever it is that you linked to.edit - My attempt to make sense of your question, and answer it:Every hex byte is two nybbles for the same reason that every two-digit base-ten number is two digits.I'm not sure what you mean by \"increasing by four\". Are you talking about the pointer's memory address when storing a list of ints? This is because each int is four bytes. Each time you store an int you need to move the memory address forward by 4 bytes, otherwise you'll be overwriting part of the previous int. (I'm talking only about the int data type. There are other kinds of integers which are different lengths.) Analogy: Suppose we have several four-letter words: \"four\", \"your\", \"have\", \"that\", etc. If we want to stick each of them in memory (without any padding), we would start at address x+0, then we'd write \"four\", then we'd go to x+4 and write \"your\", then x+8 and write \"have\", and so on, such that we end up with the string of \"fouryourhavethat\". If we only increased by 1 each time, then what we'd end up with would be \"fyhthat\" which is not what we wanted.","Can people stop using Twitter? I don't want to login to view a post, wtf is this?","Because its 16 based and 24 is 16? Or maybe you asking why we dont use single character for each possible byte which would require 256 characters alphabet?","Because there‚Äôs only 26 letters in the alphabet. Google different bases in math‚Ä¶ base 2, 10, 16, 32, 64, etc. We don‚Äôt have a good way to represent base 256 without resorting to emoji or something which wouldn‚Äôt be fun. Plus, you‚Äôd have to remember what all 256 different symbols mean which would be exceedingly difficult for westerners.","One hex digit is a number between 0 and 15 (16-1)Two hex digits is a number between 0 and 255 (16 * 16 - 1)One byte is a number between 0 and 255","Because it‚Äôs base 16=24."],"points":45},{"text":["Designing A Data-Intensive Future ‚Ä¢ Martin Kleppmann & Jesse Anderson"],"points":0},{"text":["How to build an SDK from scratch","This article contains an advert for a paid product. In case that saves anybody else a click."],"points":4},{"text":["Oracle Autonomous Database adds AI conversation support","More technically:https://blogs.oracle.com/datawarehousing/post/now-is-the-time-to-innovate-with-ai-ml"],"points":1},{"text":["Go Concurrent Computations with Contexts"],"points":0},{"text":["Why it is Important to Create Personal Projects","I think doing the same thing 24/7 can become hard to do. Some of us just want to rest and do something else when they are off","i know that programming is some people's passion or hobby but once 5:30 hits i do not want to look at or read about code what so ever","At work I work in ... COBOL (sigh). Pays above average though.For personal projects I have used Smalltalks (Pharo, Dolphin, Cuis), Schemes (Racket, Chez, Chicken, LambdaNative, Guile, Gerbil), Free Pascal, D, Ada, Lua, Nim, OCaml, ReScript, Dart/Flutter, Go ...I have learned more from my own personal projects that from what I use at work. In fact stuff I learned in my personal projects greatly benefit my paying job."],"points":32},{"text":["The Golden Rule of Assertions","Seems like the useful thing would be how to tackle the \"non-relevant\" issues like server not being there and so I feel that the article stops right when it would actually be useful. All the things up to that is covered with \"don't test (assert) non-essential things\" but usually the usefulness is in giving ideas and examples on how to actually do that.","I think this also relates to why I don't find value in tests that expect(mockObject.mockFunction).toHaveBeenCalled(). That's an implementation detail, not an observable effect of the system.Instead, assertions should be on data. That's not to say don't mock ever, because you have to in some cases, but the mocks should return data which is processed by your code, and you assert on the result of what your code did with that data.","Main Points:The article \"The Golden Rule of Assertions\" emphasizes the importance of well-structured assertions in software testing. It introduces the concept that a test should fail only if the intended functionality of the system is not met. The author highlights common pitfalls in testing, such as focusing on implementation details or external factors like server responses, which can lead to unreliable tests. The article advocates for a testing approach that aligns with the core intention behind the system, ensuring that tests are meaningful and effectively capture essential functionality.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëç"],"points":23},{"text":["A small ml based programming language for the JVM"],"points":0},{"text":["A Star Path Finding Algorithm","Great jobüî•üî•. Must be hard to do path finding in 3D space."],"points":0},{"text":["Engineering With Java: Digest #10","Oh, Lombok. This is I don't want to find in project."],"points":0},{"text":["Give Feedback that Helps, not Hurts","The part about setting expectations that you can meet hits damn close to home.We have a problematic team. Management has, finally, after years of avoiding it, began dealing with the team. What they‚Äôre finding is that it‚Äôs incredibly frustrating and they‚Äôre so frustrated that they‚Äôre lashing out at others. I‚Äôve called them on it twice when they lashed out at me and both times they said ‚Äúit‚Äôs not personally, we are really frustrated with x team‚Äù. Part of the problem is they‚Äôre frustrated my team members are not taking part in certain ‚Äúcollaborative‚Äù meetings, but what my team members see is that unless you speak up in agreement they lash out at you so they stay silent.Also, for years, they have accused me of not working well with x team and continue to now. When I point out to them that they can‚Äôt work with x team they tell me I need to be able to even if they can‚Äôt and rapidly move on.It‚Äôs‚Ä¶frustrating. There‚Äôs no way for me to succeed. At this point I‚Äôm just having to say no when they ask me to get that team to do things because the team will get upset and then management will hold it against me."],"points":0},{"text":["A Plea for Lean Software","In some way, this is back in vogue. Performance is a feature and it wins like with ruff, ripgrep, alacritty. I feel the popularity of rust is a symptom of this.","Software's girth has surpassed its functionality, largely because hardware advances make this possibleSure, it was hardware advances which allowed us to keep the same software running on a single box from 1970s to the late 1990s. No one \"cared\" about elegance and efficiency because everything would be twice as fast without doing anything in 18 months anyways.But we're nearing the physical limits of how small a transitor can be. Now the strategy is to employ a variety of methods to scale computing, including iot, data centers, specialized accelerated hardware, horizontally distributed systems, further optimizing compilers and runtimes, etc.There's no return to simplicity or elegance coming. We're going the other way to make up for the lack of Moores law in a world that demands it.","I think no one can dispute that software today is more useful, easier to use and provides more value than software back in the day when this article was written (1995).The fact is people have more expectations from their software today and any other time and the industry is trying to figure out a way to deliver that to the people who are ultimately paying for it.We want more, we want it free, we want it available 24X7, we want it in our pockets and watches and cars and kitchens.","In many cases it's not the fault of application developers but a consequence of the \"evolution\" of libraries/frameworks, especially UI. For example a simple GUI app written today with a modern framework like WinUI 3 will work like shit even on new hardware while an old app written using something like WinForms will work better even on contemporary hardware. However if you look at the code of these apps you will discover that the newer app is just as simple and lean as an old one - it's the underlying framework that became slower by several orders of magnitude.","Or in other words, stop shipping the complete chromium web browser just to run a javascript web app.I blame the browser makers for unnecessarily ruining the ability to run javascript in html files saved on your own hard drive.","Summary:Niklaus Wirth's article, \"A Plea for Lean Software,\" criticizes the trend of increasingly complex and resource-intensive software, which doesn't correspond with improvements in functionality. He argues that this bloated software is a result of hardware advancements allowing developers to be less disciplined in software design. Wirth contrasts modern software's inefficiency with the lean and efficient software of the past. He emphasizes the importance of disciplined methodologies, returning to basics, and focusing on essential features over superfluous ones. The article also explores the causes of this software bloat, including industry practices prioritizing feature quantity over quality, and the tendency to incorporate every conceivable feature into a single monolithic design. Wirth concludes by advocating for a more systematic approach to software development, highlighting the benefits of simplicity, efficiency, and user-centric design.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëç","Momentum of poor decisionsContinuing to make poor decisionsTrusting people that make poor decisions"],"points":173},{"text":["Weekly Digest #3 : Rails 8 introduces a built-in rate limiting API","Using Rails is already rate-limiting"],"points":4},{"text":["Java Multi-Threading in Action: Implementing a Bingo Game"],"points":0},{"text":["How to Over Engineer a Todo App (The Zenith Gradient Algorithm)"],"points":0}]