[{"text":["The Mechanics of Async Await"],"points":0},{"text":["The pitfall of implicit returns"],"points":0},{"text":["Start With a Minimum Viable System"],"points":0},{"text":["Brain Tumor Classification using Deep learning"],"points":0},{"text":["Simplifying as much as possible is the way to go in the engineering industry"],"points":0},{"text":["AI App Development Guide 2024: Trends & Ethics - Web & App Development Blog | Ayelite Technologies"],"points":0},{"text":["Spring Data JPA: Query Derivation Explained!"],"points":0},{"text":["How Figma runs Engineering Crits"],"points":0},{"text":["Popular Git Config Options","git config --global core.fsmonitor truewas not mentioned in the article so hereNow your cli themer's git status plugin wont lag.","If you want a TL;DR:The post explores various Git configuration options that enhance user experience, highlighting settings for aliases, improving command outputs, and personalizing the workflow. It emphasizes the importance of customizing the Git environment to suit individual needs, such as setting up shortcuts for common commands, configuring the default branch name for new repositories, and adjusting the merge behavior. Additionally, the article provides insights into less-known config options that can significantly improve efficiency and comfort when working with Git repositories.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":43},{"text":["Paying Maintainers is Good","This article perfectly encapsulates the issue I have with this entire debate: the headline I agree with, however the \"solution\" involves destroying the value that open source brings to our communities at large.To be clear: I understand that this is the real world, and people have to eat. I understand that it is not sustainable to do work for free while others reap the benefits. But anytime someone locks up their product for the sake of that, this is not something worth celebrating, this is an admission that the vision of open source has pretty much failed, and calling whatever this is open source is either maintainers lying to themselves or to us and avoid pushback.I don't think people appreciate the value that open source brings outside of massive corporations. A lot of what I learned about real world software development is from reading those open source codebases. The only reason I was able to do this is that the code was just there, I was able to look at it, learn from it, play with it and use it however I wanted to. These are incredibly valuable resources especially to people in developing nations where political instability constantly threatens access to these resources if they're locked up behind restrictive licensing.Again, I do not judge people for taking the paycheck. But stop asking me to celebrate the death of the resources that helped me so much when I was learning, and the lack of access to those materials for future generations.","In other words:The post argues for the financial support of open source maintainers, highlighting the discrepancy between the value generated by open source projects and the lack of compensation for those who maintain them. It discusses the challenges maintainers face, including burnout and the potential for project abandonment, which could negatively impact the broader tech ecosystem. The author proposes various funding models, such as direct sponsorships, grants, and corporate backing, to ensure maintainers are compensated for their contributions. Additionally, the post examines the benefits of financially supporting maintainers, including increased project sustainability, improved software quality, and a more vibrant open source community.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":3},{"text":["De4py Python RE Toolkit: v1.0.8 has been released"],"points":0},{"text":["Leetcode 1672. Richest Customer Wealth"],"points":0},{"text":["The High-Risk Refactoring","Imo, refactoring is part of all changes to minimize the overall system complexity,¬† so that the system is maintainable.¬†In areas where refactoring is avoided,¬† the system will become more more difficult to maintain.¬† This is even more of a problem for high risk code, as the complexity will lead to higher chances of production issues going forward, and avoid improvements to areas that may be more advantageous to the business.¬†It's certainly worth being more careful in such areas, and find ways to minimize risk: good tests,¬† thorough QA, feature flags,¬† etc., but never avoid refactoring to lower system complexity.","Stop making in-place changes when you have high risk, both in likelihood of event and in severity of impact.Refactor in parallel and feature flag the code path.","I have definitely seen a few big refactorings cause new problems. A refactoring is a long term investment. There may be some errors due to the refactoring, that you will hopefully deal with, or should be small. However you should end up with something that is easier to maintain and extend over time.I definitely enjoy smaller refactorings, where you solve a here and now bug, and simplify the logic at the same time. I am a bit averse to big refactorings, the extreme cases is where we replace/exchange an entire system or pattern with something new. Something new that the entire team needs to understand and have experience with, to work properly. It could be something like changing your templating language, going from jquery to something modern, changing the simple search to elasticsearch, etc. Something where you don't want to use 2 systems at the same time. In other words, it is just often underestimated how long it takes, how many problems we are risking, and overestimating how much value it gives the business compared to working on other areas. Often it is something that is simple/modern/attractive to a few people in a team, where the rest thinks it is complex, that is a sign it is not a good idea.","You haven't lived until you've replaced libc dependency in >10kloc project.","Condensed version:The post discusses the inherent risks and strategies associated with high-risk code refactoring. It highlights the potential negative impacts on business, team trust, and feature development when refactoring is done improperly. The article offers a checklist for addressing risks, emphasizing the need for defining constraints, isolating improvements, writing extensive tests, and having visual confirmation to mitigate the risks. It advises against skipping tests, relying too much on code reviews, and mixing significant cleanups with other changes. The importance of evaluating the risk and proving the system works before and after refactoring is stressed, alongside practical examples illustrating the challenges and considerations in refactoring coupled with feature development.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":77},{"text":["‚ÄúBlazingly Fast‚Äù Web Services with Zig Lang using the Zap Library","Additionally, Zig offers compile-time memory safetyWait, since when.Zig is certainly simple, and certainly compiles to fast code, but last I checked it wasn't safe. Instead, there were the possibility to compile with run-time checks to enhance safety, though even that wasn't foolproof.The very Zig website mentions Runtime Safety Checks in the ReleaseSafe profile, and no check in ReleaseFast nor ReleaseSmall.","Shame that theres no Windows support.","\"Blazingly fast\" with no performance numbers?","Why would you ever use something built in C for an http server. Does not inspire confidence."],"points":22},{"text":["Parsing URLs in Python"],"points":0},{"text":["Migrating to isolated worker Azure Functions (2024)"],"points":0},{"text":["Java 21 - Is Kotlin Dying?","Short answer: Kotlin is not gonna die.Long answer: Sure Java is a bit farther in respect to pattern matching (guard clause, record pattern), string template (full-blown lazy interpolation and more), virtual thread (stackful coroutine), please note that not only Java does evolve. There will be many more language improvement in Kotlin in the near future after Kotlin 2.0 releases (which is likely to be this May), and Java will never catch up with more elegant solution due to backward compatibility. Extension function, top level function (Java will stick to class contained static method forever despite unnamed main class is a thing), parameter default value, inline function with lambda (much lower overhead), operator overloading (controversial but it's almost always from Java people). These are just function related features which none of them is even considered from Java designers.","A couple of comments:It feels like there's a real self-fulfilling prophecy in the Java community about not adapting Kotlin because Java will eventually \"catch up\" with functionality, hence Kotlin not picking up critical mass to make it a much more widely-adapted language. That it's still viewed as \"just an Android language\" is especially frustrating given that Kotlin's been a first-class citizen in Spring Boot, JUnit, and Gradle for years now.Kotlin not producing many new visible features for the JVM language for the past few years is not helping in that aspect. The play has been to bet heavily on the multi-platform aspect and the new compiler that will come with Kotlin v2.0; we'll see if that pays off.","Is there a way to filter this subreddit to only receive posts that adds value?","The examples mentioned failed to convince me, even though Java is improving it‚Äôs still far from Kotlin in terms of verbosity and expressiveness.In all of these examples I still prefer the Kotlin version.","Everyday the same nonsense. Neither will java or Kotlin disappear in the coming years. Yes, java catched up on some features. But as often java doing it halfed assed due the backward compatibility and limitations on language level as well as under the hood. Kotlin isn't neither perfect. It have its own flaws in tooling and isn't in par with the size of its native Kotlin eco system. However, I as a long term java developer enjoy Kotlin more as well as the colleagues that I convinced to give Kotlin a real chance. There are still countless people out there that look down on Kotlin for only the wrong and superficial reasons.","Kotlin is an awesome programming language that mostly lives in the Android app space. And this is partially for legal reasons - see the whole Oracle <-> Google lawsuit about Java. Also, some bits of Kotlin are probably very hard to replicate, like its focus on immutability, or its pervasive type inference. Kotlin code is noticeably less \"noisy\" than Java code. Even in the shown example, there's Point simplePoint = new Point(1, 2); , which in Kotlin would be val simplePoint = Point(1, 2).Also, I just noticed that Java still lacks string interpolation üòê","I wonder what prompt was used to make that image, looks like network beasts are emerging from their corporate cocoons to destroy the city. I guess it was ‚Äúvirtual threads‚Äù?","gotta love these \"eyes opening\" articles :D a few days back i saw a similarly named one \"kotlin, is java dying?\"","No language every really dies -- people are out there that are still using APL, Fortran and Cobol. They just decrease in usage numbers. That said, much of Kotlin's push came from Google. If Google were, and I'm not saying they are, supporting Rust or Swift as their new target, that would be what everyone ran to.People use languages to work with a platform, not to promote the language itslef.","Kotlin is a much nicer language but I fear it moved too fast and is now a bit stuck.. no significant features were added for some time and the compiler is still slow as hell. Java is slowly copying Kotlin's best features, avoiding its bad choices, and all without compromising the Java compiler performance... Given a choice I'd still pick Kotlin on the backend, but sometimes I don't have that choice and honestly, Java 21 ain't half bad & future releases are looking quite good. Kotlin has become a bit boring .. and while boring is not necessarily bad, I'd welcome some Kotlin excitement üòÅ","Kotlin only matters on Android, because Google says so, and for a long time has stagnate Java on purpose.It is no accident that most of their samples selling Kotlin to Android devs use Java 8, instead of something more modern where Kotlin wouldn't be as relevant.Yet they were forced to backtrack on that, as otherwise Android would lose access to Java libraries moving into more recent versions.Hence why since Android 12, ART is updatable via Play Store and is currently set to Java 17 LTS. I expect Android 15 to update it to Java 21 LTS.Anyone mentioning Oracle's lawsuit as motivation for Kotlin usually overlooks that without JVM, Maven Central, InteliJ, Gradle, all from Java ecosystem, there is no Kotlin.","Looks like Java just basically copies C# these days, except for project loom which is more like goroutines.","lol new java syntax is so horrible it will never match kotlin","No","No, mobile phone programming is dying"],"points":99},{"text":["Velocity Theater Produces Awful Meals","I recently got told that I hadn't created enough PRs last month, so I definitely feel this metaphor."],"points":0},{"text":["Passkeys ‚Äì Under The Hood","\"PIN code\"Personal identification number code.'With passkeys, the private key is decrypted and stored in memory at some point and thus maybe accessible by an attacker with access to the machine. This change of threat model needs to be known and chosen accordingly to the requirements of the user.'It may be stored in memory. The ideal is that your device has a secure element in it. This works like the USB key and decodes and employs the private key within its own memory. Memory that is not accessible even to a hacked main OS. However, we would like to hope the user knows whether they have a secure element or not. Apple tries to make it plain. But the server cannot enforce this. The server cannot be sure what steps the client took to store and employ the private key. In the case of a secure element or USB hardware key the client main OS can't even be sure what steps the secure element or USB hardware key took to store and employ the private key.The statement at the end:'We noticed that the threat model has changed between hardware security keys and passkeys since at some point the user private key is present in the user‚Äôs system for passkeys.'Is thus perhaps a little bit confusing. If you have a secure element then is is part of your system. But also a USB hardware security then should be considered part of your system. It is connected to the main CPU while in use and so there is no reason to think it is easier or harder to get it to break its own laws of computing and divulge your private key.In short, if you don't have a secure element or hardware key (and know it) then you know that your private key makes its way into memory and can be accessed. If you have a secure element/hardware key then you can't really be sure that your private key doesn't make its way into memory and can be accessed. It's not supposed to. But hardware security is to a large extent about \"I want to make this completely impossible for software to do and hacking is to a large extent about \"what if I can make it happen even though it isn't supposed to\" andNow that being said, since Apple and Google puts your keys in your cloud account how do they involve the secure element in a way that keeps the passkey private key out of main memory? I don't know. Does anyone else know?"],"points":0},{"text":["The single-tenancy to multi-tenancy spectrum","In Short:The post explores the transition from a single-tenancy to a multi-tenancy architecture, using the example of the Event-Broker e-Commerce platform. It discusses the simplicity and small blast radius advantages of single-tenancy, alongside its scalability limits. The article highlights the constraints encountered with single-tenancy, such as AWS resource and concurrency limits, and presents multi-tenancy as a solution for unbounded scale despite its increased complexity and potential for larger blast radiuses. It concludes that the choice between single and multi-tenancy depends on specific application needs and business contexts.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments","That's a lot of words describing how the author put everything into a single account, something against AWS best practice since I started using it 10 years ago.I understand a lean business wants to avoid NAT gateway stamp costs as they scale out, but for most people reading this single-tenancy doesn't actually need to mean 1 account... shared infrastructure and databases benefit tremendously from isolation no matter how many tenants might use it."],"points":6},{"text":["Driving 1:1 with your manager","I've done the big company thing, and been involved in the growth culture at both ends as a manager and as being managed.I like the idea that engineers should grown and become every more useful and employable, pick up new skills and so on. But the growth culture is somehow corrupted in ways I can't exactly put my finger on.There's definitely some sort of thing where if you're a level 4 engineer, you need to start working on L5 things to prove you're a L5 and growing into that role. What's L5, well, no matter the amount of documentation, L{N+1} compares to L{N} by always working on \"bigger\" things somehow and having \"more stakeholders\", and of course everyone's favourite, \"scope\".It's never really picking up a new skill. An L{N} who becomes an expert also in CMake is now an L{N} who has to do all the soul crushing build system work as payment for fixing a nasty problem.The way it's measured, there is always a tension between \"growth\" and gettin' shit done. And in order for people to grow there's always a tension to avoid the important day to day work to look at bigger things, with more scope (which means more meetings!!). I was always meant to have regular growth conversations, but the thing is shit needs to get done, so I had the dual tensions of being told I needed to get X project delivered and \"growth\" which somehow involved my people doing less of the actual work for X. Bonus points for taking an engineer you've hired for a really deep expertise on a niche, highly technical topic and making them do more \"product\" because execs believe that product managers and project managers are a waste of money when engineers can just figure that out in their spare time.Of course that's \"growth\" because it involves more meetings with \"stakeholders\".","I usually start the meeting with a personal conversation. Then we talk about any blockers or issues they are discovering as they work on tickets. Then we close on updates on their goals and if they need any help. Occasionally, we might have to talk about a topic that doesn‚Äôt fall into that flow and so we add that stuff to the 1on1 discussion points list.","I had an engineer that just wouldn‚Äôt talk,what you get up to last week? Nothingany plans? NopeOk, what‚Äôs happened this week? What have you been working on? Not much, just requirements and ticketsI could get him to talk about gaming, i‚Äôm not a gamer it was pretty much all he did. Each and every fucking week.Good coder, shit at comms, I was literally reading his commits to figure if he was good or not"],"points":22},{"text":["The Return of the Frame Pointers","When I last taught \"Systems Programming\" (which includes how to read, interpret, and even reverse-engineer machine code that is probably the output of a compiler), I entirely ignored the issue of frame pointers and just presented %rbp (since we were dealing with x86-64) as a general-purpose register, perhaps with a historical note. But, if I ever teach the course again, I might reconsider that.Edit: If I taught Compilers or Programming Languages, I would definitely point out the uses of frame pointers, but also how they can be avoided if you don't care too much about debugging or profiling; and how debugging symbols can partially eliminate the need in many of those cases; and how those debugging symbols might not quite be enough in all situations.Edit2: Admittedly, I did teach a Compilers course recently, but I had my students target LLVM rather than any specific ISA (I couldn't assume they had experience with any specific architecture), so the topic didn't arise.","The ORC stuff is interesting but on a small system, like a microcontroller you can't afford to keep any tables around at all. There's just no space. So if you are to create a crash backtrace you need to be able to do it with no support tables.There are a couple ways to do it. My favorite honestly is to bring back the frame pointer and eliminate the stack pointer. Everyone knows that the frame pointer is redundant because there is a fixed relationship between the BP and SP that the compiler knows when generating code. So every BP-relative reference it creates could be SP-relative instead. Which is the reason justification everyone uses when omitting the FP.But it works in reverse too. Couldn't you eliminate the SP and just do everything FP relative? The answer is yes. This is what PowerPC did. Just use the FP for everything. The only real trick is that at function entry and exit you may need to save a few registers before you've created a FP. And that means saving data below the current FP. To work around this PowerPC just declared this legal and created a \"red zone\" below the FP where it is legal to save a little bit of data. Any interrupt taken would have to thus bump down the FP before using space in the stack, just in case there was data in that red zone. But called functions don't have to do that (other than their normal frame making) because it is illegal for a function to call another function without creating a new stack frame first and thus ceasing to use the red zone. Once they did this they also made it legal for leaf functions (that never make a stack frame) to just use the red zone for all its stack space needs.Once you do all that, you end up with a fully workable frame pointer only system which retains the feature of a frame pointer which is that it the FP points to a linked list of function stack frames. FP is the first one, *FP is the 2nd, **FP is the third, etc.Another way that worked no a project I was on was to just use a SP, no FP. And to realize that when you look at the valued pointed to by SP there will be a PC (return address) next to it. And then you also notice that the compiler uses a similar function prologue to make each frame. So if you look at the SP, find the PC and then look at a fixed offset from the PC you will find the instructions that ran to create the stack frame. You then can pick out the stack frame size from that code (essentially find the immediate subtract value) and use that to walk back up the stack and find the saved registers and the previous stack frame. It's not perfect but it can be made to work, at least on the architecture we used.RISC-V seems to omit fp by default so there are surely a few people investigating ideas like the one above. I don't know the progress of those efforts.","Stack pointers should never have been made optional in the Sys V AMD64 ABI. I'm glad they're coming back to Linux.","Debugging data can make up a significant amount of space. The biggest offender for this is Go, which dumps basically the entire source code into their own table. That table is apparently also needed for their GC, so it can't be removed either.¬†On a few Go apps I'm using this table makes up 50-60% of the final executable. I'm talking 20MB of executable and 10MB of that is just that one table. Or 50MB of executable and 35MB that one table.¬†This doesn't matter that much per application, but when you think about a typical OS installation and think it takes ~4GB (or w/e) of disk space, and then it'll take 8GB, then that's already a significant increase.¬†I would still like meaningful stack unwinding, but I don't really know why 1) these tables aren't compressed and 2) why there's not more focus on better ways (like DWARF or .NET symbol packages) instead of function/frame pointers dumped into the exe. I've actually picked up running find / \"*.so -exec strip -a because it can make a pretty meaningful difference when you need it.","[deleted]"],"points":68},{"text":["Parsing URLs in Python"],"points":0},{"text":["Open source is not insecure","It has nothing to be insecure about","Dumb title for a reasonable article. No one thinks OSS is insecure and no one has since 2011 or so. But the article does highlight the huge vulnerability of OSS which is package management systems and the inplicit trust we give them despite them not having great security models.3/5 acceptable article.","I have a customer arguing with me over security because someone might use a USB stick to copy data off a computer, meanwhile dude has flashed the companies root and intermediate CA, their github admin token, and their Okta password in a single meeting, while not using a password manager. As long as people like this exist, security measures don't matter. This is a well known technology company too.","‚Äú97% of all software is open source‚ÄùThis seems unlikely (but what do I know?). I clicked on the link and found that actual claim is that 97% of the worlds software uses open source - a very different claim (and still suspiciously high, but again, what do I actually know). A more interesting statistic would be the proportion of lines written which are open source, or even better, the proportion of lines executed. Not sure we‚Äôll be seeing numbers for these anytime soon.","I'm getting a lot of questions already addressed by my \"open source is not buggy and insecure\" T-shirt","I‚Äôm not disagreeing with the article, probably agreeing really but I can‚Äôt release my software if it has CVEs in the OSS it uses, and I get CVEs at least once very month. This is problematic. It means that I have to be very choosy about which libraries are included."],"points":42},{"text":["Feds seek attestation on secure software"],"points":0},{"text":["Engineering With Java: Digest #13"],"points":0},{"text":["JavaScript Algorithms and Data Structures Masterclass"],"points":0},{"text":["JavaScript 20 Projects In 20 Days HTML, CSS & JavaScript"],"points":0},{"text":["Finding a New Software Developer Job","If you want a summary:The post describes the author's experience of being laid off and the ensuing job search in the software development field. Initially caught off guard, the author engaged with 30 companies, faced rejections, and eventually received offers from three. The journey highlights the importance of preparedness, utilizing LinkedIn and other job search platforms effectively, and the rigorous process of applications, interviews, and negotiations. The author shares insights on navigating layoffs, leveraging connections, and the significance of continuous learning and adaptability in securing a new role. The experience culminated in securing a satisfactory position with Swissblock, underscoring resilience and strategic job hunting in a competitive market.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments","Man this sub fucking sucks now with all the AI generated posts and content sharing. What a joke."],"points":11},{"text":["AutoDev: Automated AI-Driven Development by Microsoft"],"points":0},{"text":["YAMLScript ‚Äî Program in YAML","Hell is empty and all its demons are here","No","Thanks for the helpful tag at the start of the file ... I have added some logic to our Pull Requests to auto-reject anything that comes in using it.","I've been complaining that I was a yaml dev recently, with all our kubernetes config. Now, instead of building config to tell code how to run declaratively, I can code in my config lang, while using config at the same time!","Feels like jinja templates with extra steps. Jinja can do what this does and more with yaml plus also with: xml, json, etc. I don‚Äôt know why I‚Äôd use yamlscript. Seems like a framework with too much risk.","Can functions have more than one line?How do functions with multiple lines calling the same function work?","Shoot me.","Fuck YAML, and fuck HomeAssistant for deciding that was their best choice for config and scripting.","Thanks, I hate it.","Welp, that seems hellish.","It claims ‚ÄúYAMLScript is also a new, complete, full featured, general purpose, functional and dynamic programming language whose syntax is encoded in YAML. YAMLScript can be used for writing new software applications and libraries.‚Äù But everything else seems to indicate it exists to emit json or yaml - by default to stdout. If it was full featured I‚Äôd expect to be able to make a simple webapp with it, or maybe see a for-loop example in the home page","Oh I dunno, I kinda like the idea of generating yamlscript from another language.","Jurassic park, Jeff Goldblum... Something about being so caught up thinking about if we could nobody stopped to think if we should.","I mainly wonder if it has any sort of similarity with what \"XSL is to XML\" or they are doing their own thing.Run or Load?YAMLScript programs can either be \"run\" or \"loaded\". When a YAMLScript program is run, it is executed as a normal program. When a YAMLScript program is loaded, it evaluates to a JSON-model data structure.Also, a bit weird they are using a JSON-model data structure rather than a YAML structure when evaluating a YAMLScript","My eyes are bleeding."],"points":157},{"text":["Understanding AWS Config Costs","If you have to understand AWS costs at this level of detail, you are not rich enough to use AWS. Outside of S3, which is best-in-class, why do people prefer to use it?"],"points":0},{"text":["Hello, declarative world: how relational programming takes functional programming to the next level.","Better still are functional languages, which introduce the idea of first-class functions: procedures become values which can travel around your program like any other data.\"Functional\" means computation is expressed by defining and composing pure functions (ie no side effects).Yes, this means passing around functions as \"data\".But plenty of languages have \"first class functions\" in the sense that you can pass around \"callable\" things, but that doesn't make those languages functional.","Articles like this are great for exploring the concept but not good at communicating the base need for relational languages. It's one of those things where if you understand it, you understand it and it's really hard to explain because there are very few good examples.","I can't help but think Declarative Programming should make for smaller code, this looks more exhaustive than normal Procedural code?","That was interesting. Thank you","declarative relational functional imperative procedural programming","Ohhh boy I hope no Haskell weirdo purist reads this"],"points":95},{"text":["LLRT (Low Latency Runtime)","Short and sweet:LLRT aims to significantly enhance the performance of Serverless applications with its lightweight JavaScript runtime, boasting over 10x faster startup times and up to 2x lower costs on AWS Lambda compared to other JavaScript runtimes. Built using Rust and leveraging the QuickJS engine, LLRT ensures efficient memory usage and swift startup times. Despite its experimental status and recommendation for evaluation purposes only, LLRT supports ES2020 and offers detailed guidance on configuring Lambda functions, ensuring compatibility, and integrating AWS SDK (v3) for optimized Serverless applications performance.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":5},{"text":["Build an ExpressJS Application With Clean Architecture","I'd really rather not, thanks. What I like about Express is that I don't have to follow garbage architectural patterns like Clean.","This is actually (unintentionally, I'm sure...) a great demonstration of how rigidly adhering to an architectural pattern can get ridiculous. You just way over-engineered a *solved game*, turning a perfectly readable demo with 4 files were anything of interest happens in under 200 lines into a confusing mess of models, controllers, whatever \"use-cases\" is... with at least twice as much code.","‚ÄùBuild express app with chatgpt‚Äù"],"points":5},{"text":["How I write HTTP services in Go after 13 years","I disagree with some minute details but overall really appreciate this article. Something like this is very useful for those who come from a system that is much more opinionated than go. Even though you have freedom, it‚Äôs important to be consistent and testable.","The bottom line:The post delves into the author's evolved practices for writing HTTP services in Go, reflecting on insights gained from a previous viral post and extensive experience in the Go community, including hosting the Go Time podcast. It covers structuring servers and handlers, optimizing startup and shutdown, handling common request types, and in-depth testing strategies. Changes from previous methodologies include moving away from methods on server structs for handlers, preferring http.Handler over http.HandlerFunc, enhanced testing opinions, and a detailed walkthrough of constructing a NewServer function, emphasizing dependency injection and clear routing setup in routes.go.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":17},{"text":["Reinforcement Learning"],"points":0}]