[{"text":["How can I implement something like this using Javascript (including animations)?","I know how to show hidden text upon the user triggering a pull down, but here the text box shows partially / fully with an animation depending on how far the users dragged down on the screen before triggering the modal, would appreciate any assistance on how to implement this type of animation that's on the text box."],"points":0},{"text":["New version for AiFormat - CLI tool that converts files into a format optimized for Claude","Hey all!Last week, I released AiFormat and the response has been great!The CLI tool is built with React using Ink (https://github.com/vadimdemedes/ink).If you haven't used it already, it's a simple CLI tool that makes copying & pasting files into Claude a breeze.Using it with Claude Opus has boosted my productivity significantly.I just released a new version that I hope you will enjoy:Added searching inside deeply nested files.Added the ability to expand/collapse folders with the Tab key.Added emojis to differentiate between folders (🗂️) and files (📄).Full code re-write, including ID based navigation.The project is fully open-source under the MIT license, contributors are more than welcome!Here's the link to the Github repo with instructions on how to get started (it's really easy):https://github.com/farouqaldori/aiformat/Let me know what you think!"],"points":1},{"text":["How do I set up monitoring for my full stack application, built with Express.js and MongoDB on the backend, particularly focusing on the server side and the database?"],"points":0},{"text":["Reservation form on website, what tool to use behind the scenes?","If the website is wordpress based, you can wpforms lite which is free"],"points":0},{"text":["Can there ever be a legitimate reason NOT to include <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />?","Yeah, bad excuse to not include it. But it does raise the question for me, why isn't this common line (present in any half-well-built web app) a default behavior? It seems to me it should be built into the browsers by now, and should only behave differently if specified. I'm sure there's a reason I'm not considering, but yeah.","No. People have their browsers at different sizes.It’s just lazy.","Failure to plan, is planning to fail, work to the worst possible user configuration.","https://stackoverflow.com/a/55722166","On the one hand, that is a poor assumption and not doing a responsive design in this day and age (where it's not even that difficult, really) is a real \"why not?\" kind of question.On the other, if the page is legitimately non-responsive then it shouldn't have the meta tag, as that's just going to create a worse experience for people who do visit on mobile.","I think I made a responsive site but I had to remove that so users could zoom on lightboxed photos using hardware acceleration.","That is for backward compatibility, for example if you don’t have correct mobile like navigation like hamburger icon and drawer menu with back button links, then you could omit this tag. If user needs native pan and zoom on webpage. For example if you are displaying plain image."],"points":52},{"text":["Looking for the gallery library (if it exists) used on this page","Looks like a Wordpress plugin.https://wordpress.org/plugins/simply-gallery-block/"],"points":0},{"text":["Best wireframing tool","Figma is what we use, no complaints.","Figma with a UI kit can make it pretty quick","If you want an open source tool, i like using penpot.","Sketch, Adobe XD, and Figma"],"points":8},{"text":["I build a helper tool to let me better identify what tailwind colors to use"],"points":0},{"text":["Media Queries - what are the correct resolutions you should change the display at?","This needs to be defined for all apps and components individually. I wouldn't switch the whole page at once. Check your individual components and give them the breakpoints they need. This is even more flexible now that we have container-queries. Then test your target-devices. Some apps may be fine with a super-wide width (dashboards, image-galleries), some may not (news-sites).","While I have mixed feelings about using Tailwind itself, I do still find it a good baseline resource for this stuff. Their breakpoints are what I tend to use as a starting point: https://tailwindcss.com/docs/responsive-designIf I’m being honest, I typically only do major changes based on their md breakpoint; I keep the others defined for extreme cases and for determining the maximum widths of my layouts."],"points":4},{"text":["Resources Every Web Developer Needs"],"points":0},{"text":["font for printing business?","Graphik. Unfortunately not on Google Fonts."],"points":1},{"text":["How to write maintainable software","Write tests. Cover success and failure cases. Make sure the tests explain the expected behavior. Tests convey intent, so when there’s a bug in the code, people can tell from the tests what the author intended. Tests are great for making sure that things work as expected and fail as expected, especially if you don’t know who the next developer will be.Make sure that the code can’t deploy if the tweets don’t pass.","experience.I was asking the same thing back then, and I still did most things wrong.but try to learn popular methods, such as services, tdo, pipelines and use types (typescript for js, and phpstan for php)","look man, someone will come in here and drop 20 acronyms that you must follow religiously otherwise your code will be spaghetti by breakfast tomorrow.but honestly, in my decade+ of experience I've found some simple truths outside of the acronyms:be consistent. if you did something one way, keep on doing it that way. exceptions confuse people. a typical example of this would be different ways to run DB queries such as a mix of stored procedures, raw queries and ORM:s. you might have a really good reason to make an exception which is totally ok, just document it! but they're called exceptions for a reason. here the main problem is \"we used to do it in a very bad way/I am much more informed than I was and would like to do it in a better way now\", but deal with those cases as they arise.name things clearly. every variable is something, they're seldom \"result\", \"list\" or \"temp\". the amount of code I've seen that looks like:​result.Where(x => x.Claws < 18)is staggering. it gives you zero context. avoid acronyms and abbreviations like the plague. domain acronyms are the absolute worst because if you're new not only do you need to figure out what the code does overall, you also need to figure out what a \"cfs\" (cat feeding station) or \"sc\" (snuggly cat) is.add some naming and we find the intent quite clear to understand:cats.Where(cat => cat.Claws < Cat.NormalClawCount)if you find yourself repeating code, think about if you have found a common denominator that you can break out and reuse. just don't expect anyone to actually use your amazing Helper-library, code discoverability (seeing what you can use that is already made) is a complex topic as well.tests are written to ensure the intent of the code is correct over time. never test that code works, of course the code works you just tested it when you wrote it. test that the code does what you think it should do, e.g. \"this function takes a cat and changes the status of the cat to fed if there is food and bowls in the cupboard\". typical breaking change: food is moved from the cupboard to the pantry and your code now have to have access to the pantry for it to work.everything else is to me at least opinion and you will find literally a million takes on if you should follow domain-driven design, vertical slice, n-tier, onion or anything in-between.just know that no matter your best intentions your code will probably not be the most maintainable thing that has ever seen the light of day, and that's ok. nobody has time to write perfect code, we have deadlines and budgets to follow.","Follow best practices, including but not limited to writing self-documenting code, naming variables appropriately, compartmentalizing code, being DRY (don't repeat yourself), KISS (keep it simple, silly), ... DOCUMENT EVERYTHING!Use an account that can be passed on and document everything.Push a template .env file with all the variables you need without the values. For your instance, keep the values somewhere like a secrets manager that can be passed along in case your env file goes missing."],"points":2},{"text":["scrollbar customization","I did this just a few weeks ago just using \"scrollbar-color\" but they'll have to have some forgiveness on that. Along with the headache that comes with getting this to look uniform in all browsers.I guess it would also be possible to make a custom scrollbar div with a ton of JS if they really really need this but that would be silly. But would be possible","Other commenters have already pointed to great resources. For your own sake: don’t expect it to look the same in all browsers, and prepare your client for this. And by all means: never ever ever disable the native bar, create a scrollbar yourself and control scrolling programmatically..","Remember to check in firefox too! For example, the webkit-scrollbar property does not seem to be compatible with it.https://caniuse.com/?search=webkit%20scrollbar","*Remembering when we could style custom scrollbars*I was there Gandalf, I was there 3000 years ago","You really shouldn’t. Users don’t like it! It looks silly and amateurish.","It's possible. Check the example here..https://github.com/useDeep/portfolio-v0/blob/main/app%2Fglobals.scss#L25-L88","https://github.com/Grsmto/simplebar","Give the client an outrageous estimate and prepare them for the fact that this will not look the same in all browsers on all devices.Have the designer flogged.","This will not work on all browsers, especially handheld devices. 20 years ago this was a possibility - but also a huge time sink. Nowadays, it's practically unheard of, as the major players drop support for it and replace them with their own style.Not saying it can't be done - but it will take a lot of time and only work for an unknown portion of users. This needs to be communicated ahead of commencement - along with the expectation of how poorly it is supported and how it negatively affects accessibility.Finally, you'll need to feed back to the client that their designer has suggested a feature without detailed knowledge of how that performs - and that it's best omitted due to accessibility, usability and ROI concerns.","I created a customized scrollbar 1 year ago. It’s a pain in the ass, especially figuring out browser compatibility. But start with a confident mindset. Trust me, it makes a lot of difference.I had created a scroll bar with smooth edges, transparent background and auto hide if I remember correctly. https://www.reddit.com/r/webdev/s/AZo1elyBqj","I totally thought this would be a discussion about custom scroll bars we play with back in '00s while chatting in AOL and ICQ. No offense intended.","Push back. Terrible for accessibility and generally a dumb idea. There’s also a ton of interaction nuance there that i’m sure the designer did not account for.","Imo this should be the least prioritized item. Most apps nowadays run on phones. And phones deal with scrolling differently. The death of the scrollbar is nigh.","Won't work on iOS devices","pls don't build a custom scrollbar, there are soooo many issues with that.","If this was for a stand-alone application or game then sure, but for a website - hard no, pushback to the max.Ever since the ability to modify scrollbars has been around, I've had an over-ride in place - all that time and money you spent on stupid scrollbar mods is lost, and if not lost, hated.","I don’t think you can natively style the top and bottom buttons but the rest, it is possible. You’ll have to use webkit scroll bar track and thumb css selectors.","Push back on this. Spend your time delivering value, not actively making the product worsedesigner has no clue what they're doing if they think this is a good idea","Point out how much time you could sink into trying to reproduce this (and—spoiler—it'll be impossible to get this working as designed, cross-browser) and point out to the client how many billable hours will be spent on something with this level of impact (eg. none).","can anyone tell me why my post got decline? i am new to reddit","https://perfectscrollbar.com/"],"points":232},{"text":["Need advice about website builders","just code, no builder","Nothing is truely free without a banner. Same for all page builders. Godaddy is the worst place you can go to register a domain and build a site. Webflow is the best but has a higher learning curve","WordPress is free but you have to pay for hosting"],"points":2},{"text":["Best place to host a Flask API for a website with minimal usage but high computational power?","linode $5 per month will be fit for your case or python anywhere if you wanna host for free ?"],"points":0},{"text":["How to get started freelancing?","I would suggest first building a small portfolio of projects which you can show of to potential clients. Once this is done you need to build reputability for your accounts on the various freelancing sites (i.e., possibly start by offering clients work for free to get reviews and good ratings, then once you are ranked high enough start increasing prices, etc).You could also look at creating your own app/web apps and monetizing them which is what I'm trying to do currently :)","1/2I’m a freelance developer making static sites for small businesses. It’s an easier market to break into rather than web apps and stuff which typically has a higher barrier of entry as a new freelancer. But I found success in simplicity.I ONLY focus on small business static sites. I don’t even know JavaScript. I only know html and css. But I made it Work and my freelancing brings in six figures a year working it part time. This is because I hyper focused on my niche and stuck to only making brochure sites. And I wrote out everything I did to get where I am today in this freelancing 101 guide I wrote for people in your situation. Anything you’ll ever wanna know about freelancing is in herehttps://codestitch.app/complete-guide-to-freelancingYou’re going to have to find a designer to make your designs. Because if you aren’t a degree holding designer it doesn’t matter how many YouTube videos or books your read about UI and design, you won’t be able to make what an actual designer can make and it will show. I see it all the time. It’s painfully obvious when a site was designed by a developer. If you wanna make good money you hire a designer to work with. Best decision I ever made because it allows me to charge $3500 minimum for my work and my work looks like it’s worth that alone on design. Then I don’t have to spend tens of hours a week designing and it still looking like crap. I hand it off to them and I do what I do which is code and sell. If you don’t do this, you’ll eventually become your own bottleneck in terms of what you can do. You only have so many hours a day to work. Which limits the amount of sites you can work on and how much money you can make. I found mine on dribble.Then there’s pricing your work. I offer two packagesLump sum - $3500 + $25 a month hosting and maintenance. Hourly for edits. Up to five page static site with contact form.Subscription - $0 down $150 a month includes design, development, hosting, unlimited edits, 24/7 support, lifetime updates. 5 page static site plus contact form.Add ons are$100 one time per extra page over 5 pages$500 blog integration and configuration.Nice, simple pricing. Simple projects. No databases. No booking features. No payment processing. Wanna know why? Because you don’t have to build everything yourself. There’s so many third party services out there that do niche specific booking services and perfected it for you. Just have your client set up a few demos with some companies and find the one that works best for them, their company rep will help set them up and then you get either a link to add to a button or an API script to add to a page that loads their booking platform inside of your site. I do this for everything. There’s no reason to build and design your own custom booking and calendar platforms for like a local house painter. Total and absolute overkill and over engineering. Use what you have available to you. Simplify your workflow and the types of sites you make, and just do those. My niche is static 5 page small business sites. I don’t want to build inventory management systems or custom forms to connect to databases and a backend, etc. I’m not interested in doing that. Because I can crank out a 5 page small business site in less than a day and charge $3500 for it. The more complicated the site gets the more time it takes. I know I can do these types of sites in X amount of hours. Throw in some custom dynamic features and that can be a very wide range or Hours and I’d have to maintain those systems and update them. My time is better spent pumping out higher quality static sites in a day than spending weeks on a large complicated project for $10k. I just don’t do it.So by niching down, I can better estimate my time per project, which allows me to offer simple and standard pricing because I know exactly how much I’ll make and in how long.I don’t do hourly. You only have so many hours in a day to work. Once you set an hourly rate your maximum earnings a year will only be that hourly X 2080 working hours a year and that’s it. That’s the maximum. I prefer value based pricing which is selling my services based on the value my services add to a clients business. I charge $3500 because that’s what the clients value my work for and what it can bring in for their business. I only work like 4-6 hours on average per site. Maybe up to 8 if there’s a lot of pages and content to organize. So if I charged hourly at even $100 an hour I’d only be making $600 for 6 hours of work. $600 for an entire site because I’m TOO good at my job and can do it faster then most people. How is that fair? Value based pricing makes you more money because if you figure out and optimize your workflow you will be rewarded for being efficient and precise. Let say I can crank out a full website in 2 days conservatively. Assuming I don’t work weekends and holidays and work 230 days a year accounting for vacation days. That’s 115 websites and $402,000 a year. That’s my Maximum capacity if I can keep that schedule every two days and have a constant flow of customers. Now if I did hourly for that same Period, let’s say I spend 8 hours total per site. Multiplied buy that same 115 I get 920 hours. What’s your hourly? $50 an hour? That’s $46000 a year. MAXIMUM for your time. $100 an hour? $92,000. That’s without 30% taxes taken out, expenses, etc. HUGE difference from $400k maximum. So you can see the difference between value based pricing and hourly.Let’s say I only sell 3 sites a month. Value based is $10,500 that month. If spend 6 hours making each site, at even $100 an hour, that’s $1800 for the month. Shoot, double that, $200 an hour! That’s still only $3600 for the month compared to $10,500. Why on earth would anyone charge hourly when it’s clear that value based pricing is more viable and makes you more money.","[removed]","this comment section helps","Online platforms never worked for me. What did was using my feet. Get out the door and go to networking events. Both tech and non-tech are valid.","Dm sent"],"points":23},{"text":["What do you use for periodic operations in NodeJS?","\"task scheduler\"","https://www.npmjs.com/package/node-scheduleBasically a node version of a cron job","Crontab","Task scheduler or cron job that calls that node script","I've used node-cron before, it does what I need:It takes a cron string and a function to run and runs the function based on the cron schedule."],"points":4},{"text":["Random instances of screen zooming in on iOS","Did you try increasing the font size? https://stackoverflow.com/a/6394497"],"points":1},{"text":["Web developer performance reviews","I'd recommend one of your developers being promoted to lead developer and assigning them the duty of doing these performance reviews. You can still have input but I think feedback coming from a senior developer will be more valuable to the dev team.","You should really just get someone to do this for you. I mean I honestly don’t think a non-developer can manage developers. You can only really talk about the timeliness and I guess number of bugs. But you don’t understand code quality.As someone above mentioned probably promote someone and shadow them, speak to them about these things etc. I get it if you have to do it, but I just can’t think you have enough knowledge to do it properly.You can go the route of getting everyone to grade each other. But honestly I’d expect biases in both directions- so friends looking out for friends & enemies shitting on each other lol.But if the best you’ve got I guess you do it. But just be very wary of the data.","There are MANY non-tech, non-developer related qualities & metrics that you can focus on which are equally (or perhaps more) important in the situation you describe.Do they meet deadlines and honor their commitments (I'll get it done by Tuesday)?Does their output work reliability on 1st or 2nd go-around, or are you having to deal with many revisions because they didn't test thoroughly or properly comprehend requirements?BONUS for your own self-eval: Are you (or product mgr, etc) providing them with clear, comprehensive function requirement specs?Are they responsive within a REASONABLE timeframe, and do triage incoming communication effectively? (Not distracted by every perceived emergency [YOUR job!], but not a 2 month+ black hole either).Are they communicating clearly, respectfully, and effectively, both with peers AND non-tech management, internal customers, etc.?Can you look at their output and get the basic gist of what it is supposed to do? (Comments, logical function/variable names)Can they explain (ELI5-style) if you don't get the gist of what it does?Can they explain their challenges and roadblocks to you in a way that makes sense (again, ELI5)? (so you can take care of THEM by managing executive/product mgr/customer expectations)","Have them rank themselves in a set of criteria, then have them score their teammates on the same criteria, then in the 1on1 discuss their score versus the average score of their peers and see what they have to say about it."],"points":16},{"text":["Can't Figure out CORS issue with Vercel (MERN app) - Any Help?","On MongoDB I've also put in the IP 0.0.0.0 so it can be accessed from any IP address.","So about CORS: typically if CORS is enabled, a client has to make an OPTIONS pre-flight request to get the necessary CORS headers, or something (i think, I'm still a noob myself)You may have to explicitly create a .options() route to handle this OPTIONS request. it's actually a completely separate request from the actual GET or POST request the client is making. You have to return appropriate headers (research which ones)I'm on mobile so I can't really look up anything rn and this is just off the top of my head, but hopefully this points you in the right direction"],"points":0},{"text":["If you had the budget for one, would you go with dev.ui or frontend masters","If you mean ui.dev, then yes, their courses are really great especially react.gg, I learnt a lot while being taught directly about good vs bad practices. There's also a lot of hands-on to do.","Maybe I'm in an uninformed position as a dev with 14-ish years experience who doesn't keep up with the paid courses for stuff like this. But, based on what I've seen/taken/considered, I honestly think that FreeCodeCamp is best at teaching actually useful things. I had a few years of experience when I started, but I definitely recognized just how important and real-life applicable its sections were.Does that answer the exact question you asked... No. But, based on my experience, I think that the free option might actually be better here. Admitting that I'm not particularly familiar with the two you're asking about here. FCC is just the best I know of from experience and hindsight of what's actually important.Between the two, which one wasn't exclusively React? I'd go with that one! React is an over-saturated market full of noob devs with temporary and niche knowledge that's highly subject to becoming mostly useless on the next major version of React. At best, those skills have a limited shelf life. It's far more worth it to learn the fundamentals that carry over regardless of framework or library or version. More broadly applicable (generic) skills are just more valuable in the long-fun (and, just to be honest here... there's no guarantee React skills will even be in demand by the time you finish).","This might be unpopular opinion but I didn’t like frontend masters. It’s clearly geared for people who already know web development and want to brush up or keep up with latest stuff. Their beginner courses are not that great, very shallow and the course content feels like 2-3 min edited clips put together, just doesn’t feel right. If you are complete beginner I would avoid it. I found their workshops really good, long detailed lectures with QNA.","I’ve tried Frontend Masters, not ui.devFrontend Masters covers a large breadth of content, but everything is a taped course. There are no practice problems or interactive segments in the courses I’ve tried. You’re watching videos of in-person lectures generally. That said they are damn good lectures, and if you’re going through the effort of watching a long video course, you can spare the 10% extra needed to follow along actively in your IDE.It’s also cheaper than ui.dev, by $105 annually.ui.dev seems to offer more interactive content and structured practice problems, with a narrower focus on JS, React and libraries that complement React.For more breadth and like 25% less cost I’d take Frontend Masters unless I really had to cram React, and only React, fast. Or if I had no prior experience.","If you’re experienced, Frontend Masters is great. I have a subscription and I use it often to learn new things or refresh my understanding. I like that it’s taught by industry professionals and they update the courses frequently.I’ve never used dev.ui. I learned how to code from Team Treehouse but their content is more geared towards beginners. I’ve also had good luck picking some courses on udemy for frameworks like Django and Vue when I needed them."],"points":6},{"text":["Personal project","Delete account feature"],"points":3},{"text":["Can database ID's be a readable string? Is it good design ?","Use ints for multiple reasons as others have said: - Auto-Increment - Easier FK relations - Avoid Redundancy - Easier updates like when On Leave gets renamed to “Period of Absence” - For small tables/queries it probably won’t make a huge difference but string comparisons will be more work to perform","First example it’s better than second. Because redundancy.If you want to join them later, you’ll have a lot of problems pairing with foreign keys.I’d like to give you a better explanation but language barrier (i’m not english) :/","I prefer the first optionHuman readable IDs are helpful for debugging, but over time things change (maybe enrolled gets changed to registered in the future) and things get hard to maintain.In the first case you mention, if you want to change \"enrolled\" to \"registered\", you just need to change the name value. In the second case you need to change both the ID and name, otherwise what benefit do you get with human readable IDs?Changing IDs then comes with additional risks. If you have any hardcoding in your codebase keyed off the old IDs, they will need to be updated.","lets say you have ID as \"on-leave\". What happens if you later decide to rename it? it is not onLeave, but rather \"goingToLeave\"? you can adjust statusName, but PK will remain the same. Then, from the code perspective, it gives misleading info.Integer types can be auto incrementedRelated to the first one - if you have Students table which has \"status\" column which is FK for StatusID, you will need to rename that link in every row in case if you change statusID valueedit: don't assume that status table values will always remain the same. Nothing remains the same","PoatgreSQL enums made for this kind of thing, sadly other vendors don’t have equivalent construct AFAIK.","My suggestion here would be to leave readable strings up to the part of the system that actually uses them (the front end - not the database). You shouldn't store readable strings. You should store atomic identifiers. If those atomic identifiers are readable at the same time, okay, great, but the point is that the data is atomic, that it ideally never needs to change because it is the ultimate truth.`enrolled` is atomic. That is what should be stored in the database. `Enrolled` is something than can be derived from `enrolled`. You should NOT be saving the formatted string in the database. Why? Because it's calculated data. You can derive it from `enrolled`. But let's say you disagree and you want a nicer string in the database. Then the argument becomes you should not depend on that nicer string for anything.You shouldn't depend on the formatted `Enrolled` string in the database. You should, instead, derive it from `enrolled` as needed. Your database schema should NOT worry about formatting. If the formatting coincides with your schema, great, but that is not the focus at all.Why?Because all of a sudden stakeholders come to you with a demand to change the \"Enrolled\" to \"Enlisted,\" and now you've got to backfill the database. If you hadn't stored the formatted strings in the database, and instead you stored them in your code, mapping them out, then you are much more free to quickly change things.Storing computation results is a no-no. And this IS storing a computation result. You should store hard, concrete identifiers, and that's it. Atomic data. Not formatted data. Not computed data.Store `enrolled`. Keep a map in your code where `enrolled` points at `Enrolled`, such that you can easily derive `Enrolled` from `enrolled` (or derive `Enlisted` from `enrolled` <--- this is the important bit). Then you have something you can quickly change, without disturbing the database. You always need to keep backfills in mind. Like... will my design cause backfills to be inevitable? Or are we likely able to retroactively fix things without a backfill? If it requires backfills in order to change stuff like labels, like your design would, you should rethink it.","In the second example the Id field is useless, you could have a 1 field table with a natural key.The main point is that you need to understand what keys are for. And what kinds of keys there are.https://en.wikipedia.org/wiki/Surrogate_keyhttps://en.wikipedia.org/wiki/Natural_key","Good database design generally calls for synthetic keys. That mean the keys for your tables should have no meaning other than that they are the record key. This means that you should never need to change a key because of a real world change. If you use a natural key, as in 'on-leave', but then the value column is changed to some other value, \"Not Present\", your key is no longer in sync. So we always try to use values which are not meaningful.","Business logic != Database logicYou will change your business logic. It's not an if, it's a when. Then nothing will have meanings anymore.","Honestly you'd combine the 2. Use number ID, but keep the \"key\" rather than the string value, so you can have different translations and change the underlying string in a translation file without touching the database. Depends on the size of your project of course, but you shouldn't have to go through database to change \"On Leave\" to \"Absence\", especially if you want to change multiple strings you're going to have to write UPDATE queries instead of simple text replace","No. This fails dB normalisation level 1. The primary key should be independent of the data of the record.","The ID should always be meaningless and completely disconnected from any other value in the database. It costs absolutely nothing, and makes things so much easier in the future.As people mentioned, what if you decide to change \"On Leave\" to something else? Now you'll have an ID that is misleading.These kind of string IDs gives you no advantage at all, and has a very high potential of creating problems.","As long as they're guaranteed to be unique they could be an INT or a string. I use GUIDs as IDs all the time.","Are you asking solely about foreign key tables or for all table types? There are plenty of reasons not to do this, and I can’t think of any reasons to do this. How do you sort it? Can you guarantee it will never be changed? What if someone who only reads Spanish needs to use this table?","Primary Keys should ALWAYS be integers + use RDBMS’s auto increment option. Is it mandatory? No. But it’s good practice and it’s good following rules for clear writing in general.Whatever problem you have don’t consider this an option. You need to think of another road friend.","Are these statuses hard coded? Or will you be dynamically adding/editing them?If they're just a finite set of statuses that don't change I wouldn't even bother with the table. Just store \"enrolled\", \"on-leave\" etc in a column with the records they're attached to.The \"display\" form (On Leave) is really just an UI concern and you can leave it out of the db.If they're dynamic I'd go with the second example most likely, just cause it makes your urls and queries more readable.","I mix it up, depending on need. Since you want to use these values in filtering, I see 2 challenges with using words directly: - what if the program is used by someone who doesn't speak English? - what if somebody changed the primary keys in the DB but forgets to update the application that depends on them?For a program I'm building, I do use words as primary keys in some places, like international language names and data type enumerations. But no user sees these. Administrators do, but cannot change them. In other places I use an auto number.","Note: common convention is to have lowercase table and column names. Both should be underscore_case, not PascalCase. Column names should not contain the table name, because that is redundant. The id column should be autoincremented int or bigint. Also, the StatusName column that you have here should ideally be ENUM, not VARCHAR, if it is intended to be restricted to a specific list of choices.","I like the second one better, because it's more self-explanatory. I don't know if that is a good reason, but when I see: State=5, then my first reaction is:ffs, now I have to do more work to find out what 5 means.Also, holding presentation text inside a database bugs me, because it's a presentation thing. What if you want to apply multi-language applications?","I see no problem with an ID being a string, but some points need to be considered. Generating a string can be a bit more costly; if performance is a requirement, the string can pose an issue. Another point to consider is the table's growth. Depending on the volume, over time, performance may degrade compared to a numerically indexed field. For example, a BTREE index will incur a higher cost with each new insertion as it needs to traverse the tree to find the index position, which can impact the efficiency of data query and manipulation operations."],"points":58},{"text":["Launching a Start-up with little experience?","Running a startup is much more of a sales and finance task than a computer science task. Actually creating the product is probably the easiest part of the job as a founder.Consider finding a co-founder who has in-depth experience in sales and finance to balance your technical skills."],"points":2},{"text":["Best way to use 3d models in Angular?","The \"Angular\" part seems entirely unimportant. Three.js is good and is pretty popular"],"points":0},{"text":["After adding Firebase (importing from the core and database SDKs), my PageSpeed Insights score has TANKED"],"points":0},{"text":["Rank your company's documentation game and why! (Scale 1-10)","1, they don't write docs.","It was 1 when i joined and i was the first one to start writing docs.","Where is 0?","What docs? 😬","9.Commenting code that looks complicated but does the business logic correctly.Having some markdown documents with developer guides, e.g. how to use some written library code that we only need once or twice a year for a new feature, in version control so it's always up-to-date with the current version of the library sources.Having Word files and Excel sheets for deployment procedures, deployment blogs (for documenting when we had to do something more than \"push the deploy button\"), etc.And mostly up-to-date documentation for the whole application, because the customer tells us what he wants, we write documentation about what we would implement where and how the user would use it, and only if the customer reviewed and accepted the \"feature set\", it gets implemented.Why only 9 of 10? To remind us there is always room for improvements. ;)","Answer: 0Why: Because I am in charge of it","1 - basically non-existent for code","We have a boiler plate the uses a combination of Code Igniter 2, 3 and 4. All wrjtter are by our CEO through the years. With zero documentation.He created his own \"modelus\" that we don't have to interact with, so to create anything you have to do it his way.An example. To create a simple route, you havr write a multidimensional array in which you have set value pages for everything. From values for slug, view's filename, tag names etc. Every thing you write here it will be part of the route for that page.Oh, and every each entry in this array is ordered numerically. As in page One, Page 2, page 3 and so on.Controllers are something close to this. We dont have access to his modules, therefore we have 4 general controllers, submit, request, auth and forgot the last one.Here, if you want to submit a form, you open submit cpntroller, write a function that matches the name of the form. Forms also have names as numbers, just like pages. Forms are everything 500+. In the function you manipulate your date and submit it.At request tho, you have to connect to the db and write your query, inside the controller. And since routes have been abstracted to this array I mentioned previously, if you want the request to point to a view, you have to add to the pages array a new item, \"action\" => \"name Of Function\".Not to mention, the boilerplate front is done with jquery, and all css related things are made using display: table. And, the funniest thing for me, you can't use a button to submit a form. You have to use a div. Because he didn't know about (e).preventDefault when he made this boiler plate.","who has time for that shit when there are 99999999 more important things to do.","2/10. Only because I’ve started documenting the 508 accessibility stuff I’ve been working on. I haven’t seen any documentation for anything in the 2 years I’ve been here.","5","What docs...?","How can I rate something that does not exist?!","Things change too quickly for anyone to feel like it's worthwhile to establish & maintain documentation, apparently.","10 for the sheer number of high quality docs I write for my team.1 for how much time my team puts into reading them haha.","Lots of documentation, but fragmented, out of date and only covers the most basic cases.","Started working with a start-up 8 months ago. Essentially zero documentation beyond a few token notes in the gitlab wiki on how to deploy the project and some custom laravel commands. Mostly it's been learning as I go and taking a lot of my own notes so I guess on the scale it's a solid 1 lol.","After all these years I'm starting to think there's people gaslighting us into believing it's actually real.","I do my best to document my projects and stay up to standards and im feeling like a fucking clown reading those comments lmao","0 = none","6 it’s documented when people keep asking how","1, what's a \"documentation\"?","At least it’s there, organization is a whole nother beast","1","Outdated. Written by me and my colleagues right before we leave.","Current company - 8Previous company - 0","-1 they write docs but by people who don’t know the system","We Implemented the four types of documentation https://documentation.divio.com/# and it really helped organize things and help people create better docsAdded document status (approved, needs review, draft, deprecated) and owners. A 3 month scheduled review.We are using confluence but getting frustrated with limited navigation controls. Customers have their own confluence wiki for documentation, requirements etcStarting to link documentation, tutorials and guides into a career framework and training priorities.Still much more to do but only a small firm with 10 people.6/10","It's in our heads.","Critcal data is documented but otherwise almost everything is outdated or there are not documentation available."],"points":135},{"text":["Type Predicate Inference: The TS 5.5 Feature No One Expected","Amazing!","Honestly this has been one of my biggest pain points with TS. Nice to see it."],"points":1},{"text":["Used technologies in famous website / web app editors?"],"points":0},{"text":["[Showoff Saturday] I built an open source low code data extractor tool for any website"],"points":0},{"text":["How do you manage a team of developers?","Hire the right people. That's the hardest answer unfortunately but the most important one.I really don't think you need a bunch of project management with a tiny team. Just find people who are comfortable working on their own and experienced in your stack who you personally mesh with. This will probably be very difficult but so will hiring the wrong people and finding you've burned a ton of money on ill-fitting devs who can't work without a JIRA ticket.Make sure requirements are clear. Like really clear. And those devs you hire should be capable of giving feedback and contributing to requirements too.Don't try to run your company like Google or Microsoft.Minimal PM. Independent, efficient devs. Solid requirements. That's what it takes. And a ton of money to find and retain the right devs, good luck.","I use Wrike to manage individual scrum boards of other developers. I break most things up into smaller tasks and will assign a due date. I give them the opportunity to touch base on each task prior to starting to make sure they have what they need and their dev environment is working as expected.Every project is versioned in git. Each task gets its own feature branch. When tasks are marked completed in Wrike I will QA the work and then merge the feature into production.We are mainly doing PHP development so I add a DDEV config to each one to simplify setup and onboarding to each project.Our DevOps developer manages all deployment related tasks. We just give him project requirements and he handles.","We use a management software that we can breakdown all of the projects into smaller tasks. We can then assign each dev a task or they can jump onto another task. This will help give a visual representation of that they need to do and ask questions.Also proper git tools like github or gitlabs allows you to control version control easier. Assign one person this job will be assigned to just one person to merge all of the code. It is one thing to work with two devs on a project, it is another to deal with 4 people working on code","How to manage?person must have good mindset - most important factorperson must have skillsSet rules of for your peopleIn contractexpress that in everyday communicationSet rules for yourselfClearly define what is a good result of workDefine what is not enoughThere are things you won't predict and can't predict. Adapt.Your people should know exactly what to do and if they don't you should talk to them and see if they improve. It's never easy.and most important of allfail fasterManaging is more difficult than most people imagine. Especially if YOUR OWN money is involved and you're not satisfied with quality.","Give them concrete goals and deadlines. Then leave them alone and don’t micromanage.","At my job we write functional designs for the devs. Typically you have PMs work on timelines and SOWs of the project. Then analysts will gather requirements to share with the dev. Dev builds thing, anaylst might do the QA and test then present to the client. Rinse and repeat. Check out Software Development Life Cycles (SDLC)","Hire someone that knows how to lead :)","https://linear.app/method use it as inspiration.","i have a small company and this is what has worked for me:figure our their strengths, weaknesses, likes and dislikes.the most juniors should work on their strengths until they understand your projects and star becoming self reliant, The most seniors will be able to understand most of the process faster than juniors, so use the seniors where you actually need help.have a standup every other day, and just talk about the project and maybe allow the devs to setup a call after the standup in case they need to do some pair programming.you should remind them that they are a team and everyone should be able to support each other and they all have the same goal.","Hire the most Sr. / lead Dev you can afford and convince them to join the efforts.  They will manage everyone you hire.  Don’t be intimidated, there’s no substitution for experience.You guys may be good, but process is everything. And that usually comes from experience in the grind","Hire someone with Sr. Principal / Archtect skills from a non-startup that knows the ways of very large development teams. That person will understand how to work with you to develop standards that scale, will know how to document them, and will understand the pitfalls of not doing so - listen to them.","I worked for a startup for a while that didn’t want to do daily standup. I learned a lot from that time, but perhaps the biggest lesson is that getting the team together regularly to discuss their priorities is extremely important. That and as development resources come on and speed up, don’t forget to scale up testers. Mine didn’t and deployments were constantly behind due to testing.","First off, congrats on striking out on your own. This is not the first challenge you’ll face in this area, and chances are not the last time you’ll think (or re-think) how this is handled. As you and your teams scale, you’ll likely find yourself re-evaluating old decisions to see if they still hold merit. They may, but they may not!There’s no one size fits all answer here. I’ll provide my opinion on it, but it’s just that: an opinion. I’m sure others may disagree, and will have valid reasons for doing so.The first thing I think you should think about is “how do you want to work?” Do you expect the new developer to be able to do what you and your partner do? Do you expect them to make the same decisions, have the same opinions, figure out resolutions to the same problems? Do you expect collaboration before decisions, or to just assign a problem and have them execute? How you work, where you want to be spending your time, will inform the who you’ll try to hire. It will allow you to clearly define expectations of the role and help you find the right talent to fill it. It will require different levels and types of investment getting a senior developer to do what was mentioned above compared to a junior.Once the how and the who are determined, you can find the right tool to help you organize. In this case a tool could be abstract as in a framework to approaching work, or something more concrete like a product that brings with it its own opinions.Practically, your team is still small enough to be able to effectively share most (if not all) information informally. This is expedient but will pose scaling problems later. The two biggest issues i’ve seen scaling teams are 1) combating tacit knowledge and 2) shifting away from highest possible performers as a staffing strategy.Some effective things i’ve seen on teams in the 3-5 (operating individually, not part of a larger org) are to have clear expectations of “done work” which includes appropriate testing levels and support documentation, to have agreement to keep administrative overhead to a minimum (don’t overplan your roadmap, don’t introduce needless task breakdown, etc) , and to communicate multiple times a day to stay aligned.Of the books i’ve read on this topic, none of them have covered how to do this as part of a startup and all have the bias of existing within a larger structure. So I can’t really recommend anything specific unfortunately.Good luck, and hope this was at least a little helpful.","Don't overthink it, just decide what you want the person to do, and ask them to do it. Write it down somewhere like Trello so everyone knows who is working on what.Be hands off, don't micromanage, but make it clear that you welcome questions and input.","Amazing amount of bad advice here. Read The Art of Doing Twice the Work in Half the Time by Jeff Sutherland. If you scale beyond 7 developers or just need more practical advice, read Essential Scrum by Kenneth Rubin. It's more like a textbook, so maybe read the first quarter or so, then skip to chapters that feel relevant.","I’m not a project manager but, I find that processes are very crucial when it comes to efficiency and quality of the product. It takes trial and error but you do need to find a good process to follow when proposing requirements/developing/testing etc.Also, establish some kind of requirement baseline for requirements / iterations. The last thing you need is an argument with your team or stakeholders about implementing the wrong feature or leaving something out. In other words, there should be some kind of “sign off” for requirements that way everyone’s on the same page.Thank you for reading.","I'm a dev lead on a team of 5 (not including myself). A few things I've learned:Spend a lot of time planning. Ideally, you want to know 2-4 weeks in advance what your team will be working on, so you can get things ready and ensure that everyone has relevant work.Be very aware of what block each other. In my team, we have a product manager, and if I let her decide what we work on, she'll say \"all 5 of you work on X feature\". But the problem is, the feature has to be worked on in sequence, so ticket 1 blocks 2, then 2 blocks 3 and 4, then either 3 or 4 blocks 5. The better way to do things is to work on more features at once, so people can work on the first ticket in a blocking chain rather than sit there waiting for work to be ready for them.Do some analysis on what's the most blocking tickets and give them to your most experienced devs, which is often yourself. You'll be faster than anyone else, and you handling one ticket of work can unblock 4 tickets for the rest of the team.Be actively involved in as many PR reviews as possible.No advice for learning about this deeply, this is all my advice moving from individual contributor to dev lead in the past few years.","I'm in need of a sales person for my company if anyone is knowledgeable","Surround yourself with subject matter experts who have the same goals as you do relative to the topic. Don't be afraid to give control away, especially if you know you can do it on your own.Really, being the subject matter experts yourself will help you break down work to be done. Delegating tasks is easier when you can demonstrate the expected result (have clear and finite expectations), have trust that the delegate can achieve the result, and be willing to be the gateway for commits on trunk based development. This also means having clear expectations in writing about code style, standards, best practices, and security available for quick reference.When you all agree on the expected results, and you all agree on what tools and \"materials\" to use, it's up to the developer to execute.","Hey, I've been doing software development management for about a decade now. Here's what I've learned.Engineering Management is not Project Management or Product Management. You want all three of those roles held by different people. Engineering Managers ensure quality. Product Managers worry about scope. Project Managers worry about speed. This is the Iron Triangle as a management structure. You won't have real negotiation about these things unless there are three distinct stakeholders.You can not work backwards from what you need and when you need it. If you do this you will fail because something always goes wrong. Humans are terrible as estimation so don't live or die by those estimates.Build your product in iterations. Every iteration should be small. Every iteration should be tested. Lean into testing early. Every test you write is a product feature that can't break.Teams are just groups of people who share rituals. Create those rituals. Keep meetings short and try to schedule meetings so they directly abut other things on the schedule like lunch. Context shifting is expensive; do it as little as possible.Every developer needs 30 minutes weekly (some people do every other week) with their boss. 1:1s are the single most powerful tool in your management kit. These are time for your employee to talk about whatever is on their mind. Frustrations with other employees, their kids' soccer schedule, whatever. Listen. The goal here is to make sure that they KNOW they can bend your ear on the regular; that way they won't derail meetings or blindside you with stuff.Learn about Agile. Not because Agile is the best thing ever but because Agile is a good starting place. Limit your long term planning; most of it is worthless anyway. Do the planning work to ensure that the code you're writing really is the code you want to be writing. Be pedantic about this stuff. It'll save you headaches in the long run.Set aside time for professional development. The tech world never stops changing which means you either have to hire new people every couple of years or you need to make sure your team has time to learn. Take note of who uses this time well. That tells you a lot about the kind of engineer they are likely to become.Hiring sucks. You will get frustrated. You will feel like there aren't any decent developers out there or, if there are, they're not applying to your job. Be patient. It's much, much, much better to pass on a good candidate than it is to hire a bad candidate.Get out in front of the HR stuff early. You should avoid creating policies for everything but you do need some basics. Are you going to have public or private compensation figures? How will vacation work?Great engineers often don't make great managers. Consider finding someone you trust who's done something like this before to help get you started. The older and more experienced they are in the industry the better; personal networks are the best source of new hires.","Put processes in place, and those processes will put everything else in its proper place.One must make sure these processes are solid, robust—yet still flexible enough to deviate from the mold when circumstances require malleability over immovability. Once one has the proper processes, the human aspect of the equation is easy. If the process is thoroughly comprehensive, new employees will be able to easily habituate themselves to the workflow.","Put the work into sprints. Do a standup every morning, ask if anyone has any blockers, be supportive, and make it a safe place. Point of the sprint isn’t to manage the project, it manages the progress. It’s very clear what your velocity is after a few weeks and issues with the team or devs can be identified quickly. Ideally sprint review (like 15 mins will do) with the team on what issues arose and what you should do better next time. Sometimes there’s nothing. Just make sure you foster a safe space to talk. When someone keeps lagging, identify them as a problem to solve. Do they need training? Do they keep hitting the same hurdle? Or are they just uninterested. Keep emotions out of every decision (except THEIRS) and you’ll be miles ahead of most managers","Hire the right people. You want hard-working self-starters who have good experience working in your setting.Make sure your onboarding experience is air tight. Take note of popular open source projects and how they handle docs, CI/CD, etc. Optimize workflows wherever you can.Don't \"manage\" - enable! Get out of your devs' way when they're producing well. Inquire when they aren't. Be encouraging, supportive and make sure you recognize their achievements (positive reinforcement and whatnot).","Generally agree with what top comments says. I've seen other comments mention setting due dates yourself. I think it's good practice if the work to be performed is well understood. But, chances are in your case, and many other cases, that it is not. Now you're trying to estimate how long a project will take to complete. For somebody else.Also I worked at a startup where one of the things the founder did early was establish culture. Really, like weeks without difficult work to get everyone on the same page. I think it was the right move.","a tree of bananas","Plan the project in enough detail to be able to allocate out sections with well defined deliverables for the developer to execute on. Document your coding standards and make available to the team. Document what libraries/state management/framework will be used and how they will integrate. Document architecture and file structure (what goes where) Weekly check ins. Weekly review. Plan how you want to use branching effectively - when you deploy you want updates to be seamless and segregated on another branch before adding to production version.","Lateral Management is the best way and also the most demanding. When hiring the most important is motivation and soft skills. Everything else can be learned.","My advice after almost a decade in early stage startups would be to not overthink the organization. 4/5 is not that different from 2, it's still a group of people that you can hold in your mind with little effort. The difficulty comes when you reach a dozen but in 95% of cases you'll never reach that scale - most startup ideas are just SMBs in a trenchcoat and the co-founders shoot themselves in the foot by over-raising and over-hiring.Processes and organizational layers are a very costly liability. You should strive to keep them at a minimum - a small engineering team is not an orchestra it's a punk band rehearsing in a garage. Forget authority, the group should self-organize on technical and organizational legitimacy. Cultivate your engineer's strong points and preferences, it doesn't matter if your team looks unbalanced what matters is that it can accelerate in good times and not decelerate too much in bad times. There's a lot of decisions that should make you feel like a fraud in front of other entrepreneurs, and you'll have to double down on these decisions if you don't want to be a loser in this game.You said somewhere that you didn't have the budget for senior developers, well if that is the case i can guarantee you have even less the budget for hiring juniors. They cost a lot more than they seem to and they need management or things will break down. 1 scrappy senior costs more upfront but it's a multiplier for your business and won't eat up your attention.Be selective in your hiring, then trust your people. Explain the business to them every chance you get, give them the keys to the kingdom, let them self-organize while providing them as much support as you can. YOU are a service provider to THEM, never forget that. In the unlikely event that you do scale to a larger team in the next few years, they will be the layer 0 of your organization, and at that point if the machine makes sense you can hire an engineering manager and ask them to scale it.","Read Buy Back Your Time. It has so many good tips. This one stood out to me: give your team a definition of done (DoD) for everything.","Here’s all the advice I keep to myself and tactfully don’t share with other non-technical founders:For a tech startup the developers are your only strategic employees (until you start scaling much later). Everyone else, and I can’t emphasise this enough, are utterly superfluous.I see founders wasting huge amounts of their day endlessly talking to marketers, designers, even fucking HR because they don’t like developers. If that’s your problem then learn to like them or quit while you’re ahead.There is no such thing as a “cheap” developer, their market rate isn’t set by ego, it’s competition and any search for “cheap” developers means you’ve already lost that competition.Don’t be a developer incel, nobody owes you their time or code, especially if you can’t get any yourself. Good news is that with coding (unlike incels) it is perfectly legal and even encouraged to simply pay for it.Developers will work for a paycheque not your dreams of a yacht. If you’re not paying market rate then those developers will start to question what exactly you’re bringing to the table.Oh and they will 100% do that, especially out of spite if you give them a reason. If you think they’re not out there creating startups because they lack some special trait you have, think again. They are more than capable of removing you from the equation and Zuckaberging your dreams.That’s all the big mistakes I’ve seen, most multiple times now. Other than that managing developers is easy, bring them a big problem clearly articulated and they will work magic.","Hey.. fellow startup owner here..I just hired my first 2 developers last week. I understand your concern, as I'm facing them right now.Like the others have said... the developers should be good that is the most important thing. They should know their subject matter and should be well versed with your stack.Beyond that, another important skill is git, especially if you will have more than one person working on the same project with the possibility of working on the same file).And by git i dont just mean pushing and pulling, there should be a set method to merge changes and avoid git conflicts, this should be determined and explained/taught to them by you.(I literally just finished doing this 5 mins ago).Lastly, use ClickUp, its a good project management tool, break down your project into features and features into tasks.. assign them to a dev, that way they know exactly what they are supposed to do. The free tier would be sufficient for this.All said and done, I'll tell you one thing... managing a team is difficult, especially if you have less experience managing a team or group of people of any kind.But there's only one way forward, you will make mistakes and learn from it.","Get a process down that tracks work, and make sure the new devs move into it. GitHub projects, Jira, whatever. Pull requests, build tools, you'll need some dev ops - more than you have for a 1-2 person dev team. Doesn't need to be immediate, just will eventually.Hire on 60 day trial basis, if you can. Maybe it's legally prohibitive, but a 1090 for 60 days to try-before-you-buy would help avoid some buyer's remorse.","The last updated approach of managing a team of devs it to simply lay them all off.","Get a solid CRM, I love Asana for managing my team, timeline, productions, scheduling and incorporating client action etc. Tracking progress. Building out workflows and workflow templates. Keeping internal best practices well documented along with the myriad of other things that need to be documented. Automation is also a big factor in streamlining the process from onboarding to project completion.","Manage your backlog and make it as detailed and picked over as possible. Be aware of complexity and know who you need to trust to take on the hard stuff.","Learn on then job; make early mistakes, fail fast; don’t get discouraged and frustrated and become a better person for the future. This will piss a lot people you meet earlier in your journey.Hire right people, trust and delegate to them; and learn by observing.Get a consulting firm, outsource and manage; yet you still need to manage the consultant.Many ways to go, learning is a journey, enjoy it.","Finding someone who understands git and pull request that way you never have to talk to them","Be organized.","carrots and sticks will get them in line.do you need a product designer?","Use tools like Jira. Hire good leaders make sure no one has to directly overlook more than 5 people."],"points":253},{"text":["XAMPP not loading CSS images","Show us the CSS line in question as well as what should be an example of your website URL structure."],"points":1},{"text":["Please suggest some free hosting services for Node apps.","Vercel, Netlify."],"points":1},{"text":["Blocking an entire thread from appearing per keyword?","Are you talking about Reddit specifically? Because RES lets you filter by keywordhttps://redditenhancementsuite.com/"],"points":0},{"text":["s3 storage overkill for personal website?","S3 has an option to act as an HTTP file server, which you can integrate into Cloudfront (AWS-managed CDN) for caching and HTTPS. While it may seem like over-overkill, if you look at the data transfer rates for Cloudfront it could actually save you money.","It's good for learning, you can replace mysql with sqlite and use litestream.io to keep the db data also replicated in S3.But for just having something online, for this scale definitely gh pages or cloudflare pages would be a simpler solution.","Where do you need to serve your images? I used to store a json on the client side that includes the links to the CDN. Then you don't even need a backend, just update your json file and there you go - a computing instance can make it pricey on long run.Now I created my own backend (kind of a headless CMS) which handles all the automatic compressions to webp (thumbnail, medium,...) just for convenience sake as well as learning purposes :) but tbh it's an overkill if you don't update the website often","I think for the amount of data and traffic you’re talking about your monthly cloud bill would not be too high ( as long as you use SqlLite like one of the other comments said)Unless of course you start to get crazy high traffic","S3 is fine or just buy $5 vps from Hetzner or somewhere. On Hetzner all plans include 20TB traffic per month."],"points":43},{"text":["How to use event delegation for events that don't bubble?","I haven't worked with web components, but as a general rule a root-level listener with matchers seems like an unmaintainable solution. Any time you add a new button or change the behaviour, you'll have to add increasingly complex discrimination logic. It goes against the Open-Closed principle of SOLID.This blog suggests using connectedCallback() and disconnectedCallback() to add/remove listeners to specific children.","Why not just assign an event listener to that class .myinput afterwards, for any focus events? You could do this:document.querySelectorAll('.myinput').forEach(element => {  element.addEventListener('blur', () => {    // ... act accordingly  });});"],"points":2},{"text":["Feeling a bit frightened. Everyone keeps mentioning that DEVIN will take our place.","At this point we’ve had so many posts about this that it feels more like someone is advertising the bot by pretending to be scared developers.","honestly AI generated code reminds me a lot of when WYSIWYG editors were more popular, sure it works, but a lot of the time the code is absolutely horrible.","You're buying into the marketing. Just look at their website. It's a pile of shit. It tells you everything you need to know about them.","If your that worried then take up a physical trade like plumbing, because if AI manages to replace software engineers (which I don't believe it will, atleast not any time soon) then it's also bye bye to a ton of other professions, the only thing AI won't have devoured by that point will be physical jobs, builders, electricians etcUntil the whole smart humanoid robot thing becomes reality atleast, then we'll be working for them, serving our new masters on earth. Chin up bud, the futures looking bright.","Embrace the tools, don't fear them. I use AI every day now as a developer and architect. It's amazingly helpful.","not again...AI posts are the new JS framework posts.","Devin is a proof of concept. It's not inconceivable that companies will roll out demoes that look promising for VCs to throw money at them.Did nobody here watch an Ubisoft demo before? Back in 2012 when ray tracing was a distant possibility, every company was rolling out gorgeous demos they'd eventually not deliver on, all because it could conceivably pass as an MVP.This is nothing new. And when it comes to something as complex as literally mimicking a human brain (the more advanced between us, as well, because that's an efficient software engineer), I'm not sure I'm buying this half-baked \"demo\" from a company that didn't bother with a home page that doesn't look like it's from the 90s. Some people got a look at the preview and say it looks nothing like what was showcased before.Btw, Cognitive AI are hiring software engineers.","I suspect it’ll be a while before AI can fully replace engineers. On the order hand, I do believe that engineers who can effectively use AI to generate good code will replace engineers who can’t.","If you think an AI is going to replace you, might be time to find another job. You're already out of your depths.","Mods please fucking ban AI topics all together. It's time.","Stop it Devin","No matter what, it is coming eventually. Engineering salaries are so high, and the incentive to minimize spend in that area is simply too great for companies. I don't think that there is any reason to stress about it, though.Our jobs will change along with the tools we are afforded. More companies will develop more software because of this too, so there will definitely be more opportunities with these advancements eventually.","Just like every other post, no AI is not going to take our jobs. Like many other revolutions or technological progress, the efficiency will increase people their performance and act as aid/assistance. So yes maybe skill level will up a bit as required by more low level actions being possible by automation. But you will also be able to easier by the use of that AI. I have heard of DEVIN but didn't find much data yet. As far as I know Claude (the latest model(s)) are at the top of a 'single' agent AI or better said LLM. And it is quite good at certain things but if you have a degree or expert in a field you will outperform it. Not only now but will do so in the near future. We are currently also at the limit of at least local LLMs due to size/speed. The best/biggest models at about 70B+ do require a lot of VRAM (on GPUs) to work in an 'interactive' way. So bigger models will need to stay in the cloud on dedicated hardware to stay fast.Don't be afraid and just keep an eye on the progress while you keep developing yourself and doing your job. If you are learning or have learned well you will be fine.","We are done pivot now!!!!!!","It is definitely a rough time to be a developer compared to just a couple of years ago. The market has changed and we have seen big layoffs at the larger companies.It is important to understand that none of the layoffs we have seen has been dues to advancements in AI.They are result of a economic downturn after a period of extreme over hiring in tech.There is currently In my view, no reason to think that AI will take your job anytime soon! While ChatGPT is incredibly impressive it is no where near replacing a human programmer. Devin is just the latest hype in this area. It is important to understand that Congnitive labs (the company behind Devin) is not building a new LLM. They are simply using GPT4. They just built an algorithm that recursively prompts GPT. They have not really shown anything remarkable yet. All their demos could have been done in a fraction of the time by a human with copilot, and Devin is nowhere near able act as a fully autonomous engineer.But things are changing. Learning how to code is easier than ever, and very soon it will not be enough to be guaranteed a job. We are already seeing this today with a lot of programming jobs being outsourced to countries with a cheaper labour force.So the one thing you can do is to keep learning. Keep investing in your self. Learn new technologies. Learn to understand the current technologies you work with much deeper. Become an engineer instead of just a coder. Someone who understand that problem they are trying to solve. Why it has value to the end user, and to the business you work for. How a solution may impact other parts of the system you are working on.If you learn how to solve problems for people then you will never be irrelevant.","HOLY FUCK","“Water needs no advertising.”These posts and articles are probably written either by people who understand the industry from an adjacent headspace, or nothing at all.AI has some pretty crazy capabilities, I’ve toyed with it to a small degree. I was impressed with what it could do, but never felt threatened.When it can revise the front end to make clients happy, and efficiently handle multiple API calls, connections and write all the logic in between them yeah, maybe. Even then, who is gonna be auditing the code for relatability and correctness? Not a salesperson I can say that much.Let’s say it does though, the core development and computer science concepts you’re indirectly picking up on by learning React/Node will translate to any of the other thousand flavors of computer science. Keep at it.","AI isn’t a silver bullet. Currently at a start up that uses AI to “revolutionize” an industry and it isn’t happening and people aren’t buying it. Don’t think you have to worry about AI. You gotta worry about shitty management thinking they can replace devs and wrecking the market further.","In the long term, no one really knows because we're not sure if this tech has hit a plateau yet. A lot of people in this sub will insist that it has hit a plateau, but that's pure speculation. It's clear enough that some level of innovation is still occurring. Claude Opus is a clear improvement compared to GPT 4, which itself was a clear improvement compared to GPT 3.5.New models are going to come out soon. Will they be mind blowing or incremental improvements? By bet is the latter, but you start stacking these incremental improvements and eventually we're going to get to a point where, yes, you should be concerned about basically every white collar worker's job prospects.All of this is speculation. Anyone who tells you anything with certainty one way or another is either selling you something or, on the pessimistic side of things, protecting their own ego because they've based their identity on their professions (something you should never do, btw).","As long as clients keep not being able to clearly and comprehensively outline their needs. Im pretty sure we will be safe.AI will increase dev producticity but not replace us. Granted - might lead to a cut in workforce if demand cant keep up with it.Just my 5am thoughts on a sleepless night. Might be wrong🤷🏼‍♂️","I do not currently work in projects related directly to webdev (more backend) but I must say that ai-code assistant are very helpful and there is currently absolutely definitely no way they could replace devs and humans driving the projects","“By the way, what do you recommend learning next in the tech field?”How to find other jobs that aren’t in the tech field.","To some of the commenters: Crazy how many people in this sub seem to underestimate the implications of LLMs and feel safe in their current jobs. Good for you.","[deleted]","No one knows the future.In it's current form, even DEVIN is just a TOOL for you to use. Most execs, project managers, owners, and stakeholders don't really understand what AI can do. The worst thing you can do is resist change. Learn how to use some AI tools to accelerate your skills, like writing test code, asking it to optimize something, adding documentation to code, etc. It's your little buddy. It might replace us all in the future, but you will have to learn to adapt, like every other industry in the history of mankind."],"points":201},{"text":["Need Help in Deploying Please"],"points":0},{"text":["Which analytics should I believe in?","Sessions, users, and requests are all different data points. They cannot be compared.","Requests (Vercel’s metric) will count every file or page served, so for a single page view likely anywhere from 5-50 (or even 100) requests. A single visitor who visits your site will load a certain number of pages on average so it stands to reason that your user visits (Google Analytics / Microsoft Clarity) is a small percentage of your overall request count. You should check the definition of each tool with the provider in question to be sure how they’re counted. Something misunderstood by many seems to be that Google Analytics and any other JavaScript based analytics will not see a chunk of traffic at all because many bots, crawlers and spiders won’t load JavaScript at all. Therefore missing what might sometimes be a significant amount of traffic (requests).","Be aware that Google Analytics (GA4) is currently undergoing spam attacks on the google tags. You may want to filter out all events from Poland as that is where the attacks are being routed through."],"points":26},{"text":["Help!","Do you have a node_modules folder?","did you set the build command to \"npm i\" or \"npm install\"?","I experienced this issue before. Remove the module from package.json and reinstall it through npm.","Are you using render for Server side code ? Or their frontend hosting service ?"],"points":1},{"text":["CSS Transitions for background color","This is probably a quirk of css-in-js. You have to use camelCase for css prop names in css-in-js, so backgroundColor is correct as a prop name, but not as a prop value, that would still need to be background-color.Try changing:transition: 'width 0.3s ease, backgroundColor 0.3s ease'totransition: 'width 0.3s ease, background-color 0.3s ease'"],"points":0},{"text":["REST API design. Filter by IDs or by Names?","In my opinion, statuses should be word names. ID's (such as UUID's) should represent objects that must be unique. Objects like users, posts, messages, activities (logging), or any other type of permanent data that resides in the database.This way, you can instantly understand the operating process both in the code and in testing by looking at the network call or logs, or code. Using UUID's helps ensure that people cannot iterate and know any particular object by guessing/hacking, as it were.","that depends...naming = user friendly, you know exactly what you search foruuid = could be messy... don't really know what is what and could lead to gibberishgenerally it is better with naming, since it is more understandable, more of an issue is how you get the records via databasealso, is it GET request to get records or POST?GET Request has limit of 2K chars which could be an issue if you have more filters along the way.","Unless you have a need to obfuscate your operation use names. Your database should use enums for the status field, which makes name lookups easy, efficient, and easier for future you to troubleshoot.","Your ids/pks could be english terms, and have an index on them. Ex: Active status (id: \"active\", name: \"Active\")","IDs because that's what you'll probably use in your database - using strings inside a status column would be huge bloat.Ideally your API contract should specify the available status-values.","You should have a reference table of statues with their names and only link records based on ID between tables.That way you don't have any update anomalies in your data or typos to work against on the backend.When sending the data to the client unless needed you can probably drop the ID along with any other data that the client doesn't need."],"points":11},{"text":["PHP or JS for a social media site?","The one you know the most.Premature optimization is the root of all evil. You wont see much difference at the languages level in most apps.The scale at which language chosen had noticeable impact would be millions or tens of millionsAnd let be honest here, if you have that kind of userbase, you are not asking this question here","Well, this is like asking: Which is better: beer or wine?So: it depends on many thing, and it's also a matter of taste.","For backend it doesn’t really matter but for frontend a modern JavaScript framework like react or vue would give you that SPA feeling","I would recommend using JS and building on the APIs of existing open source social networks like mastodon. This allows you to focus on the app and not on how the internals work. I already build a few small apps on top of mastodon and it's quite easy.","There is no one that's better. Use what you can build the fastest with.","Others already posted that this is a matter of choice, or the language that you are more comfortable with.My question is - what is your goal? If you want to have the site up ASAP, you can pick any open source project that does that job (could be even wordpress + plugins) and adapt it to your needs.If you're doing it to learn about the code, pick the one you know best.","I'd say PHP but that's because I know it better but I'd say JS and PHP is pretty equal in this type of application. PHP could have a better performance in the long run but JS is easier to scale.For a faster and more scalable backend I'd go with GO.","The first version of Facebook was written in PHP...","Doesn't really matter that much. It's probably going to be IO bound anyway. I personally hate both options. I'd try doing it in Go just because that's what I want to learn next.","if its a niche social site, JS can handle a lot of connections than PHP.In any case it depends on your requirements. PHP and JS both are scalable. I would advise to use whatever you know better.","PHP","Which is better a tank or a helicopter?They do different jobs.","I personally find PHP one of the ugliest languages in existence."],"points":36},{"text":["Is hostinger a good site to register my domain with?","Check out Porkbun!","I know a lot of people love hostinger. But i hate them from the bottom if my heart. They multiplied my time spent on a simple site by 10 times. Sadly it was wordpress with divi, constant caching issues, wp rocket wasnt usable (instant resource issues) etc. Just fuel for nightmares.Other then that, nice support, overall good vps, just ruined for me personally..","They're a great company, service. I personally use https://namecheap.com for my registrations/renewals and use Hostinger for hosting/vps. I don't like putting my eggs in one basket, as it were.","I'm a huge Cloudflare fan.","Good company with good human support.","find the cheapest place to buy your domain, when the promo ends, just transfer it to cloudflare, they dont charge fees so you will pay only the original domain price","When it comes to domain names, I stay away from hosting companies.I would go with the most established registrars. As a domain investor, security and longevity is my top priority, but it’s a little different when you’re holding 6 figure domain names.","I use GoDaddy, Namecheap, AWS, Veerotech, and Hostinger for domains and hosting.I like all of them but my favourite is Hostinger and Veerotech. AWS is great but more setup is required."],"points":40},{"text":["I created a Vue like Web Framework using my own programming language","Looks fun, personally I don't like \"attribute logic\" (I call it angular.js PTSD). But you sure went all in and made something new. Nice :)","impressive 👏"],"points":12},{"text":["Creating a Web, don't know what to do, help lol","Pay someone who have any idea whats happening here.","Why would you take on a project on that you don't know how to do? That's a disservice to your client.If they want a website, without 3rd party branding and other limitations, they are going to likely have to pay a monthly or yearly subscription fee whether it's for a 3rd party service like Wix or for web hosting. I'm assuming that this client is a business; it's a cost of doing business in this century.","... just bail. This won't end well","Welcome to the complicated world of WebDev! :PIt's actually fairly straightforward:Basic: Vercel (Free Tier)Description: Vercel offers a free hosting solution that's great for static sites and works seamlessly with Next.js and other front-end frameworks. You can deploy a landing page quickly with automatic HTTPS, global CDN, and more.Pros: Easy deployment, automatic HTTPS, integrates well with modern frameworks.Cons: Limited to hobby projects on the free tier, with usage limits that might require an upgrade as traffic grows.DIY Level: Low. Requires basic knowledge of deployment processes and Git.Mid-Tier: Netlify (Pro Plan)Description: Netlify offers a more robust solution for static and dynamic sites with its Pro plan. You get features like form handling, serverless functions, and more.Pros: Easy to use, great for both static and dynamic sites, automatic HTTPS, continuous deployment from Git across all plans.Cons: Costs can increase with additional features and higher traffic.DIY Level: Medium. Similar to Vercel but with more features that might require additional setup.Custom/Hard: Self-HostingDescription: Use https://hostinger.com with either a Shared Hosting account, or a VPS for more contrl.Pros: Full control over the server, scalability, and the ability to host multiple services.Cons: Requires significant technical knowledge to set up and maintain, including handling server security, updates, and uptime monitoring.DIY Level: High. Requires in-depth knowledge of server management, domain configuration, and security.Recommendations:For the Client: Given the simplicity of the requirement and the client's limited budget and technical knowledge, starting with a free tier option like Vercel is advisable. It offers an easy way to deploy and manage a landing page without upfront costs.Domain Purchase: You should discuss with the client whether they would like to have a custom domain. Purchasing a domain on behalf of the client is common, but they should be aware of the annual renewal fees. I recommend https://namecheap.com.Handover: Create detailed documentation on how they can manage the site and renew the domain. This ensures they are not left helpless when you hand over the project.This strategy allows you to deliver the project within the client's budget while ensuring they have a professional and functional landing page.","Payment for things like hosting or at least the domain are basically inevitable. You can find free tiers for hosting, but the domain is going to probably be at least $12/year. Email probably also costs per month if the client wants email at the domain... recurring costs are unavoidable.And I recommend that you not take the job, especially for very little payment. Your client is wanting something outside of your skill set, and this is going to be far more work than you're expecting.However, if you must, use something like Wix... Don't try to figure out how to build it yourself. You'll only waste a bunch of time building something horrible and probably dangerous. And I actually hate Wix, but it's the better option here.","I don't feel like doing stuff from scratch if you rely on all the CSS capabilities of modern Browsers. Wix is for advanced controls, like guest books, appointment. A static page is best written in Visual Studio Code. You could start with a huge image from photoshop and then add the HTML you recognize. HTML export from word was pretty broken last time I checked. Also I find word more difficult than writing HTML.","They/you have to buy a domain name, which is paid by year. This depends on the agreement you have with the client.Then there is hosting. Sounds like you will be fine with static pages, most of the platform allow for a free tier for websites like this.However, the biggest hurdle as I see for you is to turn your design into html/css. Again, this should have been discussed prior to work, who is responsible for creating the website and not just the design. If it is on you, you can learn simple web dev in a month or so, almost without touching JavaScript. Or you can find a plugin to Figma (or wherever you created the design) that turns it to code. The quality though is usually shit","Buy a template","You can use No-code tools such as Webflow or FRAMER (my personal favorite). The UI of Framer is very similar to Figma, and you can use their plugin to easily copy your design from Figma to Framer.","Or you can leave the web dev part to me and after I'm done, you can deliver it to your client. Win-win.","If you can achieve your design in Wix, I'd probably do that. It has a CMS so they can actually update their website without you if they are willing to touch a computer, I know some clients like this aren't. Don't try and overcomplicate this unless you are really interested in learning to be a coder I'd say. I had a designer friend who would design and then build wix sites, it's a reasonable service to offer, especially if the client needs no fancy functionality and it's essentially a marketing site.","Use Vercel best choice for a Nextjs app or netlify also good one."],"points":50},{"text":["In WordPress which type of theme is better for clients? Block themes or classic themes?","The whole FSE system is a convoluted, confusing mess that gives you very little control over many things that just about everyone wants control over.Classic themes for sure, and if your needs aren’t too crazy use a site builder theme like Bricks(more simple), or a plugin that disables themes like Breakdance(more powerful).","Classic theme with ACF. Clients like to break things and block themes are just so easy to break, classic theme ACF is so simple and easy to work with on the dev side as well","Classic. Block themes are sluggish when rendering.","Whatever best fits their site's use case. Don't pidgeon-hole yourself into always going one over the other.","The block editor is not the easiest to work with. If your intent is to allow clients to use a theme builder themselves and edit their site, I’d recommend a theme builder like Beaver Builder, Elementor, or Bricks.","I would say block as it’s the future. Get them used to it. You can style around the block widgets and their built in CSS. ACF flex content is great but the future is to have everything embedded directly in the block editor."],"points":12},{"text":["What stack to use?","Why would you have to use both databases? If you have to I'd choose to save playlists and songs because in a none relational database and then save artists, users ect in a relational database then relate those users with the playlists or songs they have in the relational database. Probably do mongodb and postgres or mysql.For backend it doesn't really matter whatever language you like works, I'd do it in PHP or GO.Frontend I'd choose Vue but I think most people would say React or Svelte is better although I think it doesn't really matter. Then add in Tailwind for styling.","The one with open jobs in your area","Use whatever front-end and back-end you know the best or what was taught in class, those doesn’t really matter until you hit scale or need long-term maintenance, neither of which are a concern for you.I would ask your professor if a multi-personality DB is allowed. If so, use Yugabyte, since it allows you to have both postgres and redis (but it saves to disk) in one program. It’s marked as deprecated but this is a school project, so that doesn’t really matter. Unreplicated should be fine for your demo. If that is not allowed, deploy postgres and redis separately and configure redis for persistence. Put the music binary blobs in REDIS and the keys for said files into postgres. Turn on the REDIS REST API and use that to get data out, but deny uploads without an API key. This allows you to simply point the browser at REDIS and use the native html5 multimedia for audio, and let the browser handle the hard parts. If you do anything other than point the browser at an mp3/oog/flac/whatever audio file and use the builtin controls, you will have a bad time.Store all data except for the music files in postgres, and you should do decently well and not have a hard time.","For development, Next.js + Tailwind + Jotai(state manage)For hosting, Zeabur(full stack and database) or Vercel/Netlify(only static)Database: MongoDB"],"points":6}]