[{"text":["(WIP) First Portfolio Project"],"points":0},{"text":["Sync checkboxes with vanilla JS?","Okay, so at a high level.You need to store the associations.The browser cannot know how to associate random pieces of information.So lets do this together. Piece by piece... how would you associate or group values in js?You have 3 options ``` Arrays Objects Strings```"],"points":0},{"text":["Reminder: Stay away from hostgator"],"points":0},{"text":["First react project","Great job for a first project! I remember my first projects were a lot simpler than yours, and I remember having so much trouble getting react router to work lol. so all in all, congratulations. If you want to refine the project a bit, I'll gladly give some tips."],"points":0},{"text":["How can i remove an item on my header? (Wordpress, dont have elementor pro)"],"points":0},{"text":["Should a web developer upgrade dependencies in each delivery?","For security, yes. You need to actively scan your dependencies for CVE vulnerabilities. Full stop.","If this project doesn’t get updated frequently you could run into a situation where it costs a lot more time and risk to do a big bang upgrade than it would have if they upgraded more frequentlySecurity vulnerabilities as others have mentioned is another reason it should be done"],"points":0},{"text":["Another “is x macbook” enough for webdev (and others), thread.","I use my MacBook Air for same purposes and it works pretty well. My only advice is to get one with 16GB RAM. I think even an M1-16GB is much better than an M2-8GB combination.","8GB of RAM isn't enough for most people, I'd say 16GB as a minimum and 32GB as an ideal."],"points":4},{"text":["Electron Admin Dashboard","I would suggest you to use some of the \"battle-tested\" solutions and platforms for ecommerce, specially because of this login/security/auth part.What is your setup, platform, etc?","If it's working already, just keep it. If implementation isn't finished, ditch the authentication IMO. When it's a personal project I like to keep it simple as possible so I can use it ASAP. :-)"],"points":0},{"text":["Recommend me best hosting sites for a small business.","Most shared hosting providers over sell their services so they tend to be very slow. Stay away from any of the main results on Google (bluehost, hostgator, GoDaddy etc.)I would expect people here might recommend using AWS but personally I found it to be overly complicated.I settled on Digital Ocean for small to medium business websites. Their shared servers start around $7/month, though I'd recommend getting something a bit more powerful depending on your needs. I haven't had any major slowdowns or outages in my two years of experience with their services.","fastcomet","Are you designing/developing your own website? If so, what is your tech stack?There is a cloud resource right for you, just depends on your tech stack. LLMs like ChatGPT can help you figure them out quick","I use cloudflare for domain and vercel for hosting. They work really good for me"],"points":0},{"text":["URL patterns and methods for MPA"],"points":0},{"text":["Authorization/ OIDC advice"],"points":0},{"text":["why do virtual queues exist?","I am just guessing - issue is probably not in the server resources but how the purchasing of tickets is handled. When someone is purchasing ticket he is \"locking\" one process until he select the seats, check options, enter payment details etc, and until he finishes the process it stays \"locked\". Question is how many of those open processes they allow, to not oversell tickets.","A couple of reasons. One reason can be server load. A thousand or millions of people refreshing a page that shows your spot in queue isn't as heavy on the server as thousands or millions of people constantly refreshing a seat availability chart for example.It also makes it easier to deal with availability.Say you have 1,000 tickets for sale. 700 people login at the same time and each want to purchase 2 tickets. As they are picking seats (but before they have purchased) there aren't going to be enough availability. If you just take the first 1,000 seats selected (but not purchased) then it's going to appear as sold out. But then maybe a bunch of those people decide not to complete the purchase or want to change seats.. Now you have seats suddenly available again. If you just count the seats as not available only when actually purchased then you have a lot of people selecting seats and going through the process only to get to the final payment step and the seats are not available anymore.If you instead make a queue where people are given a certain amount of time to select their seats and complete their purchase, then when the next person is up those seats can reliably be shown as sold or available (depending on if the previous person completed purchase or it timed out, etc)","Your website may be able to handle millions of requests at the same time, but other third party systems like a payment provider maybe not. Also, scaling up to handle millions of requests can be quite expensive. Even if you use a serverless cloud approach, it is still expensive to fire such a lot on the whole application. If the event only has a limited amount of tickets available, there is no need to scale up everything.At last, there is also a business or usability aspect. For most events, a ticket is reversed once you are past the queue. It's really a dick move to give someone the change to buy a ticket, but at the last moment refuse because you are soled out.","On IIS it's 5000 requests per CPU max, however the server is setup there's always a limit. These tickets companies aren't going to prepare for some huge ticket sellout, cuz it'd be too costly.","If you had million of request to buy a ticket at the same time you are probably doing something wrong. Apart from that the problem is mostly about being able to choose your sit.","because they are waiting for their turn.","Better to introduce a capacity queue than have your site fall over.I like how lego turn it on for some of their releases, I've seen it for two Star Wars events and appreciate why they do it, even with autoscaling resouces are not intimate so spreading the load during a few key time slots is great planning and stops the system failing. All for for it when its well implimented.","for things like this its not really a question of how many requests per second a webserver can handlethe request rates for particular actions get throttled to prevent mainly to prevent issues with duplicateseg 2 people buying the same ticket/other limited items","Servers not being able to handle the workload is excactly why. And sometimes even the application will not make sense even if the servers can handle it. Let's say you have a cinema with 100 seats. When a person logs in they are shown all the free seats they can choose from. They check with their partner where to sit and it takes a few minutes. What if there's a thousand people doing the same. Once they have deceided on seats and selected them others will have snatched them up and they'll no longer be free. Which starts the process over (if there's even any seats left)Spacing the customers out lets us make sure the ones who are let in will have a far better experience. Building booking systems is complex and takes a bunch of iterations. The stakes are high for the users and there's no do overs since all the relevant traffic is usually over a few hours.","Okey, being argentinian there is an example that will make it very clear. Imagine the corralito, when everybody wanted to retrieve their money from the banks and the banks hadn't enough resources and everything collapsed. This is pretty much the same: if everyone wants to connect or access to resources at once, the web server will be incapable to handle all these requests and go to shit. That's why they put some (well, a lot of, in case of tickets) users on hold until the server is able to process their request. There are other methods to aliviate this, like proxy servers and so on.","Depending on the scenario it could be just server resources, or it could be external resources.Say it's some big online game releasing, they're going to be estimating how many servers they need. If they're over the mark of how many server resources they need, they're paying for them anyway. If they're under the mark and don't control user load some how everyone has a bad time. And even the best auto-scaling isn't going to respond as fast as a herd of wild users can go. So you limit them behind a queue once things get questionable.The other bit for things like online stores is that no matter how fast your website is, you have no control over how fast or slow the ones you work with are and you need to deliver correct responses regardless of how long you're waiting on the other guys. Say it's a store, they're probably backed up to an ERP(Enterprise resource planning) system and a payment system. ERPs are notoriously slow and a pain to work with, but if you don't get the right entry your shop doesn't do it's job right and inventory generally has limits so it may not be possible to properly retry later. Payment systems used to be the same way, some still are, but no customer in the world wants you blindly re-trying their credit card to try and get it through faster, and no boss in the world wants you to provide a service without someone paying for it. So if there's a big event/sale/release coming up, limit users to prevent issues or actively degraded user experience.I say this as a Gamesworkshop player who was once too stupid to realize I was fighting with a thousands scripts as my card bounced a half dozen times and suddenly what I was ordering was gone. They've since implemented a queue, so at least I know when I don't have a prayer of getting something up front.","Serious question: why do people feel compelled to mention the title of the post in their description?I mean get that there was a trend of posts that the description was one word: “Title”, meaning I have nothing to add. But why do people feel the need to mention the title when they go on to explain in further detail? Do they think that we will forget that the post does, in fact, still have a title?OP, please, help me understand."],"points":65},{"text":["Job interview preparation -> what technology do you recommend for these subjects?","I don't know whether the second topic is a fair one to request from a junior developer given most junior developers, (especially PHP ones because of tools such as xampp, wamp and laragon) have their coding environments on their own PCs."],"points":1},{"text":["CSS framework that makes proper use of variables?","Take a look at Open Props","Bulma variables: https://bulma.io/documentation/customize/variables/","Just create your own CSS variables and assign them to :root","Easy, Tailwind. https://tailwindcss.com/ https://tailwindcss.com/docs/using-with-preprocessors#variables"],"points":4},{"text":["[Showoff Saturday] A social media site for people living abroad built from scratch!"],"points":0},{"text":["Pokemon Quiz Generator","If you click and drag the pokemon's image you can see which one it is. If you open the image in a new tab it tells you its pokemon ID, which you can then look out on the internet and figure out its name."],"points":0},{"text":["I Build a Full Stack Notes App Using React and Supabase"],"points":0},{"text":["Has anyone used zed.dev editor? How is it compared to VS code?","Its meh at the moment. There is a lot of qol stuff missing.It feels fast, but not an editor i'd use as my daily driver.I dont think wallaby and quokka is available yet?Give it a skip for now.","Commenting to follow this thread!","I just downloaded, tested for like 30 seconds, then said loudly: I don't need another code editor, and deleted it. Sorry if this hurts someone.","The design is nice, that’s about it. No reason to use it over VSCode or neovim","Looks and feels nice but I don't really care for the figma like cloud functionality and am kinda concerned with the security implications of that. Also I kinda feel like saas stuff nigh eventually creep into and ruin the product. Current status is, i like it but I don't trust it enough to use."],"points":2},{"text":["Is GoodRelationship is still useful?","I mean. It’s yahoo, 15 percent of 0 is still 0","If you can find her I think a good relationship might work. Okay real talk though, what is this? Some sort of API or new js framework I didn't hear about?"],"points":3},{"text":["How to upload fonts directly through server through FTP in a way I can use those fonts the same as I use adobe typekit in Elementor? (ex. can use any font anywhere I want and not just oh, this font is in all header 1s and ext...)","Hire a dev, or use google web fonts.Any font you upload needs a license. Yes even ones you downloaded for free.You need to register the fonts in the browser. To do this you need to either edit specific php or html.Make a list of all the stuff you dont know how to do and pay someone to take care of it.Time vs Cost. In this case cost is going to be cheaper."],"points":3},{"text":["How would you suggest I proceed with the following task?","Most IDEs will do this for you if you format the comments in a standard way for your language.Random inline comments within code don't typically correspond with useful documentation, but if that's what you want to do, look into lexical analyzers (aka lexers) for each language to tokenize the code. Regex could also work, but would be tedious for all the different possibilities.","This is one of those things where prior art exists and you should use it. Double especially if you're working with other people and not just doing this as a personal project.Whichever language(s) your project uses ought to have a well known doc utility. Use that for each. You can probably find them by searching whatever package index you use for \"documentation\". And if your language doesn't have a package index, ask someone with a beard (preferably gray) what they use.And if you absolutely insist on rolling your own, you'll need to learn how to use a parsing library for each language you're concerned with.Parse each source file into a data structure, search that data structure for comment tokens. Figure out what to do once you know where all the comments are to associate them with an identifier or block of code.Gather that information into another data structure that you can render out into a presentation format like HTML or Markdown.","Since every language has different formats for comments, you’ll likely want some kind of AST parser for each language that you support.It won’t be purely comments, since I imagine you’ll also want to capture method names or other context of the comments, so the AST will make that easier as well.","That's basically a rudimentary version of swimm. Of course, swimm is a paid solution though. https://swimm.io/","Write or find an ast that takes in multiple languages.I assume you want to do this in the browser, so you might need to write your own.Once you have that. You can extract the comments from each language.You can of course do this with regex as well. But this is error prone.You have two pitfalls.Poorly or abstractly formatted comments, and enforcing a comment / doc standard.Sounds like a lot of work, for very little payoff, thats because it is.","Write a script that iterates over each file in the source code. It should read each file as a string and capture all the occurences of a comment (i would use regex). After that you can do what you want with them.","Each programming language has it's own comment syntax i.e // is used for single-line comments in languages like C++ and Java, while # is used in Python so you'll have to add that into account. What programming languages are in the current project you're trying to do this for?"],"points":13},{"text":["[Showoff Saturday] Personal website | minimalistic / dark theme","Not bad, could improve with some crunches and benefit from a high protein low carb diet. This will add some good shadowing to the core area"],"points":1},{"text":["Testing performance for chrome extensions"],"points":0},{"text":["Need help for a website thats only designed for two people!","Notion... my dude.","The simplest? Use next.js and react due to amount of adoption. Tailwind for the CSS (ships with next, also lots of premade stuff on the web). Naturally then JS, or TS since you're from an OOP background ( read types ). You can then select your DB or whatever other services you need. Your largest struggle will be the UI but premade react and tailwind will help.Hosting you can probably use vercel (they make next). I think it's free for small sites but don't quote me on that. Could also use something cloud if you are familiar with any AWS/GCP/AZ."],"points":4},{"text":["[Showoff Saturday] GPTOS: An Android Assistant Inspired by Rabbit R1"],"points":0},{"text":["Can't login to this website. Tried different browsers networks etc. but the problem only occurs on this pc. there were some api errors in console too. What could it be the problem?","Try clearing your cache. If that doesn't work contact the actual website owners.","Maybe a browser plugin ?"],"points":2},{"text":["Do web developers usually have fixed 9-5 schedules, or is their work more based on project timelines?","Most Devs in permanent roles in the west are on a 9-5, 8.30-5, 9.30-5.30 or similar shift, but as for how much work we actually achieve is entirely on a dev by dev basis and how much work there is to do.I am on 37.5 hours a week (full time in the UK), but in terms of actual code output and writing code is likely no more than 10 hours a week. Most of my time is spent doing nonsense work like meetings and helping QA not fuck their job up.","I work 9-5, but I have mostly 30-35hr weeks with the 60-70hr weeks here and there.I prefer it that way tbh. I am a weirdo who likes those tight deadlines and crunch times. Spreading out too much heavy mental work just leads to burnout and constant mental exhaustion. But I can do a ton of work in a tiny amount of time when I'm super focused.","I spent many years working 9-5, 9ish to 5ish, etc. Currently working 10-6pm for more overlap with coworkers in other time zones.There are plenty of companies that’ll try to get you to work more, but it’s important to remember that tight deadlines are generally artificial in nature. Don’t let them overwork you just because they planned poorly.","Basically, but I'm remote and my job is pretty flexible. I usually work 7-3ish but it doesn't really matter as long as I'm getting my stuff done.","If you have a full time office job you’ll do full time office hours.It’s not project based, even if you’re doing nothing as a full time employee they’ll want you sitting there twiddling your thumbs.","Senior DeveloperI used to spend around 40-60% writing code but currently it’s gone to around 20-40%This is mainly due to running a lot of meetings and working on cross team initiativesI do miss coding I find it much easier than writing technical docs, running initiatives etc but it’s required for progression","Yes","9-5, but some days I’ll do nothing and some days I work well past 5, usually on the lesser side.","Most jobs are 9-5. Remote positions usually allow more flexibility but generally still based around an 8 hour time block as that's when most of your co-workers and clients are online.","That question can’t be answered bc it’s not specific enough.","No, it all depends on the project.For example now I have to work with some vendors in India, I usually just take the morning off and start work around 2PM, so I can have some overlap with them.Same goes for EST vs PST, I’m in EST, half of my co-workers are in PST, so you can’t really do anything 9-12.","Usually 9 to 5 but I work remote and it's pretty flexible, so if I have something to do the afternoon I can and I work at night, as long as I do my work it's fine","9-5 represents core business hours, there’s a lot of flexibility for developers given they meet deadlines/outcomes, but you’ll typically need to be available during those times to meet with your team or client(s).","I work a regular 8-17 with a one hour lunch and flexible hours. Overtime can be mandated by our boss but the only time it's ever happened was during the pandemic. And it was more making sure we were paid for the gruelling hours people put in voluntarily because we had health care systems that needed to work."],"points":100},{"text":["Weird things engineers believe about Web development"],"points":0},{"text":["Webdev or Cross-plataform developer for cloud computing."],"points":0},{"text":["How to Build a Personal Brand as a Developer","Seems like a huge pain in the ass. I'd rather just work for a company, I don't need a personal brand."],"points":2},{"text":["How to preserve pitch while using Web Audio API?"],"points":0},{"text":["DX for a web framework","Object based. Least chance of some lobotomized developer screwing up simple function calls.Easy to validate, document and debug.Also, your query syntax could use some work. You might want to invest in writing a tokenizer / parser. Because again... some midlevel chewing his keyboard waiting for chatgpt is not going to rememeber comma seperated queries."],"points":0},{"text":["is it still called Server-Sent Event when you don't use EventSource on the frontend?","I didn't read the article, but it seems like they are using long polling. It's a valid approach, but something like web sockets is better for most use cases, it us harder to set up though"],"points":0},{"text":["What is the ideal Tech stack to build a website in 2024?","The one you know and fits your use case.","I hate how 50% of this subreddit is cringey clickbait articles made by a bitcoin enthusiast who finished an HTML course and asked GPT for some buzzwords in webdev.","There's no such thing as an ideal tech stack (in general). It depends on the market you're in, the project you're working on and what the customers need and want. Use whatever you like, as long as it works at the end of the day.","Flash","Depends on the project. Does it need a backend? Does it need a database? Does it need to process payments?"],"points":62},{"text":["I hacked a BIG prize web game hosted by a popular supermarket chain","Chances are, they probably didn't care. These types of games are solely for marketing, the prices they give away are priced in already. They don't care who wins them or why, as long as people engage with the game and therefore their brand. I worked for a marketing agency back in the day were those types of games were popular on facebook. Nobody ever gave a shit about cheaters, as long as enough people saw and played the game and left their data.","I had a similar story. A well known company that makes high end speakers and headphones was doing a 12 days of Christmas promotion years ago. It was a scratch off game you would go to every day and scratch to see if you won. 80%+ of them were please try again. Smaller prizes were $5 gift cards. But some were in the $500 Amazon gift card range.The game worked by visiting a site and you click a button to take you to a unique url that had a specific image with a box in front of it to simulate a scratch off ticket. Once you scratched off, it would lock in for your one ticket per day so you couldn’t scratch off anymore.I wrote a python script to scrape for the url, visit it, download the .png image, OCR the text of the image to see what the prize was. Because the scratch off didn’t happen, it wouldn’t lock in for the once a day scratch.So I run my script for a few hours and have it log all winning URLs to a database that I can look through later. When I go check, I see it logs over 50 winners. A couple $500 gift cards, a solo stove, a pizza oven, etc.So I look through the list. I find one that is a nice Patagonia zip jacket. I open up the url, scratch the box, sure enough, won a Patagonia jacket.These types of games are super easily exploited and they don’t really care. It’s mostly about marketing. All of the prizes are already paid for and written off most likely.","Good one. It's funny how careless most of the companies are for this type of things. I bet that some hackers take advantage of it can find their way for free supermarket food for lifetime","As someone who has set up similar kinda-shitty online games for marketing - nice one dude. I would have seen that score while reviewing the results and just been like \"hey guys! Someone hacked that game we threw together in like a week!\"They never go to an agency that specifically does online marketing games/contests, and they never give you enough time to actually do it well. Every online game/contest/etc done for marketing purposes is basically a high school/college programming project with a good design on top of it.","In the times of Flash games like 15 years ago there used to be plenty of highscore/ gaming contests where the ones with the highest score would win a prize. However, you could just kindof decompile the swf file of the Flash game and find the \"method\" for point submitting (usually post requests to the gaming server), then forge them. I won some nice prizes in these times. don't judge me too harsh, I was really young and needed the money..","It's depend in prizes. I won a huge (not really, just 100 usd) prize from European supermarket chain.  But they required my passport etc. I refused and give up prize.","Good on you OP.It's all very well, if they don't care about cheaters, and simply regard the prize pool as a sunk cost. That's just an operating decision of their business.But they darned well should have responded to OP carrying out Responsible Disclosure, and at the very least acknowledge their effort!If a company just ignores cyber security concerns, even if they're no big deal, then in future if anyone else now finds there's a vulnerability in their back end, that exposes an important database, leaking employees' or even customers' personal info, why would they or anyone else bother attempting Responsible Disclosure again, if they're just going to be ignored, instead of just publishing the vulnerability, or even selling it?","You tought they’ll give you the cybersec role don’t you? 🤣","Jesus Belgium and cybersecurity lately...","Did something similar a few years ago, won a lifetime supply of something and some merch. I claimed it, I'm not ashamed to admit it","And free laptops for all. Yes, I know who you are."],"points":437},{"text":["Web Clip / Apple Touch Icon is busting my balls!","The iPad that works is on iOS 10.something, the two that will not work are both on iOS 9.3.5Yes I know both OSes are old but those are the free ipads I have to test with and nothing I'm doing on this site is particularly advanced, feature wise. Its basically just a page with larger elements that are made for/easier to touch.Anyhoo, the touch icon something that iOS 9.3.5 simply doesn't support? Hrm google tells me this should be working all the way back to iOS 1.1.3. I'm stumped."],"points":0},{"text":["Can you help me disentangle those concepts?","Go to amazon.com, the site loads quick, and shows the book I linked. How? When I hit the site some dns stuff happens, and I get directed towards a server, the server picks up the url param (Piranesi-Susanna-Clarke) , asks the database for all the data about slug. The database responds with the data. The server then generates an html file and sends it back to the client. Cool, that was quick, the browser doesn't have to do any work. That's called SSR.But shit, theres a shopping cart, that I want to be able to add items to? I have a button that needs an event handler. This requires interactivity on the client side. So the server also sends back a bunch of javascript that says \"Hey when user clicks this button, add url param Piranesi-Susanna-Clarke to shopping cart\". So that's cool, we click it, it sends a request to an API endpoint that says Hey user added this to shopping cart. Cool. Oh wait not cool, because my shopping cart item didn't update with the 1 icon, to show there is something in my shopping cart. We don't want to generate an entire new page on the server, so we use client side code to add a 1 to the shopping cart icon.I hope this helps illustrate why and when you need SSR, and why and when you need Javascript.I think the main concept you are misunderstanding is that SSR (server-side-rendering) doesn't mean that the Server in SSR is the same as your server for your API. You can use SSR to fetch data from a CMS, that means there are 2 different servers being used to build your pages, the SSR server, and the CMS, which acts as an API for a database.","The concept of frontend and backend can be quite a lot for a newbie do understand so don’t sweat it if you don’t get it straight away.To answer your questions:Django is a full stack framework, you can use it to create a frontend and backend together with the frontend pages rendered on the server, hence you would say it uses Server Side Rendering (SSR) but this isn’t really a requirement - you can add Django Rest Framework and never touch any front end templates or forms.Generally speaking - lots of web apps use a separate frontend and backend, lots of web sites use a combined front and backend, if you’re just presenting information to the user and don’t require much input from them then you probably won’t need to separate them.Generally, yes. Netflix is probably the best example of an SPA, there aren’t really any other “pages” just a list of shows, click on those and you get a modal with the show info, click again and you get the video player, no page reloads - just seemless transitions from one section to another.Another way to think about it is this - if you were going to build an app based on your product you might want to be able to feed information into your database without writing unique interface to do it, this is where an API is going to come in and mean you can have the same logic and validation on your website as in your app."],"points":2},{"text":["Terrible website speed on mobile","Calculator with 13,000 files which can be achieved in ten lines of code","Wordpress introduces a lot of overhead which is not needed for such a simple application. Plain HTML, CSS and JS (or jQuery/Alpine) would work just fine. The calculation method seems simple enough that you could manage it without needing to store constants in a database, and from what I can see the calculation just updates via JS?Wordpress is inherently not great for Pagespeedinsights scores on mobile. There are ways of making it better, but honestly I think it would be quicker to just move this to a plain HTML page.","Reduce the font sizes on mobile they are huge","if you ask chatgpt to code this from 0 and guide it along the way you would have more success than this.","Work on the following:1) Have a good server 2) Reduce the number of plugins 3) work on theme (reduce TLS, assets usage ) 4) avif images or webp 5) LazyLoad 6) Remove wordpress bloatAnd there are many other things to do to accelerate the speed.","Ouch. Not as bad as some terrible sites, but it is still pretty awful for a simple calculator app.One of the metrics that Lighthouse shows is Time to First Byte. The results for this site show: TTFB 54% 720 ms. Almost two-thirds of a second just to load, analyze and process the backend code. That is horrible. Contrast that with a website that if made by hand/scratch, would typically take under 10ms on the backend.Combine that with the other metrics, such as overall speed of > 3 seconds total load time, unused CSS, layout shifting, large resources taking up over 6MB!!, 29 javascript resources, 22 CSS resources, and you have this abomination as a result.It is a bit embarrassing, to be honest.First piece of advice, learn what your calculator has to do, operation-wise. Then go learn Javascript and make a simple website. Then go learn how Responsive design works. Build this from scratch as a good learning exercise.It is all doable. Or just ignore our advice and use WordPress.","You can use WP cache plugin to optimize your pages and images. Also you can try using Smush. Make sure your PHP versions is 8+","I’m guessing it’s the clunky Wordpress bloat. Stick to popular plugins if you must use Wordpress is my suggestion, otherwise simplify this and use a headless CMS.","[removed]","Depending on what you want to do further, you can go over to more of a static page and even host it on GitHub if you go for performance and is still free. Otherwise, check your wordpress setup, starting with a light team and removing any unnecessary plugins as well as blocking or removing anything else that you don't need or use. Wordpress can be fast, it is also used a lot for sites but you just need to do the right things and the right settings. Also if your host is a problem using a (free) CDN like Cloudflare can help but does make everything more complex than what you may need. Also I visited the site and it seemed to overflow and doesn't seem to be designed for mobile yet. Normally wordpress does that quite well automatically, so you either break things or are using settings for the elements which are not as they should be."],"points":45},{"text":["Designing my own Streaming Platform","Wrong title! Correct Title: \"Designing new skin for Netflix for my own needs, is it feasible?\"","I want to design my own Streaming PlatformWell you could throw some designs together in Figma.Then you need a few hundred million dollars in investment, and you'd be good to go.","Use plex and host your own contents","Even if Netflix had a public API, which they don't (they used to), I think you're likely underestimating how big a job building a custom frontend for it would be. With no API, you're going to have to scrape the data yourself (probably against their TOS but even if not this is not a good idea -- it'll be a lot of messy work and it'll end up brittle). Or maybe someone's already done that work and a 3rd-party API exists.If you don't want to build a whole frontend but you're still dead set on changing the Netflix UI, maybe (maybe) it might be possible to do what you want, depending on what exactly what you want, by adding a custom stylesheet which applies to that domain. This could be done with a custom browser extension, or depending on the browser even potentially by configuring the browser to use a specific CSS file for a specific domain. If you need to do more than change colours and hide sections you will need to do some scripting too, which puts you in the realm of a browser extension or a custom user script. I don't think any of these are good ideas, though. Even if you get it working great now, it will be brittle; it could break at any time.I would've set up the platform to be almost like a tv where you switch channelsWhat would be on each \"channel\", a single genre? A single show? A single episode? Maybe I'm misunderstanding, but when you say like TV channels I think of a huge long flat list of numbered channels. If you expand that to Netflix's catalogue now you've got tens of thousands of \"channels\". If a new show gets added are the channel numbers now different? With a list of channels that long you'll need a listing for them, right? Oh wait, there's already a listing for them: the existing Netflix UI.You can think of the existing UI like a list of channels anyway, don't you think? Vertically you have different categories like \"your favourites\" and \"because you like xyz show\", and genres. Those are sort of like channels, no? So, up and down are channels, then left and right is for specifics. If that's not similar enough to a pattern your dad understands, maybe the simplest thing to teach is the search function. Voice search tends to work great and be less overwhelming so maybe teach that if your system has it.Keeping the existing UI has one major benefit I didn't understand in my earlier years (when I too tried to make things \"easier\" for family, girlfriends, etc): if he's using the default, it's the same as what his friends see, and the same as what strangers on the internet see. When those other people talk about it, it's actually relevant to his experience too. And what he sees is what they're used to too, which means he can find help from people other than you. On the other hand, when your custom solution inevitably breaks, you're the only person he can turn to, and you might not have time or he might not want to bother you.","Streaming is hard. However it’s not impossible.You would need it to be cloud hosted on azure/aws/ something 3rd to get enough bandwidth if you expect more than 2 viewers.Then look into how twitch and YouTube are doing their streaming backend.","What a brilliant idea!Why yes, we have 4 developers and 2 designers that specialise in this. They work in shifts, not only to develop your brand, but also source the highest quality movies.All content is curated, translations are are available, and we can even localise the subtitles.Of course we care about your security, as well as the millions of users that will sign up to your exciting new service.This idea is great, its amazing that you are sharing it out in the open like this. We have the team, if you have the dream.","https://github.com/new92/netwix"],"points":35},{"text":["how to make a form appear right beside the sidebar??","I’d suggest starting here - https://www.w3schools.com/howto/howto_js_popup.aspThis gives you the basic code and you can adapt from here.Pop ups are really common so you could search stack overflow for answers too","Utilise the dialog html element for this. See hereYou can do this with JS like the other comment suggests however better to implement the functionality in HTML if possible due to it being quicker to read etc and a built in browser functionality.","What you can do is have the form already on the page, give it a css class like \"hidden\" and an id \"sideForm\"Use javascript Document.querySelector('#sideForm').classList.toggle('hidden') on a button or a link that should show the formHave css something like .hidden { display:none;}This is the most basic way to hide and show an element. You can change the styling on the side form, experiment with it and maybe introduce transitions but this should help you a bit"],"points":2},{"text":["how to make a form appear right beside the sidebar??","What you can do is have the form already on the page, give it a css class like \"hidden\" and an id \"sideForm\"Use javascript Document.querySelector('#sideForm').classList.toggle('hidden') on a button or a link that should show the formHave css something like .hidden { display:none;}This is the most basic way to hide and show an element. You can change the styling on the side form, experiment with it and maybe introduce transitions but this should help you a bit","The most basic way to do this is by using links and files.","You can do this using the dialog element in HTML.","I just completed coding a sidebar and now i dont know what to do next. How do i program this in a way that if i click a button in the sidebar, a form will popup on the same page, where in it can ask the user for input?\"what does it mean \"coding a sidebar\"? you want to do a proper form opening as a modal? learn how to create modals.otherwise, show code, it is completely unclear, what you want to do","Look into jquery, and add that to your site.Make a button element, and have it .hide() or .show() the form container element."],"points":17},{"text":["Why do people say that NoSQL isn't able to do relational data when you can do .populate()?","RDBs dbs have native referential integrity. If you have a highly relational schema, having your DB understand and enforce the relations all on its own is a real benefit.If you're using NoSQL, you have to write all that logic and functionality yourself. (or find some 3rd-party dep to do it for you).NoSQL is great for huge buckets of non (or loosely) related data (analytics, geolocation, etc). RDBs are great at everything else.Also, this:things are so much more organized in a NoSQL document compared to a bunch of columns in a tablekinda makes me thing you don't know what you're talking about and are just fishing for validation.","All database solutions have tradeoffs. SQL databases are very good at both modeling and querying for relational data.Youre allowed to use a nosql db if you’d like to. There’s no conspiracy making rdbms the dominant format, it’s just flexible and good at what it does. AWS is just as happy to charge you for a dynamo or mongo instance as they are a postgres instance.","SQL technology has been tuned and refined for the last 30 years. It uses a declarative language to specify the data that should be returned from database. It pushes the processing to the server, where it can make use of indexes, statistics, query plans, parallelism, locks, cached data pages, prefetch, transaction logs to optimize the execution, while still ensuring integrity. It is also durable, i.e. if power goes down on server, it can recover to a consistent state (rollback, roll forward etc). This can be very important aspect for an app that can run for many years. It needs to provide precise reports at the point in time they are generated, e.g. accounting, financial domains. It needs to run many queries quickly, for multiple users, while only loading necessary data to conserve cpu usage and disk access. This was initially needed because dbs ran on hard drives. It has multiple options for transaction isolation, like read committed or uncommited. It has deadlocks detection, nested transactions, triggers, stored procedures, security permissions for many objects in database, encryption at rest, scripting language like T-SQL, P-SQL, Dotnet CLR or Java or C dlls. These scripts run on the server itself. The server hardware also has different features like redundant PSU, ECC memory, server-grade cpus that run at lower frequency for stability, proven compatibility, hardware RAID etc. If you try to run similar app on a no-sql engine, the app will need to do much of the heavy lifting and when things go wrong in production, you can't easily debug it. The SQL servers come with reports for activity, activity managers, ability to detect long running queries, detect locks, database maintenance, data import/export. Also the entire database structure is scriptable and can be used in version control software (git) for teams to collaborate upon. It has support for updating data structure in production, adding/editing columns etc, by running DDL scripts. The list is very very long...","MongoDB doesn't have .populate() that I am aware of. You can use an ODM like Mongoose to do that but then you are using schemas which take away some of the flexibility of a NoSQL database.ORMs/ODMs trade performance for ease of use and abstraction. There are plenty of SQL based ORMs that also make it really easy to get relational data without JOINs because it is abstracted away but may not be as performant.When working with a lot of relational information SQL database is going to be much faster. NoSQL definitely has its strengths and can be a much better choice than SQL for certain use cases but complex relational data is not one of its strengths.","Not only join syntax. But also foreign key integrity, Amount data to update when you change the data. You didn’t mention transactions. Most of the tests are inclined to punish opposite technology. You are allowed to use both RDBMS and non-RDBMS in your app. If you need integrity - pick sql. If you need availability - pick noSQL. You have more complicated structure? - use both. Meanwhile I’m using Postgres, Dynamo in one project for 10 years. Just pick and combine whatever fits better to your needs and requirements.","If you have a gut feeling that mongo might have a comparable performance to more traditional SQL databases you should totally try to run your own benchmarks! It could make a pretty interesting blog post.FWIW I did look into this a bit myself and found an article from a couple years ago that did some comparisons: https://www.enterprisedb.com/blog/comparison-joins-mongodb-vs-postgresql it looks like Postgres as least is a lot faster at joins than mongo.The hacker news thread also contains some useful context from the author: https://news.ycombinator.com/item?id=22834036It doesn’t look like they used the populate method, but I’m not the most familiar with mongo so not sure if that would have had meaningful impact on performance.One thing that stands out to me that gives Postgres a bit of a leg up against mongo is the fact the query planner will change the strategy it’s using depending on the underlying data. I suspect that for more complex queries Postgres will out perform mongo as a result. This is just from my intuition though! I could be wrong since I haven’t run any numbers myself, but if you disagree, you should totally try it and see what you find!","I've used MongoDb in the past, now I'm exclusively using Postgres (for the reason it tends to cover 90% of the use cases I have). That being said and to answer your questions, it's not the joins that are different, but referential integrity.In MongoDb you can emulate join with lookup (which I presume is what populate is using) but there is no way to express constraint such as \"row in collection x must only exist if the row on collection Y exists\". You need to either model those kinds of constraints in application or just put everything on one document.Regarding the performance, when using populate your client will issue N queries to MongoDb for each populate you have resulting in N round trips to Database. In case od rational database the JOIN is done on the database server itself and then returned back to you, where I expect it would be faster.It all comes down to expected throughput - if you have 1 query per second to worry about then probably doesn't matter what you use. Of you need to service 1000qps then it might be a totally different story.","People say that if your data is relational, you should use a relational database and not a document database. That is because, surprise, relational databases are designed from the ground up to work with relational data.Document databases on the other hand are designed to dump a bunch of semistructured data to disk.Of course you can use a document database to store and query relational data, it's just not its primary design goal and in many ways, it does a subpar job.For example in a RDBMs, the database takes care of referential integrity, in a document database, that's now the job of the clients.A major reason for denormalizing data isn't data deduplication but data consistency. RDBMs are very good at enforcing constraints on data, in a document database that job is now the job of the clients.Which is faster? Depends entirely on workload. NoSQL databases operate with little to no integrity checks, so they typically perform raw data writes very fast. Then again, similar speeds can often be achieved in a RDBMs by loosening integrity requirements.Which is more readable? Personally, I find SQL much more readable than a vendor specific NoSQL query language.MongoDB pipelines are especially atrocious imho.I find semi-structured documents less organized than tables.I once tried to use MongoDB for a sizable personal project and the experience was similar to peeing my pants. What started out as warm and pleasant pretty soon turned into a cold and wet mess.But as with everything like this, there's no law saying that you can't do it.","I'm a big Mongodb user and have had a fair bit of consultation with them directly after doing a large project at workMy experience is that joining in mongodb is not necessarily slow, altho I'd say it is almost certainly slower than postgres for example.However, one use case where it truly is way slower is when you need to query the collection you are joining to - you will lose all indexes on this collection, so if you need to, for example, join your users collection to an orders collection and only return users where the order date is greater than X, it is going to be really slow (assuming reasonable amounts of data)","\\ [ removed \\ ]","I agree with most of what people are saying here:BUT and this is a big one:Mongo + mongoose is so easy to change and migrate that there are REAL benefits to using it in a lot of different types of systems, even those with relational data.Also the speed is thing is very confusing. It is true that joins are faster in SQL, but that doesn't account for the way you structure your DB.You can definitely structure mongo in a way that is relational but requires significantly less joins and tables (collections in mdb case)I've worked with both SQL and mongodb a lot and while I agree that technically SQL may be more \"solid\" and \"performant\" in certain common scenarios. There is also a level of freedom that I really value with mongodb that really allows you to make really quick changes to data.Now all that being said, most software engineers are truly bad at their jobs lol. We fucking suck at keeping things well architected and organized as a whole. The speed of change that MDB allows over SQL is also a footgun. Many many folks have been shot by that footgun because they weren't careful about their MDB use over time and things became messy, slow, and data became incomplete and crappy. It's a lot harder to do that with sql.At the end of the day, its a tradeoff and both systems have strengths and weaknesses, but I really like MDB for small projects, startups, and apps where you may need to make rapid pivots and changes over SQL, EVEN IF THE DATA IS RELATIONAL.Good luck to you all in your data efforts may you always cling to your respective dogmas and may we fight wars over it in the future.","Relational data is more than just getting relational data. It's also about deleting or nullifying them.Readability is subjective.","Regarding the performance compared to relational DBs:Using `populate()` for populating fields with documents from other collections is slower than doing joins in a relational database because the `populate()` is done on the client. In short, when doing a query (e.g. `find({ _id: 'xxx' }).populate('myField')`), it first needs to get the \"root document\" with the _id. Once done, it can send another query for getting the subdocument. This can only be done in 2 steps as the client library needs to get the ID of `myField` before sending the query for getting it.So, you have to pay for the network latency 2 times instead of 1.This can get even worse when you need to populate on multiple levels (e.g. `find({ _id: 'xxx' }).populate({ field: 'myField', populate: ['mySubSubField'])` - I don't remember exactly the populate syntax)Note also that, a find = 1 query, and each populate is another query. So, if you use Mongo for highly relational data, you could potentially send 10+ \"real queries\" for only one \"find + populates\".Mongo pipelines, on the other hand, are executed on the DB. But as others have mentioned, they can be hard to reason about. Performance-wise, it's better in a way, as everything is on the DB, but everything is executed sequentially. So, if you have multiple stages, the overall duration will be stage1 + stage2 + stage3 + ... There's no parallelism/concurrency from what I know.Actually, if you have a lot of stages, populate() can be faster as it can send all the \"level 1 populate queries\" in parallel.But, as mentioned by others, the best is to run some benchmarks yourself","Here's a simplified mental map for you. In increasing order of relation complexity.Relations type : DB type1-to-1 : Your standard key-value store. Think simple JS object, Redis.1-to-many : Similar to above, but store multiple values against same key. Think JS object storing arrays against a key.hierarchical (variation of 1-to-many) : It's tree data structure. Your document DB, your mongodb. Each node's relation is to only its parent and child. You can drive relationship b/w cousin nodes via parent nodes. But they are not directly related.many-to-many : Your SQL DBs. You all know this.graph (variation of many-to-many) : You can define any complex relationship. Think social networks.TLDR: It's not MongoDB (not NoSQL) can't do relations. It's just limited by design for simple relationship. If you've relationship, which usually means many-to-many. You should always go for SQL. Unless you've very very complex relationship then graph DBs make sense.","MongoDB engineers will tell you that joins are a last resort at in Mongo. The DB engine and storage format aren’t built to support it efficiently. SQL DBs are typically built from the ground up for fast joins.","once your data set hits a certain size and your queries actually become complex, you’ll notice a huge difference when doing relational queries. if you are doing rather basic queries you prob wouldn’t have noticed a difference.","I really want to see what your backend server logic looks like.","Populate() is not a native feature of MongoDB itself but it is provided by Mongoose to simplify the process of working with related data. It isn't enforcing any relationships on writes, or doing any of the other cool things SQL can do for you in the query before the data is returned to your code.The rest of your comments are subjective; to a SQL developer, the single line of a JOIN is far more simple than the Populate() call."],"points":319},{"text":["Stuck with vercel?","I have heard that some of the more \"bleeding edge\" features of Nextjs can be a headache to self host, but it's very easy to host a standard app anywhere.","Why would you be stuck with vercel? You can host a next.js app almost anywhere","If you're expecting a PaaS, then vercel is probably the only way.If you can spin up a VPS, then use vps.If you don't mind extra learning curve and have some infra/aws knowledge, use sst.","Depends on the features you are using. Some features are Vercel specific.This is the difference btw with next.js other framework. In next.js you usually don't get to know what Vercel specific. But In other framework if something is platform specific it will me mentioned in its adaptor docs.","Remix js is good.I have been using it for prod apps for a while","Not at all, you can host it anywhere.I hosted them in AWS before and now in GCP.","You're not locked in with Vercel when using Next.js, but the integration between them is tight and continues to get tighter with each release.If you're going to try Next.js, then look at 'open-next' because it will allow you to deploy your project to AWS instead of Vercel, while retaining most of the benefits of deploying to Vercel and significantly lowering the cost.Otherwise, you can deploy anywhere that supports Node.js, but you're going to lose quite a few niceties, and you might encounter some trouble due to the fact that the Next.js docs are written with serverless in mind.https://github.com/sst/open-next","If I’m not mistaken, they also have a docker file that you can run your application in, thus hosting it anywhere.","Using NextJS and we are not going with vercel because of their insanely expensive enterprise-level usage plan.We use AWS company-wide anyway and it’s rather trivial to have Nextjs up and running on Amplify.","No. You are not stuck at Vercel. That’s just misinformation. It can be tricky to get all the optimization outside of Vercel but you can absolutely go elsewhere if you want"],"points":14},{"text":["[Showoff Saturday] Made a web app that lets you automatically create drafts for commercials with AI","That's actually really cool, I like how it gives you pictures and adds a voice over for the video aswell. well done that's crazy."],"points":0},{"text":["Why people don't like Javascript on the backend, use php, python, rails instead. Isn't javascript better than these in terms of event driven, single threaded non blocking event loop, community, ecosystem, deployment options(free, paid), types (typescript)?","It is a comfort zone kind of reaction. Sure, there are things to hate (and like) about Javascript on the backend. But they all have their plus and disadvantages. I had a business colleague a few years ago who HATED javascript and stuck with PHP. His tune change when the refactor dropped his monthly hosting fees from a few thousand down to a few hundred a month... Changing his SSR to CSR (Client Side render) essentially wiped all his compute cost away. No more blocking events (like you mention). No more processes that consumed all of apache. It took him cold hard $$$$ in savings to change his tune.Again, each scenario is gonna be different. If his web app required SEO, he could have stayed with SSR. But in a logged in state, you want an app to be performant.Don't get dogmatic over it.","I build websites with Node.js, PHP and .NET. There's no best way to do it. Sometimes people like to try new things. Sometimes people don't want to try new things, because they're comfortable with what they got.My preference is server side rendering. I've tried all the latest and greatest when it comes to JavaScript and all it offers, but I keep going back to just Node.js + Express + EJS. It always works and I see no issues with it. I also only use vanilla JavaScript and CSS, instead of TypeScript and Tailwind. I just personally don't need any of the newer frameworks or languages.Instead, I'm even trying to go backwards in time and learn LISP (and its variants), because why not? It's an ancient programming language I found out about just a few months ago. I'm working on creating a website using that, just for fun. I don't think I'll actually use it very much, but it would be fun to build an ecommerce in a programming language from the 1960's. Some people like to do things for fun, others not so much. As with anything in life.","Everyone has different tastes, but most of the time, it's about the language they are most comfortable in. Personally. I always choose nodejs because I’m good at it. But I think C# is a better language."],"points":0},{"text":["I made a Hacker News pwa","I changed my mind about tailwind with this project, I love it now lol","what method did you use to make it pwa"],"points":8},{"text":["Chrome Browser as a monopoly","Google have significant control over Chromium, I mean most engineers who work on it are probably Googlers. It is not as bad as true monopoly, but it is not the best either.We really need another very good open source engine like Chromium.","Chromium already has a monopoly; deprecating/killing manifest v2 was not a widely accepted push, but Google wants it, so Google made it so. No one is willing to make a good alternative, and I doubt anyone will soon. If it does happen, I predict it'll come from some deranged Rust dev (I mean that in the nicest way; anyone trying to take on this would be crazy). Chromium is a great engine; it works well. That's why it's hard to compete with; I mean, how else could you beat it? Also, adopting a new engine might be a pain in the ass for future devs. I'd like to see a successful fork of Chromium with fewer Google engineers involved.","Chromium is essentially the new standard Operating System. Most users never interact with anything else for more than a few seconds just to get into the browser.","Going back to 2011 when I graduated college, I made a prediction that everyone will eventually converge on a single engine powering the web. Which imo is a good thing. As long as that engine is open source and developed by people who have users and the web platform best interests at heart.I think chromium is clearly the best engine out there but it should be taken over by something like W3C or similar web standards organization.Browser wars should be about building the browser product itself to gain users. If everyone competes on features in that space the. We get more feature rich products and the platform is stable and enjoyable for developers to build app and sites because there’s a standard web engine/platform to support. I’ve been building electron apps a lot lately and it’s so nice to know I can use anything that a single chromium version supports without having to worry about any other engine or chromium version.","Been a Firefox user since its early beta releases and have stuck with it both in terms of my development environment and my personal use.I see no reason to change, and the way Google seem to be trying to control the market using Chrome, there is even more reason not to change.Firefox can be inefficient, it certainly seems to use more resources than Chrome, but that's just the hit I take for choosing a browser I am more comfortable with.As for Google's monopoly, it's obviously there, but you'll find that in places beyond US borders, there will be laws governing that level of control.","I just use edge cause it feels almost exactly like chrome, but better.","I try to use other browsers for dev work but keep using Chrome due to the excellent dev tools. I wouldn’t use it for personal stuff due to the creeping surveillance being added","[deleted]","Chrome(64%) and Safari(18%) make up over 80% of the browser market share, their closest competitor being edge with 4%. If that's not a monopoly I don't know what is?I wouldn't mind it that much if it wasn't for the fact that most other browsers are much better and offer way better features than chrome, while still being compatible with the chrome webstore and it's so hard to get people to try the other stuff, because chrome is all that they've known.","I uninstalled chrome. It's worst than IE.","No wonder, Firefox is terrible. I tried to use it for over a year and it was a disaster.I don't like Google as a company, but nothing beats Chrome at the moment. Maybe only Edge might be a competitor to them.","I think Firefox have to use chromium engine to build browsers for Android devices. This is the monopoly"],"points":90},{"text":["How to Back Up Your Self-Hosted Plausible Analytics Data"],"points":0},{"text":["What Time Zone is Used for Showoff Saturday?","I've been wondering the same thing","no idea, but it's 1030pm here on the east coast of the US. It's probably US-based, so I'd imagine you're still good.","I live in Australia, and I just post on Sunday. I have posted on an Australian Saturday and it doesn’t seem like anyone cares. However, the posts seem to do better if I wait til the American Saturday and join the majority."],"points":0},{"text":["SEO effectiveness using new frameworks and client-side/server-side rendering","I think what you're missing is the \"how\" in why CSR (rendering, not routing) is bad for SEO, and SSR is good for SEO. It comes down to what the client first sees in the response body when it requests a page to our site.For CSR, this is usually an empty HTML page because the client has to run some javascript to render the page, hence \"client-side rendering\", let the client render the page instead. This is (was) bad for SEO because search engines when indexing your site will not run javascript and just check the HTML content, so all it will see is an empty document, so it can't do what it usually does which is ranking your site based on the content. However, it seems like search engines had somewhat helped solve this by running your scripts with unknown limits, giving a chance for your page to render fully. But the problem with that is we don't really know how effective it actually is, there's a chance the content might not fully load leading to broken pages.SSR on the other hand, renders the page on the server, which means it builds the HTML on the server first and then sends it out as a response. This was the proper way to create dynamic pages back before SPAs didn't exist and when javascript was considered a dummy language. The reason why this is good for SEO is that the response body already had the rendered content, meaning the client does not have to run any javascript to get the content unlike CSR.One other thing is SSG (static-site generation), the name of the method in which we create/build the pages at build-time. Instead of building the HTML \"on-demand\" (for every request), we create those files at build-time, and then just serve plain old HTML.For the Astro framework, you could do any of these methods, and you could configure which method you want (SSR or SSG) at the page level, and also CSR/hydration at the component level. By default, Astro will use SSG for the whole site but you can tell Astro which components should only render in the client. For 11ty, it's just SSG.","This whole “SSR” and “CSR” is so weird to me, and I wish people wouldnt use the terms because it seems to frequently lead to a muddled understanding of how the web works.There is “static content” (plain old HTML files, unrendered) and “dynamic content” (HTML that is rendered by backend scripts, what is probably meant by “SSR”, but people seem to conflate the two)There are also pages that are assembled by a frontend framework, where the JS creates the DOM on the fly (what is probably meant by CSR). These are still sent down as HTML documents but are incomplete and require the browser to do additional work to flesh it out.Static site generators are effectively transpilers — they take content in one format (markdown. for example) and convert it into static HTML. When someone requests the document, the web server sends back the file as is, as a normal HTTP 200 response.“document requested, web server sends back HTML content with 200 status” is conventional behavior that has been how the web has worked for decades.I have no idea where you read that “SSR” is good for SEO and “CSR” is bad for it. Good SEO is generally a product of having a well formed document structure and predictable responses when a document is fetched. Theres some other stuff (sitemaps, etc) that can help too.The only reason I could think of why a document that is assembled on the client side would have worse SEO is because it requires JS to assemble some amount of the document in the browser, and maybe the crawlers don’t do that as well yet. But with the prevalence of frontend frameworks. I have to imagine they are capable of it to some degree?It doesn’t really matter what process you use to generate your content, all that matters is how its being delivered to your user at the end.An easy way to test this: do a curl request on a URL of one of your pages and see what you get back. If the content is all there, then it is conventional. If the content is partially there but its just a skeleton document, then it requires JS to finish assembling the document.","Meh my site is full csr and shows up at top of Google lol","Astro and eleventy both ship fully-baked HTML to the user. That has great SEO benefits.Eleventy is not a framework per-se, it more like a build tool for generating the files that make up your website. Eleventy only does stuff in a dev environment, it does nothing once you build your site. This is SSG (static site generation).Astro can work the same way (generate a 100% static site), it can also run as a server that can dynamically create webpages on-demand. This is SSR (server-side rendered)These are often compared to CSR (client-side rendered) apps usually built with react/vue/angular/svelte/etc. These apps are very powerful in terms of state management and UI reactivity, but that power comes at the cost of performance. With a CSR framework, you don't get past a white screen until you have downloaded/parsed/executed the js. That puts a hard performance ceiling on CSR apps.The big win with both SSG and SSR is: you're shipping fully-baked HTML and CSS to the client. This means crawlers have your whole HTML doc accessible to index, and users get high performance because they immediately get markup and style without waiting for a js bundle to download/parse/execute.","Nowadays, it only makes a difference if your website updates very quickly and often, like Multiple times a day (think News-Sites, high volume E-Commerce). Then SSR will be good for quicker indexing by Google.For more static sites and apps it won‘t make a big difference. It might have some impact performance-wise, depending on initial loading-times.","In my opinion (as somebody who has built countless SPAs) you shouldn't be relying on SSR and choose teck-stack that has good render engine (no SPAs and ajax loading)SSR in a nutshell is a workaround for having the javascript take care of the whole View rendering logic. And if you have a workaround on a meta-level, what would you do once you need another workaround for a simple fix?Page load speed is an essential part of good SEO and good UX as a whole, so it's very important.","SEO has evolved, but the basics remain. Server-side rendering (SSR) is still generally better for SEO. It ensures that all content is visible to search engines when they crawl your site. New frameworks like Astro and Eleventy are designed with modern practices in mind, so they can be SEO-friendly, but it's about how you use them.For static sites, pre-rendering content is key. Both Astro and Eleventy can generate static HTML, which is good for SEO. Make sure to render critical content server-side and use client-side enhancements for interactivity.I used an AI article generator, AIMD app, for my blog. It focuses on facts and SEO performance. Could be useful for consistently producing content that's SEO-friendly. It's about the tools and how you use them. Keep learning and experimenting."],"points":5},{"text":["How can I improve my portfolio?","Cool site! The only thing I would change on your site are the transition effects — once a section is faded in, leave it fully visible as the user transitions from position to position.","From a dev standpoint I think its well built. The only thing that I’d adjust is the width of the content in the “testimonials” carousel, on my phone I only get one or two words per line and it makes the section really tall.Unrelated to dev but, your education section is also confusing. You list a CS bachelor, but the description under it is not about CS and then the image is an B.A. Econ degree. Edit: just realized your resume is there too and lists a B.S. in Econ. Might want to clarify which degree you do have.","looks great! one thing i noticed on mobile, the links in your navigation are not exactly centered on my screen","well, looking at the reactions, it seems i'm a bit different but don't understand why. your site is good, of course, butfirst, i look at the site for 3 seconds, seems pleasant and logical, but a bit too darkthen i look at the color contrast, it seems OK more or lessthen i look at the font sizes. this should be elastic, it seems your fonts are not respond to changing default font size in the browser. it is a must in 2024!! for this reason, font sizes are extremely small, undersized...then i look at the menu and keyboard navigation, the menu is not really keyboard navigable, again a must in 2024.so that is my basic order. impression, colors, fonts, menu and keyboard navigation.","I have been thinking about the colors being too dark for awhile, is point two even actionable? Or related to part 1. I’ll take a look at part 3 not sure I agree with you on that one. Keyboard navigation for accessibility, I can agree a bit on that. I’ll check it out and see if I can get a quick fix.","It looks nice. But I noticed at the carousel at the bottom was hard to scroll by on mobile, almost no spots on my screen where i could touch to scroll up or down.May i ask where you host your website?"],"points":8},{"text":["I open-sourced my Product Hunt \"Product of the Day\" — a searchable catalog of the most popular React component libraries","You had my upvote at opensourced","What kind of maniac searches „a switch“ instead of „switch“?","What app did you use for the recording?","Hey all! GitHub repo is linked here.I found myself spending way too much time browsing the web to find the right component or get design inspiration for my products. So, I built a website with my friend to help with discoverability and visibility. It ended up getting \"Product of the Day\" on Product Hunt back in September, but I recently open-sourced to do a better job of keeping it up-to-date.On the site: https://catalog.magicpatterns.com/, you can:• Compare design systems• See UI/UX standards for basic components• Find the right component for your productOpen to contributions and feedback. Happy Showoff Saturday!"],"points":7},{"text":["WordPress or scratch","Never Wordpress.","Working with wordpress, you don't need to code much, all you do is just drag and drop, the maximum effort you will put on them is just writting some additional css.If you want to Build a strong portfolio, you need to build websites from scratch then only you understand the basic principles.Try to learn some modern framework such as nextjs.","I've done a ton of Wordpress websites. Every single one of them has reached a point, sooner rather than later, where I've said, \"Dangit, why did I pick Wordpress AGAIN?\"Granted, it's gotten a little better. But the amount of time I spend troubleshooting, horsing around under the hood, troubleshooting, writing php because no plugin or theme will do what I want, troubleshooting, and did I forget to mention, troubleshooting, I frequently realize it would have been faster to code everything by hand.If you really need a CMS, if you're going to be posting content regularly and need to manage it easily, and you're ok with it looking good but not much else (ie you're not a developer type who tends to know exactly what you want and not be happy being forced to have the square peg of your wants forced into the round hole of whatever happens to be easily available), then wordpress is good. Otherwise, you'll be seduced by the first week in which you get a very nice looking website up and running quickly, and then you'll either be happy and stop working on it (which never happens) or you'll hit a brick wall of endless troubleshooting which will eat all the time you saved over doing it by hand. I am just amazed by how Wordpress can sometimes make a short task take 2 weeks."],"points":1},{"text":["Aegis - A fast, secure, modern, light-weight, and simple JS library for creating web components and more!","I haven't had time to look at the code yet so I have no comments regarding that. But Aegis is one of the most popular two-factor authentication (2FA) applications. I don't think naming it the same is a good idea. \"Do you use Aegis?\" implies \"Do you use the Aegis 2FA app?\"."],"points":0},{"text":["What is an interesting way to show my skills on my portfolio site?","Use something like a range components which shows the percentage of excellence you have.check this","It rendered fine on my phone (nice mobile work). I tend to not bother with a skills section and immediately have my projects and my profile links. Put your best, most marketable skills in your resume.","Keep it simple and link to an example project that used the skill.","We need a sub reddit for portfolios"],"points":6},{"text":["What’s the best low cost or free method to get a static webpage going?","Github Pages or Cloudflare Pages","Netlify without a doubt.","GitHub Pages. You can throw your basic HTML/CSS there and connect your custom domain. When you're ready to blog, transition to something like Jekyll or Hugo (my personal choice) and have GitHub Actions build and deploy.","Use firebase hosting: 1. It's free 2. It's easy to update your websiteHere is my static websites that use firebase https://www.lusosoftware.comIf you'll need help setting up, dm... I'd gladly help","Deploy Astro static site to cloud flare. It’s free. Example fuel.studio","I agree with Netlify for Web Development Beginners, i used it myself when i had no clue how to rent a real server and didnt need a backend.If you just want to become a Blogger, start with Wordpress. Use Elementor as your Page Builder, your Html/Css will be useful sometimes and you dont need any JavaScript/Php. Get yourself a Elementor Pro Plan, rebuild anything you find on youtube and give it back before 30 days (The Page stays, just the security updates stop) Then some Seo Plugin for example Yoast, then Convert ur images to webp or use Speed Plugin/Caching.","I've built a ton of blog sites over the years. Here are a few options:If you WANT TO LEARN SOMETHING... use the flavor-of-the-month free/cheap hosting (like Netlify or Firebase is right now). Eventually, they'll stop offering that service, and you'll have to move somewhere else... I built a Gatsby + Strapi blog using Netlify and it was fun to learn and relatively easy (I don't recommend that stack these days, lol). I'll say... the downside of this route is it was super exploratory, and I really don't ever want to go back and mess with this website *at all* since I don't remember anything I did.If you ACTUALLY WANT TO BLOG... Just use a blog platform where you don't have to fiddle with a bunch of backend/hosting crap. Like Squarespace or Wix or whatever. I haven't personally used these recently, but it's a no-brainer if you don't want to faff around with the underlying infrastructure and just want a reliable blog that's actually enjoyable to add new posts to. The worst thing is when you feel inspired to write a post and you need to fix 14 things before you can even start.Niche Ideas...If you HAVE VISUAL STUDIO license, Microsoft gives you free Azure credits (Pro = $50/Enterprise = $150) -- you can easily host a website in Azure App Services for free every month. I made a .NET website and hosted it there for years for \"free\" with this method. Also, if you don't care about the domain name, you can keep (unlimited?) free apps on {whatevernameyouwant}.azurewebsites.net if you have an active account.If you HAVE AN OLD COMPUTER around and are looking for something that's tried and true and you'll never have to mess with it... I'd just install Ubuntu and host an HTML page website there (or whatever technology you're familiar with). You'll also probabl need to learn a lot, but once you get it set up, it's basically bulletproof. This is the best option out of everything because you don't have to deal with companies changing prices or policies, you can host as many projects as you want (assuming they're relatively low volume), and it'll just always work and you won't have to change anything for years, most likely. The only thing I ever do is... if the power goes out, I have to turn it back on.","I set up a S3 bucket on aws S3. It is $2.13/month and by far the cheapest way I have found to do it. It is also a huge pain in the neck to set up - and if I were to do it again I would probably use netlify.","You could always host it from your computer","GitHub Pages is the simplest for getting going. Completely avoid figuring out your own domain name or anything like that, just push code up and it is updated.Next step after that is to use Netlify — free tier works great for a ton of uses, and it can connect to GitHub so any pushes you do will automatically build and deploy. Pretty easy to get a custom domain with them, too.For blogging: don’t overbuild. You want to get writing, not spend a month building a site and figuring out a CMS. Eleventy has a ton of templates for making very fast blogs where you write each entry in markdown and add the file to the git repo and everything builds. You don’t need Wordpress or other fancy stuff — once you have a site built and are actually writing, then you can worry about whether you need more functionality."],"points":47},{"text":["What’s the recommended set of tools to leverage to handle a multi step form in React Native?"],"points":0},{"text":["The easiest way to convert an Excel spreadsheet into a simple web landing page?","So you want to just show the data or actually perform calculations on the page itself? Also can't you just make it a Google Sheets file and share it with them?"],"points":2},{"text":["HTML Link and Label Text","The class names are generated within WordPress to apply styles specific to WordPress. They mean nothing in isolation.","<a href=\"https://example.com\">example</a>https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a"],"points":0},{"text":["Looking for image button suggestions for nonprofit homepage...","Go to https://awwwards.com and search for charity or non-profit or even the broader sector like 'environment', usually some inspo there"],"points":1},{"text":["FileZilla stopped using keys from ssh-agent on macOS after restart"],"points":0},{"text":["Replicache: too good to be true?","The main gotcha I see is that it's closed source. You have to pay based on your number of users, and at any time they can decide they no longer want to do business with you. From their terms:\"Rocicorp may terminate any license hereunder for good cause upon notice to you by email with immediate effect. Rocicorp may terminate any license hereunder at will with 30-day notice to you by email.\"For me that's an instant dealbreaker. Ideally I want to build my sites so they can keep working 5 or 10 years from now. For something like this that's fundamental to a project (you couldn't easily swap it out for something else), I don't want to depend on any private company continuing to treat me nicely. It seems very possible that the company won't even exist 10 years from now. What happens to your site then?","no I never tried doing it"],"points":11}]