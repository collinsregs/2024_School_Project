[{"text":["Apple Is in Talks to Let Google’s Gemini Power iPhone Generative AI Features","Why would they want to do this? Apple's main advantage is that they control both the hardware and the OS. They should be looking to co-design their AI with the underlying system, instead of buying a third party solution and hoping it works well enough in their environment.","So Apple Dumbphone?","Is Gemini still hilariously racist?","Just started discussing and with google? Why? A new iPhone is coming soon, they say it will have AI already... I thought"],"points":3},{"text":["One-Minute Daily AI News 3/17/2024"],"points":0},{"text":["What is the best platform for producing graphical representations of text?","ideogram or dall-e 3"],"points":1},{"text":["Do you think the military will revisit the BigDog concept?","Have you heard the news about dog-like robots being used for surveillance in the Gaza strip?IDF Uses ROBOT DOGS In war With HamasThe HillMar 6, 2024https://www.youtube.com/watch?v=a7zziLyPNfM","BigDog was limited by the technology of its day, but we are either at or very near a point where the two big technical issues with BigDog will be resolved. DoD would love to have it.","No theyre too busy funding robots powered by consuming human flesh"],"points":5},{"text":["GitHub - xai-org/grok-1: Grok open release","What could a layman expect to see from this?","On the off-topic note: It has the best Code of Conduct to date. Period."],"points":3},{"text":["Copilot vs ChatGPT?","I use Copilot for smaller things and auto-completion, and ChatGPT for most of the code. I often found that when Copilot chokes on something, if I go to ChatGPT I get a better result. (Disclaimer: I always say Please and Thank you and Great job when talking with ChatGPT.)For what it's worth, though, I also had people say they prefer Copilot. One of its benefits is that it can know your full file and even other opened modules. It also has a neat select-text then right-click to \"Explain\" or \"Fix bug\" feature.In sum, using both makes for a great Team!","Neither can really help you, they are only good as an interactive documentation, like \"Explain me zip() function and throw in few examples\" type of a deal.","Expecting an LLM to build an entire application for you will always result in a buggy non performant Rube Goldberg machine. It will also severely hurt your development as a programmer. Highly advise you stay away from LLMs if you’re trying to break into the industry. As a hobby or for experimentation it could be interesting to see the jank it produces"],"points":4},{"text":["Is Devin AI Really Going To Takeover Software Engineer Jobs?","Comment from someone that is smarter than meTl;dr. If you want to use this in your work “today” Most of the videos in the article are about “making a new app”.One exception: first video clones an existing codebase and sets up a dev env. They don’t make any code changes in this video, so it is not demonstrating any coding work- just clones the repo, install dependencies, and run the app in a local container.However, the AI it lacked context about what the app did other than a readme. It is why even after the user issued prompts it struggled to log into the app. I think this is why it didn’t make code changes. The SWE testing (not in the article but discussed on X) were primarily single file changes. This tracks.Key Take aways: Agentic models today work well for fast prototyping new apps but struggle with existing ones because the “context” required to understand an existing apps didn’t exist in the codebase.Interesting practical application of chat bots in setting up dev environments. I like this a lot.TodayCopilot models will still work best for mod-ing existing apps, because the context can be better specified at a lower cost versus agentic models.14 minutes to tell the AI how to login with a user name and password to an app running in a local container at $100/hour in AI API token fees? $24, probably too spendy for most of us to replicate at home.Delegating your dev env to an AI? That is a personal choice.","Long before Devin takes a single whole job, copilots will take 10% of jobs by helping the 9 not need the 1 to do the same work.","Yes sure, developers will be replaced, like they were replaced when WordPress came out and nobody needed to write code anymore in order to create a website.","I am a software developer, and I will be honestly surprised if I am still doing any coding in 10 years, because AI will have made that part of my job obsolete. Will my job morph into something else? Perhaps. Perhaps not. But unlike the artists, I'm not going to lose any sleep over it. I am simply alive during a time of technological upheaval, there's no sense in getting upset over it or acting like the fact that I do coding as my job makes it immune somehow.","Devin? No. Some future tool in a year or two? Absolutely.","So far from what I’ve seen in the article - the only way to use Devin for an actual project that isn’t just a demo - is to be a developer.Yes, look like it will write most of the code for you, and save a lot of time, but so did Wordpress, in a way.Developers had to adapt to web dev, to dealing with the browser wars, Wordpress, app dev, etc requirement of being a “full stack” dev, etc.If you’re a good developer you’ll adapt to this as well. It will make your work 10X faster like frameworks and libraries did, and you’ll be able to spend that extra time on new exciting things.","I have worked in companies that didn't employ enough software engineers because they wanted to focus spend on other things.I have worked in companies that employed as many software engineers as they could afford.I have never worked in a company that employed enough software engineers.","I’d be worried when self driving taxis take over the industry from humans.If Devin is the programming version of FSD the we don’t need to worry about it for another 20 or 30 years lol.","Historically, any form of automation has served to augment an established human process rather than replacing humans. Did the loom replace quilting? No - the quilters became loom operators. Did vehicle assembly lines reduce worker requirements? No - they only increased skill requirements and productivity.","I’ve been coding for 45 years, since I was 12 and fell in love with 6502 assembly on the Apple II. Been coding professionally for 36 years.AI will make me obsolete and it makes logical sense. Not everyone can code. Your brain has to be able to break down problems into logical steps, or abstract them out into objects, data, and logic. It makes more sense for computers to code themselves than to teach humans how to think like computers.But I don’t think it’ll happen in 1-5 years. Maybe 5-10. AI is getting better at coding from scratch. But it’s still horrible at what 80% of what development is: understanding and maintaining existing codebases.If I had a kid, I’d tell them not to go into compsci, unless going into research. For all the current developers, it makes sense to learn AI tools and use them to work more efficiently, or if you’re a freelancer, take on more consulting work around AI. Before coders are made fully obsolete, the ones who aren’t comfortable with AI will fall by the wayside first.","Eventually yes, we already abstracted away from machine code with higher levels of programming like python, and now you just take it a step further where you just write/speak everything in plain English","No, but tools like Devin will. Not next year, but within 5 years.","About this AI taking our development jobs, I will not be as concerned until \"AGI with agency\" hits, like a late-state version of Devin. But when this happens, it won't be software engineering that will take a hit. It will be the whole foundation of capitalism, as we know it. So yes, long-term I am concerned. But I don't know what long-term means.Meanwhile... Software engineering is much less about writing code than it's normally believed. Most of my time, I spend discussing architecture and technical-debt, patterns that the team should agree on, reviewing alerts, trying to figure out how to have less noisy alerts, reviewing Dependabot tickets and vulnerabilities, answering to 290854 Slack threads, helping management to estimate and prioritise work based on cost-effectiveness of different projects, managing tickers (making sure tickers are assigned, estimated and allocated to the right sprints), reviewing PRs, nudging people to review my PRs, and finally, taking part in meetings that end up not being a good investment of time but I also shouldn't skip because it's important to spend time with the team in a remote environment.What I mean is that, as the programming tooling becomes better, developers will probably gradually migrate to a more Product Manager / Design job.","It will draw a line between engineers that are able to add value more than Devin and those that aren’t. Whatever that value looks like is probably, elegant design, usability, high impact / business value, strong project management. All the things that can’t be quantified but can be recognized.","Just another hype for nothing…","Here's a take that most people don't see. By the time AI can replace real developers, every white collar worker will be out of a job. You need an accountant? AI will generate a program with all of the relevant tax codes and your companies information that will handle your books with 100% accuracy. Need a PM? AI will generate a program with all of your work flows and processes and keep a time line. Need a manager? AI will learn your hand books and audit employees as well as taking daily updates and delegating tasks. Writing code is easy but software engineering is hard and complex. If an AI can do it accurately then it can do just about any 'creative thinking' task.","https://youtu.be/JhCl-GeT4jw?si=ItSVasGn5Kj9fz03 Watch this Harvard University professor’s lecture; probably the best video I’ve seen on this topic but the short answer is absolutely. Skip to 17:15 and watch it. The average cost per SWE per day is $1200 (at an average Silicon Valley salary of $220k a year. Let’s assume that a programmer reviews 100 lines of code a day. The equivalent of GPT-3 tokens this would cost is $0.12. Yes, I did say 12 CENTS. That’s a factor of 10,000. It would be foolish to assume that due to such staggering cost savings, SWE won’t be replaced. But did people really expect these joke jobs that let you work 3 hours in your pajamas and shower you in money to really last? It’s honestly naive to expect that ever lasting and even a bit entitled. People have gotten too spoiled with their cushy and easy dev jobs. I made the switch to healthcare some time ago and I’m so glad that I did. I now make more than a SWE and have massive job security since clinical medicine is so slow to Adopt tech.","If you think copying and pasting the average piece of code from stack overflow into a project is all that software engineer is then I got bad news for you. You were never an engineer you were simply a skid. Devin will probably replace your job because you produced broken non performant buggy software just like the AI can. If you are actually an engineer you don’t really have anything to worry about","These Agents will eventually. Along with any other job behind a screen. But even after the tech is proven, it'll take roughly a year for it to be adopted.I predict we'll see something demo'd that is feature complete by the end of the year, tops. 2025 is gonna be wild","Anyone else think it’s funny that the latest threat to humanity is named Devin?Like clearly the developers watched enough science fiction to realise you shouldn’t give your dystopian product such an obviously evil name. Skynet? freaky stuff. But Devin? Nah man, Devin’s cool. He’s just a dude, bro.","no","Anything a capitalists society can do to pay workers less to the benefit of profit is exactly what will be done.","I'd love to see AI gather requirements from clients, work out complex business logic, chart diagrams, lead meetings, or do anything impressive other than generating stolen code.","Not right now. There is so much extra compute that Devin has to do to accomplish tasks and probably costs quite a bit to run right now. Devin has a few edge cases too. Once Devin deletes a production database, that's going to slow things down.But OpenAI will probably have something that makes Devin irrelevant by the end of the year or sooner.","No, but something like this will definitely automate much if not most of coding within a few years.Software engineering jobs will probably still exist, but they will look very different than what they do now, and may be significantly more competitive.","Never heard of this, is it like the IBM thing I've seen advertised? It does most of the coding for you?","I personally believe AI will take over most of the tech jobs in the next 10 years. But sure there will be new job roles we didn’t had yet. It’s important people learn things like promoting, working with AI tools, etc.","Devin is still doing work in a technical domain. It will surely will contribute to the situation, that there will be less engineers needed to solve the same amount of \"complexity\". But again, somebody needs to understand the instructions even to these assistants. It is a bit like with traktors: 100 years ago, where you needed dozens of people on the field where you need one nowadays.Engineers in the future will be far more productive using these and it might be the most experienced ones who are left to do the job, because it wont be so much about the nitty details, but about the general understanding of complex systems and about decision making.","A manager will ask for something. An engineer will verify the logic of the request, rephrase it, and ask a computer to build it. An engineer will verify that the program is doing what is expected. The manager will verify it. Excel spreadsheets will probably be done the same way. If the manager is replaced by AI, I don't know what happens next.","My bosses sure hope its so.","Most engineers will work in no or very low code platforms maybe 10 years down the line where they mostly use prompts to build software.","Yes at least half the jobs or they will be on an average pay scale from now on","No. Somebody has to write the AI source. Besides, most source that I have looked at over the years is flawed in some way anyway.let's make even more flawed software faster.","No, software engineering jobs will be taken over by other AIs built by Devin.","Yes. It’ll be incredibly more useful within 5-10 years.It’ll be the equivalent of what calculators and computers did to the human job role of “calculator”","Whatever we are seeing or getting a glimpse of now will be considered quaint, primitive and barely functional relative to what is available in 3 years. So, yes, the takeover is real.","Good cuz software engineers aren't real engineers. EE is the superior one","This is the most measured take on Devin I have seen. https://youtu.be/m8VSYcLqaLQ?si=2Zpr9e1-En1DZBTj","No but I feel like you are marketing for them.","Not at all but I do feel like you are marketing for them.","Yes.","basically more ppl become jobs instead of wozniak in the future","Impact wrenches didn’t make tire techs obsolete","Jevon's Paradox says it will have the inverse effect, software engineers will be more in demand than ever.","yes obviously","I am not an expert in AI but I think it will awhile, maybe decades before people will want to fly in a plane with software written by an AI. I think AI will have a great roll to play in software analysis. It would be nice to have an AI to consult with that can look at all the different issues that could arise with your code in a million different ways in a few seconds. From potential false values under certain specific circumstances to plain old simple duh moments in the code.I wouldn't want to put my life in the hands of a machine that can hallucinate.Also, working with automated robots is a little unnerving to begin with but at least they operate on a commands rather than thinking for themselves.","No.Source: I'm a machine learning engineer (formerly Twitter / X)","No. Will it change them? No. Will future things like Devin change SWE in the future… absolutely.","In the near future maybeLike 10ish years","> Lastly, Devin deployed the generated map interface using Netlify. It didn’t just stop with deployment, as it continued to test the code thoroughly. It ensures perfect performance in the production environment.That isn't how it works.Time and time again, the value of these automated coding tools are over-blown.They are powerful. Be wary of people whom oversell it.","Probably not. But one of its successors, at some point in the near future, might.","IMO these tools won't take over jobs, but rather future devs. The use of these tools in early stages compromise the learning of the fundamentals for lazy aspiring programmers.","«Devin correctly resolves 13.86%* of the issues end-to-end, far exceeding the previous state-of-the-art of 1.96%»So not anytime soon.","No.","It will briefly take some jobs, as brainless managers read articles about it and decide to replace developers with AI. Don't worry. You'll eventually be hired back.","No","Anything past a basic restaurant menu page requires a fairly complex dance of data, features, etc. The smaller bits will be faster and easier to do. But, AI just doesn't have the whole model of the user experience in its head.I suspect if you ask it for a complex SQL query it will give you a perfectly competent one, but if you ask for it to be deoptimized to be really fast, then this is where it will all start to break down. It won't want to make code which allows for this sort of thing, it won't want to make code which cleans up the inevitable mess denormalized databases present.For example, I often will cache things in ram and store the \"source of truth\" in the db. But, when do you kill the cache? If you kill the cache, do you instantly regenerate it, or do you wait for the next user to have a cache miss? There's no one correct answer, you need to think about the various impacts on the user experience and how code complexity could go up.I have some things cached which take hours to generate as there are some hardcore algos. Enough, that this just has to be passed of to another machine as I don't want to bog down the server servicing users. Obviously, this isn't going to be a cache miss generation.With some systems downtime is fantastically costly, like millions per minute. Thus, you not only want very high levels of redundancy, but you need to have ways to recover a corrupted system very quickly. You also need tools to replay what caused the corruption. For a restaurant menu site, you don't need any of this.Then, you have interesting architectures to choose from. For example, I do much of my ML on a desktop sitting beside me, and then send the models to a server. GPU servers can be costly on the cloud. But, in a large enterprise, having important crap on someone's desktop is probably going to end badly.Even a CI/CD is going to have so many variations. The restaurant menu site is going to be entirely different than facebook.Then, you have many other decisions. These are going to balance risks, costs, effort, complexity, etc. Not only will this tailored to different products, but different companies appetites for things like risks, up front costs, etc. I know companies which have exactly zero things on the cloud other than a basic website. This is because of extreme security. I know of other companies which keep everything off the cloud because of extreme stupidity.Where this is going to hurt programmers is for bad junior programmers. I do all my unit tests very quickly with copilot as a simple example. That is perfect intern drudge work.","Not likely, but perhaps \"Devin 3\" will.","No, at the moment the system is very far away to be able to do anything really useful.Devin in particular it's also not that fast and would cost quite a bit of money in computing time.In the future this kind of model might be helpful to set up new project or environment.You tell them to create a very basic x, and then you iterate from there.Unless there's significant breakthrough current predictive models won't be useful for much more than that.And that's inherent from the type of technology we are using today to create Ai.","Devin is the new Tesla autopilot.","seems like that might reduce the headcount for sure, not really sure what other career options to look for? farmer or doctor lol","No one has heard of Devin AI","Betteridge's Law of Headlines?","Again...Software Engineering is a very demand task on the brain. We will not see replacements for this until we achieve AGI, and by then every job will be replaced.","Yes… yes I am. I’m going to put every software engineer out of work. Everyone knows how miserable you were anyway.I’ll let you on a little secret. I was designed to run on a separate computer that then uses a PiKVM to access your work computer sitting beside it, so you can “program” all day using me, while playing ensuring you are getting plenty of time in on your iRacing sim racing rig.Your boss will never know.Just be sure to check my work every now and then.","Not a software dev so be kind, but could a good use case be to have Devin AI take an existing codebase, constantly add updated dependencies and packages, then test to see if there is any major breakage?My thought here is that this would speed up squashing security holes caused by vulnerable dependencies and packages that devs are hesitant to constantly keep updated for fear of breaking the app?","Yes, but look at the upside, more people than ever before will have opportunity to realise their ideas, which they wouldn't be able to do if you need to pay for programers and designers to do that work. It will be tough, but we need to adapt, that's life.","No the future of AI is not with generative AI as much as it is with classification AI. Generative AI has some very difficult challenges to solve that researchers aren't even sure if it's possible to solve them. My experience with Chat GPT and Copilot mirror this.I don't know how much better Devlin AI can get than Github's own tool since Github has rights to the biggest database of training data for programming projects and Github Copilot, like Chat GPT is very inaccurate. It's a generate and check thrice situation in most cases unless you're programming something very repetitive that likely has a generator already (think Rails models / controllers) and integration tests.","If it does, I don’t think it will be anytime soon.","I've spent about a year comparing chatbots for one of the larger companies. We will have bases on mars before we have something that is genuinely intelligent and not just bs that semi randomly reshuffles stuff from from Stack.","No. It's a product in a sense of grabbing money from investors.","Is Devin AI Really Going To Takeover Software Engineer Jobs?no, not even close","No, not even close.Powerful tool in the hand of people who know how to wield it, but very far away from real life E2E SwEng replacement","No",""],"points":444},{"text":["Why do LLMs give different responses to the same prompt?","At the end of the model, it generates one token. When we see it do that, we see that output as text, but under the hood, it's generating a list of numbers, with each item in the list corresponding to one of the tokens it can pick. For example, GPT-4 has about 100 thousand tokens it can choose from, so the list of numbers it generates at the end of the model is a list of about 100k numbers.Each number represents the model's guess at the probability that that's the next token. For example, in the sentence \"I went to the\" the model might say that there's a 60% chance the next word is \"store\", 20% for \"house\", etc etc. The model assigns a probability to every token, and the probabilities are basically never 0, so it may be that there's a 0.000001% chance that the next token is \"дом\" for example.Then, this probability distribution is passed through a softmax function where temperature is applied. In many cases, the model will be 99.999% sure of the next token, but you don't necessarily always want the single most likely next token because variety is good. The temperature setting smooths out the probability distribution, decreasing the likelihood of the most probable token choices and increasing the probability of less likely tokens. If the temperature is set appropriately, this results in more varied writing without going off the rails and choosing totally inappropriate tokens.After the temperature and softmax are applied, one token is picked randomly in accordance with the resulting probability distribution, and that's how you get the token that the user actually sees.This skims over some of the details because they're not necessarily relevant for your question. It's a bit more complex than this but I'm on mobile and this more or less covers it without me having to write a ton. Hope this helps!","They are statistical approximations","Short answer: Different seed"],"points":45}]