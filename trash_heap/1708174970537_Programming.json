[{"text":["How to select a Design Pattern?"],"points":0},{"text":["C compiler written in TypeScript that targets X86 Real Mode"],"points":0},{"text":["Setting Up a Spanner Emulator in Spring Boot üåêüîß"],"points":0},{"text":["Why is the domain Scam.ai routed to Vercel?","Somebody doesn't like Vercel, registered the scam.ai domain name, and set up a DNS record to point the naked domain to Vercel.Edit: I'm mistaken. This isn't what's happening at all. It's not pointing to Vercel. It's pointing to an empty skeleton site on Vercel's hosting service.","Just trolling vercel because they refused to host my other website : legit-refund.callcenter.aws.","Because somebody has set up an empty next.js project at that domain you muppet","Because the .ai TLD is actually the TLD for Anguilla and is basically managed by one guy, Vincent Cate, who may or may not actually give a shit as long as he gets paid."],"points":7},{"text":["Transitioning Excel Users to Python: the Power of Mito and Dash"],"points":0},{"text":["The history of HTTP and the stories behind status codes","That was unfortunate. The \"story\" behind the status codes according to the article is that the first set of 2xx, 3xx, and 4xx codes were introduced in HTTP 1.0. No word on why those ranges were chosen, who came up with the idea, or anything else.Despite not delivering the story, the article manages to drag the reader past what seems like dozens of ad segments."],"points":0},{"text":["Greenmask release v0.1.5. Dump obfuscation tool"],"points":0},{"text":["More Turing-completeness in surprising places"],"points":0},{"text":["How to Make a Slider in Tailwind"],"points":0},{"text":[".NET 8 WebAPI & Angular 17 Role Based Authentication with JWT Tokens Part - 1"],"points":0},{"text":["I made a script that augmented in-browser benchmark performance by ~30%"],"points":0},{"text":["Create Beautiful Instagram Stories to Share Articles/Websites With!"],"points":0},{"text":["Agile is a tainted term","At one time it wasn't, but it was abused by people who wanted to do agile and cut resources at the same time -- Fragile Development as I call it (Fail fast, fail often). Even the Agile methodology says it doesn't reduce resources -- it often increases them -- but companies are greedy.It's the same thing we see with AI now -- \"We can get rid all of those programmers and have middle-school kids code for ice cream bars!\"","Agile is a wonderful example of what I call \"solution without the problem\".Agile was invented to combat 1000 page design documents that were to be followed by the letter for three years. It's not a holy grail, it's a solution to a specific problem.But like so often nowadays the solution got adopted and people forgot the problem, only to reintroduce the problem. Now we have SAFe projects with a 5-year roadmap.I have actually been asked in a PI-Planning what my plan was should the goals of the current increment not work. MF, then we adapt! That's the idea. Making plans for three months is already close to astrology, but making backup plans on top is insane.","I just don‚Äôt like how we ended up at the most stripped down ‚Äúefficient‚Äù version that is devoid of all the parts that actually made iterative improvement work well and produce quality. Like Independent, empowered, self managing teams. Planning days, scoping, retrospectives, properly evaluating what you‚Äôre producing and adjusting based on it. So often now we just have tasks we‚Äôve never heard of before, provided no input to, that we didn‚Äôt scope, bucketed into 2-weekly spans and told to ‚Äúcommit‚Äù to it. It‚Äôs like‚Ä¶‚Ä¶."],"points":21},{"text":["Cool video explaining how passkeys actually work","why the fuck are you just using multiple account to promote these videos? cmon lad, it's incredibly obvious","[deleted]"],"points":11},{"text":["Learning about debuggers","Snapshot summary:This post is a comprehensive resource for learning about debuggers, discussing their functionality, underlying technologies, and associated challenges. It includes a wide range of materials, covering the basic principles of debuggers, their implementation across different operating systems, and topics like stack unwinding and debugger trivia. The post provides links to articles and papers that delve into the technical aspects of debuggers, such as reverse debugging, function calls in GDB, and the intricacies of stack unwinding. It also explores related topics like linkers and system calls, offering insights into the broader context of debugging tools and techniques.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëç"],"points":0},{"text":["How much uptime can I afford?","Two redundant services with 99.5% uptime do not make 99.75% uptime. That isn't how the math works, at all.","Will you stop spamming your articles already? You've posted this to seven or so subreddits, and none of the submissions created any discussions. Take a hint dude.https://www.reddit.com/search?q=%22How+much+uptime+can+I+afford%22&restrict_sr=&sort=relevance&t=all","A system with 99.99% guaranteed uptime must be 50 times(!) as reliable as one with \"only\" 99.5%.This sentence just doesn't work well. You should have just said that the allowed downtime has to be be 50 times less, but the uptime and reliability don't have a linear correlation in my eyes.The cost of building and¬†operating¬†a system in a way that¬†guarantees¬†99.99% uptime is several times as expensive as 99.5%.Well? Show us the numbers then? Is it really? Because all I see is a napkin-level graph for a source. I'm not convinced to say the least.I'm very soon receiving my Pharmaceutical Business Ops diploma, in pharma 99.99% is unacceptable; I feel like 99.99% in web is easily possible with good infrastructure planning and process validation. Not just crash-proof, but crash-expecting, so to speak. I've heard that Erlang/OTP is built for this, in a way.","Just the essentials:The post discusses the cost-effectiveness of aiming for different levels of system uptime, especially for startups. It argues that engineering for 99.5% uptime is more economical than striving for 99.99%, considering the exponential increase in complexity, costs, and resources required for higher uptimes. The article emphasizes the importance of evaluating business impacts of downtime, and not just technical aspects, to determine the appropriate level of reliability. It highlights operational and organizational challenges, including administrative single points of failure and the cumulative effect of downtime across different services. The post also addresses the misconceptions about cloud providers' uptime guarantees and the practicalities of achieving high uptime in one's own code and infrastructure.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëç"],"points":66},{"text":["Most popular programming interview questions of all time - good luck everyone","I have never asked a leetcode type question in any interview I've done. What is even the point? What are you really assessing with these? Just feels like gatekeeping for not a lot of benefit."],"points":1},{"text":["Paying people to work on open source is good actually","was there any debate on it? Is the code¬†better if the developer is not paid?","I'm considering trying. A full remote, full async, open source would probably be an intellectual step up compared to my job. Too much fake sync/meetings and limitations...","I want to see more experimentation and variety in licensing options, and if that means introducing some additional restrictions beyond ‚Äúanyone can use this for any purpose‚Äù I‚Äôm pretty okay with that.That's totally cool, just don't call it Open Source. That has a well-defined meaning.if my sloppy use of these terms bothers you in the context of talking about how people make their living,No problem at all with people trying to make a living. Just be honest about it and call your thing a different name.Instead, every time a maintainer finds a way to get paid, people show up to criticize and complain. Non-OSI licenses ‚Äúdon‚Äôt count‚Äù as open source.I mean, that's not what people are complaining about, is it? It's almost always that the vendor is not using an OSI license but is marketing themselves as OSS.The other criticisms‚Äìwell, hate to say it, but there are a lot of cranks out there who will criticize anything and everything, but the vast approving majority will stay silent. That's how approval and criticism always work in any endevour ü§∑‚Äç‚ôÇÔ∏è","I once tried to roll out an initiative to start paying developers who worked on open source libraries my company depended on. All of the engineers that I worked with (who also had extensive experience in open source development) viewed is it as heresy to the purpose of open source. They believed that people should build open source out of the goodness of their heart, not for money.I was never able to convince them that this is a privileged mindset from people who had the opportunity to work for free. I believed that most open source devs could use the income and we should feel obligated to support them, but that was far from the standard perspective.","Dammit, if only this had been posted just 20 years sooner it would have been the perfect opportunity promote my radiouserland blog.Seriously though on the everything-old-is-new-again front this was a hot topic for a while on the early tech blogosphere at the turn of the millennium. Since I do happen to have an archived copy of something topical I posted at that time handy, maybe some will be interested in this little time capsule.For context:This was around the time that the initial wave of Red-Hat-style paid-support approach to open-source-for-profit began to be supplanted by the community-edition/premium-edition-with-enhanced-features approach. The latter model was especially favored by closed-source enterprise software vendors, arguably trying to cash-in on crowdsourced development and/or usurp the no-longer-controversial-for-enterprise-deployments open source movement.That is, closed-source vendors first tried to push-back on open source with FUD. When that failed they shifted to \"no one ever chose open source except for price\". And when that failed too some pivoted toward \"see, we're open source now too\".The open source community was not amused, and there was a lot of discussion at the time about the proper way to \"pay\" for open source development, both in an ethical/moral sense, in a software quality sense, and in the sense of what is best for the health and sustainability of the software ecosystem.My point at the time was that most open source contributions were coming from people who were being paid for their contributions, but not by the open source projects themselves nor by the users of the software. Those contributors worked for companies that used the software, and the occasional upstream contribution back to the project was part of the implicit cost of maintenance involved with using any enterprise software component. (Moreover this was a good thing, since the same work was needed to use the close-source alternative, but harder to implement and maintain in virtually every way.)I'm not sure if that point is as valid now as it was then. The ecosystem has definitely changed in many ways, and one of those changes is that the ratio of contributors to users is much lower among many popular projects today - even software library/framework projects - than it once was. (Look up the etymology for the name \"Apache Web Server\" for an amusing anecdote on that topic for instance.) There's definitely still something to that argument IMO, but it may have been supplanted as the dominant way in which people \"pay\" for open source but (for example) by FAANG/MAMAA/whatever-we-call-em-now companies that provide open source software as a packaged, consumable product not to share development costs but to win indirect influence over things that bring them profit in other ways.The silent majority pays for open source (July 2003)When you think of a writer, you probably imagine a book author, a journalist, an essayist, or even a script writer of some sort, but it's generally someone who makes a living selling their words. But the majority of text isn't produced for direct or even indirect sale: it's used to remind your spouse to pick up a gallon of milk at the store, or to thank Aunt Rita for that lovely sweater, or to point your friend to that really funny website you saw this morning. Even the majority of text someone gets paid to write isn't written for sale: it's in business correspondence, or restaurant menus, or on mortgage applications, or bus schedules, or in instruction manuals, or on the back of cereal boxes. Practically everywhere you look you can find the written word. Someone was paid to write much of it, and yet hardly ever are you buying the words themselves.Most of the time text isn't the end product, it's a tool for communication. Lots of folks are paid to write something, very few of them view the text itself as the product. It's a means to an end.Yesterday Alan Williamson asked \"Who pays for open source?\" and answered his own question with \"The great belief, as sung by pretty much all companies involved in open source, is 'we charge for support'.\"Andy Oliver suggests this is but one open source business model, but goes on to define four \"forms\" that all pretty much come down to \"we charge for support\".I think Steven Berkowitz, in a comment to Alan's post, gets much closer to the truth: \"Open source projects that somehow make money for someone, be it through support, consulting, etc., are the exceptions.\" I'll take that comment one step further: Modulo outsourcing, software projects that directly make money for someone, be it through sales, support, etc., are the exceptions.I'm going to make an assumption here, but I think it's an assumption I can safely make. The majority of software developers aren't selling software, or even software support and services.Living as I do, in Chicago, where I'm told both the per capita and absolute number of software developers is higher than the Silicon Valley, I think this observation is a bit more obvious. I know a lot of software developers, but practically none of them build software for direct sale to consumers or businesses. When a \"software development\" firm is hired, it's often for custom (or at least customized) development. Even when we sell shrink-wrapped software, as my company does, it's not the software that customers are really buying.For most companies and for most developers, software isn't a business, it's a tool for getting the real work done.In this scenario, it's easy to see why a company might use open source software: just find me the best tool for the job. It's also easy to see why a company might allow its IT staff (internal or outsourced) to contribute to open source development. Critical as it might be, and as disastrous as it can be when it fails, few companies rely upon software for their competitive advantage. I don't care if my competitors use the same web or database server that I do, or for that matter the same XML parser, caching engine, unit testing framework, or database connection pool that I do. Indeed there is some advantage to me if the non-proprietary parts of my infrastructure become commodities.While the public face of open source software might be the folks that are trying to build a business around it, I suspect that's because, well, they're selling something. Who pays for open source development? My guess is that the answer is the same as it is for most software development: the folks who are trying to get something else done.As might be obvious, originally that would have pointed directly to the conflicting or alternative perspectives at all of the obvious places. Maybe this is less interesting without those parts of the conversation.","Getting payed for software projects is nice, but this just seems to be a lot of hot air.","Shameless plug, but I already came up with two terms describing the author's vision of open source. https://gavinhoward.com/2023/12/is-source-available-really-that-bad/","The author seems unwilling to contribute to the already open discussion of how to pay open source developers, instead devolving into a rant about how communism would solve the world's problems.Yes, open source developers should be paid, but as astute of an observation that is, it's not very helpful.When I talk about ‚Äúsustainability‚Äù, though, I mean something very specific: ‚Äúcan maintainers live a decent-to-comfortable lifestyle writing free software?‚Äù If open source was ‚Äúsustainable‚Äù, to me, it would mean that people could chose to make writing open source their job, and be assured that they have at a minimum their basic needs met ‚Äì housing, food, healthcare, etc. Ideally, more than that; I‚Äôd love it if writing open source afforded people a comfortable or downright luxurious lifestyle.What is \"decent-to-comfortable\"? What is a \"lifestyle\"? What is a \"maintainer\"? What is \"writing\"? What are \"needs\"?If I maintain open source software nobody uses, should I be paid? What if Microsoft uses it? Should Microsoft support my \"luxurious\" lifestyle? Or do I need two big companies supporting me? How many individual end-users maps to one big company? Should 100 users feed me for the month? 10,000? Should people be obliged to pay me for my software? Is it optional? If so, how is that any different to the status quo? If not, am I even writing open source software?None of these questions are answered, because they're the only questions on this topic that would require some actual thought.","If you‚Äôre good at something never do it for free","I kind of disagree with the author. Politics always follows money. Open source development usually lacks politics because of the lack of money.The open source way of developing is very much going from point A to point B in a straight line. When you're being paid to develop, you don't go from point A to point B in a straight line. There are many other political factors at play that prevent you from going \"in a straight line\". What I like about open source development is that I can just write the damn software and ignore what anybody else thinks.","This is an incredibly poorly written article. The author for some reason insists on using their own private definition of open source that doesn't mean what everyone else takes it to mean, and consequently has to spend half the article putting out spot fires that are entirely caused by this decision. Article would be about half the length and twice as clear if they just used a different term instead of fighting whatever linguistic holy war they think they're fighting.","This is a dork debate. Pure dorkery. A new breed of idiots is formed every generation purely to \"debate\" this shit. You guys are fucking idiots. I am telling you this because when I was a kid we fucking had BSD v GPL fights and they were just as bad. It takes one to know one. You are just as stupid today as we were then. You will one day grow old and look at the hours you spent arguing pure dumbfuckery on the Internet instead of writing code. Net result is that you'll be great at arguing the obscure details of some situation where a paid developer put something in that was shoddier than otherwise.Meanwhile real engineers will write code while you dork groupies run around like guppies with your mouths gasping. I call you dumbass but it's out of love. Don't do this to yourselves.","Paying people to work on Open Source is wonderful, but will it be realistic and competitive pay rates? Almost never.I would gladly work a side gig on Open Source if it paid the same as my day job, but it won't come anywhere close.","It is, but for who and how much? Also who decides who gets paid? It really is a question of details.","The opensmalltalk-vm (a.k.a. the Cog VM) is the virtual machine beneath the Cuis, Pharo and Squeak Smalltalk dialects.The lead programmer gets paid for his work. Gone are the days when Dan Ingalls can whip out a virtual machine for Smalltalk-76 in a few months or a year's time and eventually receive the ACM Software System Award for basically inventing the tools and techniques everyone else has used for the last 50 years when working with virtual machines.","Oh noo, other people I don't know it's being paid for the work they do, how could they! /sSeriously. Whether it's a company sustaining an OS project, domains, or paid tiers... Why the f people think their opinion matters to anybody?If you don't like it, leave, touch grass, and begin a new life.","yes it is. and? companies need todo that and that's where the preaching needs to happen.to just some other programmers? not gonna get you anything.I, personally, am not gonna pay a developer to work on their open source project. A corporation? Sure, yes, it may benefit them to do so.","Yes, I thought this was obvious.","No way, who could have thought of that!","This is what I would do if any of my open source projects had a large influx of cash. I would share some of that with my library dependencies."],"points":328},{"text":["pretty cool comedy short film about non-psuedo random number generation","Did not see that twist coming.","But whats the number? Whats the most random number between 0 and 10?"],"points":0},{"text":["Tracing System Calls in Python"],"points":0},{"text":["If you're just going to sit there doing nothing, at least do nothing correctly","Don't prevent me from installing printer drivers on my Xbox just because you think I shouldn't be using my Xbox to print documents","This is sort of a similar idea to \"Define errors out of existence\" from Ousterhout's A Philosophy of Software Design, for some cases to gracefully do nothing (or even succeed) rather than erroring.","I agree with the solution, but also at the same time hate it and the circumstances that led the world to this point.","See also: https://en.m.wikipedia.org/wiki/Null_object_pattern","I think I disagree? He‚Äôs basically saying ‚Äòbuggy code doesn‚Äôt need to fast fail when the bugs aren‚Äôt that bad‚Äô","But is there any chance that an Xbox-compatible printer will be developed in the future?","I thought this article was a personal attack.","I thought this is some kind of tips of doing nothing at work guilt-freeSo far i'm just rebuilding latest jenkins job but it gets real old quick","Got a chill from reading the title. Glad it was about an API. Ahem‚Ä¶","Yeah, I don't know. I prefer a NotSupportedException, because it's a reality that the operation is not supported on that system. Returning an empty list or a false user cancellation seems more confusing to me. \"Why don't it detect anything?\" or \"No I didn't cancel, let me try again\". You shouldn't work around software not doing proper error handling, if they call a method that makes no sense that's on them. And bubbling up the error message to the user is needed will be very clear that the operation is not supported, and that's fine.","Do not use exceptions as error codes. PERIOD.","(doing = 0 || doing = NULL || delete doing)?","How about dont worry about weird edge cases because you never promised to support them anyways. If you are in the case where it is valid/required to do so then do t make exceptions. The idea that one should be flexible with input has always been jank and that applies to the lense where your platform is input into your program as well. Leave the quiet to the client and instead focus on being consistent."],"points":412},{"text":["Memory Renaming: Fast and Accurate Processing of Memory Communication (1999) [pdf]","I just go to leetcode, search for a hard and ask away. usually works","hn repost garbage. I dont even have to go to hn to know this was reposted from there"],"points":0},{"text":["Contribute to OSS: The Easy Way - Dan Levy's Blog"],"points":0},{"text":["MockAPI - An Open Source Dynamic Mock Data API"],"points":0},{"text":["How To Influence Without Authority","TLDR; read ‚ÄúHow to Win Friends and Influence People‚Äù"],"points":0},{"text":["How to use Media Source Extensions with AirPlay"],"points":0},{"text":["[FTSCS23] Does Rust SPARK Joy? Safe Bindings from Rust to SPARK, Applied to the BBQueue Li..."],"points":0},{"text":["Memory Safety with Formal Proof Webinar"],"points":0},{"text":["Python Programming In Depth"],"points":0},{"text":["Why Python's Integer Division Floors","Also, mod is different in Python than C/C++ for negative numbers. As I found out just yesterday."],"points":1},{"text":["6 Reasons in favor of a core language, and 5 against (Agda)","What is a \"core language\"?","I think I would argue that Con 3 (confusing error messages) is not a real con, since I'd expect parsing and type checking to occur before a term is lowered into core. By the time a term is in core, it should be completely free of compile-time errors. At that point, there shouldn't even be any way to report these kind of errors to the user, since the program in question is no longer what the user provided."],"points":0},{"text":["Reflections On 25 Years Of Programming","I'm a simple man. I see an elixir dev, I upvote."],"points":1},{"text":["Dependency solving in Nix"],"points":0},{"text":["Building an LLM from Scratch: Automatic Differentiation"],"points":0},{"text":["Pure Bash Web Server","Uh. A quarter of this is a C program to do the actual listening on the socket. How is this \"pure bash\"?","Just no.","This belongs in r/madlads"],"points":33},{"text":["Data Structures as Topological Spaces (2002) [pdf]"],"points":0},{"text":["The Emacsen family, the design of an Emacs and the importance of Lisp [video]"],"points":0},{"text":["Making my first open source contribution"],"points":0},{"text":["Building embedding based semantic search engine with Django"],"points":0},{"text":["Oregon Trail hunting mini-game with neural network AI"],"points":0},{"text":["API Endpoints: A Beginner‚Äôs Guide"],"points":0},{"text":["An Overview of Distributed PostgreSQL Architectures","I hope you like the summary below:This blog post by Marco Slot from Crunchy Data provides an in-depth analysis of various distributed PostgreSQL architectures. It begins with an overview of single machine PostgreSQL, highlighting its speed and efficiency but also its operational hazards like potential data loss or difficulty in scaling. The post then explores different distributed architectures, including network-attached block storage, read replicas, DBMS-optimized cloud storage, active-active configurations, transparent sharding, and distributed key-value storage with SQL. Each architecture is discussed in terms of pros, cons, and suitable use cases, with a focus on the trade-offs between performance, latency, scalability, and consistency. The post aims to guide readers in choosing the right architecture for their needs by understanding these trade-offs.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëç"],"points":1},{"text":["C3 (Low level C-like programming language) reaches 0.5.4 release.","I will develop a C3 superset called C3P0"],"points":9},{"text":["how to make photos look like paintings"],"points":0},{"text":["Best-Practices for API Authorization"],"points":0},{"text":["Customizing your git log"],"points":0},{"text":["The State of Software Engineering üî® ‚Äî with Kent Beck"],"points":0},{"text":["From Structured Logs to OpenTelemetry"],"points":0},{"text":["How do you do pair programming?","This was very popular 10+ years ago. I'm surprised it survived COVID. We have so many tools for collaboration now. Multiple people can work on the same file in real-time without needing to be physically next to each other.","It's not sustainable. Sure, the code quality is better, but what if I have to fart?","my worst nightmare","My current company does it for all work, and I detest it with a strong and glowing passion.We are all remote, so it basically means one dev screen shares their screen while the other watches and offers the occasional comment.We do it in the name of ‚Äúimproved code quality‚Äù but in reality you hardly have chance to look at & study the code written, so the quality is pretty much the same as if one dev worked on it.¬†So yeah‚Ä¶ dont do it!!","Yes, almost all my development is paired. It needs both people to understand what pairing is (it is not: one developer working and the other one being bored) and to be aware of what \"mode\" of pairing they want to be in.The \"default\" mode for us is driver/navigator, where one person does the line-by-line typing and coding, while the other keeps track of requirements, provides a second pair of eyes on small errors (feel free to keep quiet shot them until typing is done, to not interrupt flow) and anticipates stuff like looking up documentation for an API call while the driver is still typing stuff.We are almost always remote, so we do both have our own computers. When we are in a room together, the second laptop is usually also there, though not always.","Well, it helps if you have a PairOn chair :)","I've done it on occasion. It is quite intense, but can deliver very good code, and help with knowledge sharing as well.If you do it 95% of the time, that takes a specific mindset, and you have to fit well with your colleagues.If they do this, i'd want to talk to the developers in my team before accepting the job","I don't. Problem solved.","I personally like pair programming for at most 3-4 hours per week (so like, one eveneing or morning, usually less) with the people I work closely with on a project. It's a nice way to keep track of each other progress and make sure our goals are aligned in a more effective way than any other asynchronous method.More than a half a day per week is a waste of time though, in my opinion."],"points":33},{"text":["Torvalds Speaks: Rust's Impact on the Linux Kernel"],"points":0},{"text":["From engineer to manager: what I love, what I hate","If you can truly find passion and fulfillment in a management track position, then absolutely go for it. However, if you are just doing it because you believe you cant have a (financially) rewarding career as an individual contributor, I'm telling you from experience you will not be happy.Thinking that you can satisfy that yearning to grow your skills and build something by working on something on the side is a fallacy. Even if you have time for it, part of what drives us is to deliver value and something that doesn't get seen, let alone used, has no value.Our industry needs people that deliver value by facilitating the delivery of value by others, but that doesn't mean every engineer who excels at delivering value should become a manager so they can teach others to do the same.If solving challenging problems in software is your passion, then stick with it. Share knowledge and guidance from within, collaboratively with the rest of your team to elevate the standard of practice. Understand every aspect of the product, frontend, backend, infrastructure, operations. Expand your role to work with product to help define new features, participate in sales calls and demos. Become a go to engineer, while still being a team player. These things will allow you to stand out and grow your career without being forced into management. You'll get enough of the leadership experience that matters to move into senior and eventually principal engineer/architect roles. And you'll be doing what you love and getting paid well for it.","You have to offer up someone on your team to leaders twice a year and say they haven't been working hard enough, even if that's not the case for anyone on your team?That sounds like an ineffective process at best and soul suckingly terrible at worst.","ICs vastly underestimate some of the not so fun things you have to deal with and often as a manager if find myself having to be as much as a psychologist as a technical person. If someone comes to me asking about being a manager, I‚Äôd ask them how they‚Äôd deal with someone on the team who was a great person that everyone likes but who wasn‚Äôt getting their day to day work done. That‚Äôs the sort of ‚Äúfun‚Äù probably you find yourself having to solve.","Being an engineering manager is a more promising career opportunity than an engineering trackMostly disagree with thisCompanies need ICs. EMs not so much. If layoffs hit EMs often go first, and may take longer to find that next EM role as compared to an IC who is not laid off and can start looking while still collecting a pay check.Haven't done the analysis but intuitively there are more IC jobs out there than EM jobs.some speciality IC jobs have the potential to pay far more than EM jobs, such as in fintechEM jobs tend to gain skills related to a particular industry which may not be as transferable as IC skills tend to be.raises for EM tend to be lower because they are seen as more replaceable.promotions for EMs are very rare, especially above Director levelthere is a greater variety of work available to devs as compared to EMsunlike account managers or sales people, EMs tend to not be client facing as much. Meaning less opportunity to get poached by a good client.being an EM tends to be more work than being an ICEMs tends to be scape goats when things go sideways for higher ups in some companiesEMs are often carrying out orders rather than having genuinely real power to dictate how their department runs. if you don't have the power to reject corporate bs and run things the way you want, you don't really have the ability to exercise and grow your managerial skills properly.getting a management job in another industry might sound fine on paper, but the pay will be less than most ICs make.If you want to be an executive, there are easier, more straightforward ways about it. I think an EM is about as likely to land that dream CTO job as a team lead or an IC with an MBA is. If you want to be an executive, the best thing to do is to get a job as an executive at some rinky dink start-up, not become an EM.I think ICs tend to have more promising career opportunities in terms of pay, work life balance, flexibility in terms of types of work and industries accessible to them, and resilience in the face of layoffs.Signed, an EM who has been doing it for 6 years.","What roles are available to someone with engineering management experience? First, you can easily take on a team with a wildly different focus ‚Äî mobile developers, infrastructure, ML engineers. You'd need some time to get up to speed on the big-picture technical struggles of your new team, but most companies would take this shot.This seems like wishful thinking. In the latter half it says EMs are easily replaceable, so why gamble on a bad prospect?","That last one about feedback loop hits close to home.In my org I have major issues with management not realizing the effects of their decisions because they can‚Äôt remember them past two weeks. They will literally decide something, have it pointed out the consequences, say that‚Äôs fine, then be pissed about the consequences that happen 3 months later that they were warned about.My favorite is when they came to us and said they don‚Äôt have time for quality initiatives and we need to stop doing them. I spoke up and pointed out they will have significant bugs from that decision and was told that‚Äôs fine. I followed my manager back to his office, repeated myself and suggested it was a bad idea, and was told they understood. 3 months later we have several bugs in exports that would have been prevented specifically by one of the quality initiatives. Management drags us into a room to demand to know what is going on with our quality and what we are going to do about it, and then gets mad when I pointed out that they told us to stop our quality initiatives and if they want us to do something they need to let us do those again. They Huffed and said we don‚Äôt have time and ended the meeting.","For me, the worst part of switching to being an EM is all the context switching. As an IC you usually get to focus on one task at a time and get into the zone working on that task. As an EM you are constantly ping ponging between various meetings, answering emails/chats, and trying to fit in the required stuff (performance evaluations, promotion packets, tech strategy, quarterly planning, etc) in between it all.It's extremely disorienting and can make the day feel hectic and exhausting while somehow also leaving you asking yourself what you even accomplished today.","From this page:My goal is to become an independent content creator. But before I get there, I need to make this blog self-sustaining ‚Äî gathering $130 in 2023 to pay for the domain and hosting. Currently I'm at $16. It would greatly help if youThis page is hosted on Github. How...?","Being an engineer, I am not built to tolerate corporate BS."],"points":62},{"text":["OOP in real-life cases"],"points":0}]