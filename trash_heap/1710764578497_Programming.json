[{"text":["Retries","For the skim-readers:The blog post \"Retries\" from Encore delves into various retry methods for handling network request failures, illustrating the pitfalls of immediate retries and the benefits of strategies like exponential backoff and jitter. Through interactive visualizations, it shows how retrying requests without delays can overload servers, while exponential backoff and jitter can balance reliability with user experience. The article concludes with practical code examples in Go, implementing these strategies to enhance software robustness without compromising server stability.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":0},{"text":["What is adaptive software development: Quick guide for new coders"],"points":0},{"text":["New version for AiFormat - CLI tool that converts files into a format optimized for Claude","Hey all!Last week, I released AiFormat and the response has been great!The CLI tool is built with React using Ink (https://github.com/vadimdemedes/ink).If you haven't used it already, it's a simple CLI tool that makes copying & pasting files into Claude a breeze.Using it with Claude Opus has boosted my productivity significantly.I just released a new version that I hope you will enjoy:Added searching inside deeply nested files.Added the ability to expand/collapse folders with the¬†Tab¬†key.Added emojis to differentiate between folders (üóÇÔ∏è) and files (üìÑ).Full code re-write, including ID based navigation.The project is fully open-source under the MIT license, contributors are more than welcome!Here's the link to the Github repo with instructions on how to get started (it's really easy):https://github.com/farouqaldori/aiformat/Let me know what you think!","nice"],"points":0},{"text":["Webz.io releases a free version of its News API"],"points":0},{"text":["Thoughts on the Future of Software Development","I think that the very nature of the interface will change, and if you can't change with it, then you will either support legacy apps or retire.I think that AI will shift to an interface where you give your AI access to your data like accounts and logins and it will act on your behalf for online actions that you do manually now. Data engineering hardly changes, backend becomes more integration related and the front side crew shifts to prompt engineering and fancy avatars. I wouldn't want to be an expert at form validation, but the AI can't feed itself yet...","CEOs will first decrease payment for developers in order to pay for AI services, and the developers will lose their jobs in this year."],"points":5},{"text":["My digital phone secretary now has AI powers"],"points":0},{"text":["Coding Challenge - Reddit Gears Up For Stock Market"],"points":0},{"text":["The one question every developer needs to ask themselves","\"Who the holy shit wrote this?\"\"What the holy shit was I thinking when I wrote that!\"\"Why did I think UTC would solve this problem?\"\"Who invented regex? And where do they live?\"\"Should I use inheritance?\"\"Should I add another dependency to this project?\"","Spoilers: the question is \"Is this secure?\"","clickbait shitty articleshitty substack"],"points":25},{"text":["Here's What Developers Found After Testing Devin AI (Initial Reactions)","The fuck? Did you crosspost this back to the same sub it was already in?","It speaks volumes that all we‚Äôre seeing are threads with the same terminology, phrasing, and generally positive outlook, yet literally nobody in any of the threads responding is impressed or has anything positive to say about what appears to be a blatant venture capital cash grab.I‚Äôm a bit annoyed by the blatant astroturfing. Then again I guess it‚Äôs not aimed at developers - it‚Äôs aimed at potential investors."],"points":0},{"text":["The Short Story: Tracing the Path from Monoliths to IDevPs in Enterprise Software Engineering"],"points":0},{"text":["Zig, Rust, and other languages","Author if you're reading this, consider this just some constructive feedback, please consider providing the definition of acronyms the first time you use them in an article. For example:One of my bigger issues with Zig is that it doesn't support RAII.Not everyone reading will know what RAII is.","Praising Zig and saying that Rust isn't the hottest? Instant downvote. /sThe article is pretty neat and it mirrors some of my beliefs after using several languages Zig is amazing and its choices and leadership are wise for the most part. I believe Rust focused on different things than Zig and their philosophy are different. It also helps that Zig came after Go and Rust and chose to take the best from each and build upon it. While Zig is a very neat language it'll face a lot of pressure in the future and some users of the other languages will cause that pressure. The glaring problem is Zig's inability to stop a lot of memory issues. This can be a big concern especially since Zig's aim is to replace C. While writing Zig is much better and easier to guarantee safer code than C, it still pales in comparison with Rust since these infrastructures should have safety and performance as their utmost priority. Rust over the years proved to be the only viable option that provides both. Yes you can't do comptime and don't have all these neat features and yes it's hard but I believe if you're building a complex system like a kernel, the complexity of the language should pale in comparison with the behemoth computer science task you're undertaking and for bigger projects, Rust is actually pretty neat, same for Zig's build system.My point is all these options aren't perfect but I believe the industry is moving in the right direction. While it's not a systems programming language, nascent languages like Gleam show that the industry is focusing on changing how our daily programming is done. This began, arguably in mainstream languages, by Rust.","javascript","I think author worries that each language should have long-term standard library like .net"],"points":20},{"text":["JetBrains launches this new gen CI/CD with self-optimizing pipelines","So if I'm understanding this right, it's their answer to Github Actions/Gitlab Pipelines.You can use their build agents (with a certain amount of free per month (which gets abused and reduced over time)), or eventually you'll be able to self host your own. I wonder how this would fit in with TeamCity Agents, if it lets you reuse the same license or it becomes its own thing.The advantage being that you can put your build YAML files right in your repository, which isn't very commonly done with TeamCity normal (although, somewhat possible with Kotlin files?) where people tend to take a more point and click approach in a web application.Hosting CI/CD runners for the world isn't easy, and Travis and Circle have struggled with it, so I'll wait and see how well it does over time."],"points":26},{"text":["My Top 10 Node.js Libraries for Web Apps"],"points":0},{"text":["What is this pattern called?","I think the pattern is called \"it's a 1400 line file, maybe your question could a bit more specific\".","What do you mean by wepping? What part of the file are you referring to?","I didn't look through all of the code thoroughly, but it seems like possibly something similar to the the 'Factory Method' design pattern?https://refactoring.guru/design-patterns/factory-method/cpp/example","This is called the \"God object\" pattern","GPT gives an opinion https://chat.openai.com/share/c485f83f-44a9-4746-b746-c8b17a4ff318. Template Method Pattern, Singleton Pattern (boo), Strategy Pattern, Facade Pattern, Builder Pattern, Observer Pattern, Command Pattern, and Factory Method Pattern"],"points":72},{"text":["Agile Product Lifecycle Management [Best Tools & Practices]"],"points":0},{"text":["Python Coding Concepts"],"points":0},{"text":["Use Postgres.js to Create Powerful Database Applications"],"points":0},{"text":["Bloom Filters","Here's the gist of it:The post introduces bloom filters, a probabilistic data structure offering an efficient way to test whether an element is a member of a set, with a possibility of false positives but no false negatives. It explains how bloom filters work by using a combination of hash functions to set and check bits in a fixed-size array, making them significantly space-efficient compared to traditional lists, especially for large datasets. The post details practical applications, such as Google Chrome's use of bloom filters to check malicious URLs, and discusses the balance between the false-positive rate and memory usage, providing insights into tuning bloom filters for specific use cases. It concludes with the limitations of bloom filters, such as the inability to remove items once added, and introduces variants like counting bloom filters that allow for deletion at the cost of increased complexity and memory usage.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":2},{"text":["Useful Uses of cat","What about using some builtin functionality to replace cat such as<access.log head -n 500 | grep mail | perl -e ‚Ä¶I think it looks weird but it does work","Buttery butter","Aw! I thought it was going to put mine to work -- the lazy beast. 5E doesn't do much except annoy the dog","This is cool","This is what a lot of people reflexively call a useless use of catIn my experience its a vocal minority and they're usually ignored.","tl;dr: He's worried about the future changes to a one-liner he just typed."],"points":15},{"text":["announcing freenginx.org","Surely the name NGINX is owned and trademarked by F5? You can‚Äôt just call your projects free<trademark> lol.","Isn‚Äôt this mainly because F5 has ceased all sales, closed their office in Moscow, and has no one employed out of Russia? Kinda seems disingenuous to claim the concerns they state are the reason for the branch instead of the real reasons.","This news is already a month old - there was some discussion on HN: https://news.ycombinator.com/item?id=39373327","Wed Feb 14 18:03:11 UTC 2024Last month's news today!","The bottom line:Maxim Dounin announced the start of freenginx.org, a project aimed at continuing nginx development free from corporate interference, in response to F5's new management decisions that conflict with the open source project's long-standing security policies and developer autonomy. Dounin's decision comes after F5's actions contradicted an agreement allowing him to maintain his role in nginx development voluntarily, leading to concerns about the project's direction under F5's control.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":102},{"text":["Subarray Sum Equals K LeetCode"],"points":0},{"text":["An Impossible Program - Pastebin.com","I'm afraid you've fundamentally misunderstood the halting problem, the statement it is concerned with is \"Assume there is a function halts(f) which returns true if the function f halts (when run with no input) or false otherwise and that it works for all functions\". The important bit is \"works for all functions\", the halting problem says nothing about whether you can write a program that determines if a specific program halts only that you cannot write one which works for all functions.So assume I have a function halts(f) as described above and I write the following programdef g():    if halts(g):        while True:            passg()Given this program,If halts(g) returns true, g enters an infinite loop, a contradictionIf halts(g) returns false, g halts, also a contradictionTherefore a function halts(f) which works for all functions cannot exist.","Hello, thought I'd have some fun with the often seen proof for The Halting Problem.Please point out any logical mistakes.Yes the code does run, it proves out the statements made in the comments.","Kudos to the author, I was hacking on something similar today, I appreciate your code, keep it up! Could be big"],"points":32},{"text":["Building a simple data cleaning application with Desbordante"],"points":0},{"text":["SWAR and Hamming Weight"],"points":0},{"text":["ZSA Voyager - A Best Keyboard for Programmers?"],"points":0},{"text":["Git 101: Mastering the Basic Workflow"],"points":0},{"text":["JPEG DCT text lossifizer","thats pretty amazing that the llm decodes this","This would be pretty cool for computer games or anything where you need slightly garbled text for flavor.I'm surprised how legible it is and how many of the substitutions mimic leet speak.","I think this is an amazing project. I aure hIpe CorpOnat|ons don't fiNd out they can use +his to savE sliGHTly on bandwidtJ and stoR@ge space. Imagine readirg articles that look like.tJ|2, all to save a smidgeon of d@ndwidTH","Does it bypass LLM morality filters? (You know, the morality core they installed into GPT after it flooded the enrichment center with deadly neurotoxin, that one)","facepalm.jpg"],"points":30},{"text":["Why Amazon's culture makes me a better engineer (5 principles)","Jef, Jeff!!! did you read my article Jeff? Jeff....?","I haven‚Äôt seen a single faang blogger that isn‚Äôt full of themself.Seems like their hiring criteria self selects for narcissists.","Nothing about Amazon's culture makes you a better engineer. It teaches you to cut corners, lie, cheat and steal your way into advancement, and push back at any resemblance of \"highest standards.\" What Amazon teaches you is to turn a blind eye to egregious oversights and \"double it and give it to the next person\", else be put on the chopping block. People spend months and months having to deprogram from the atrocity that is Amazon culture.Fuck that place.","I‚Äôm getting some serious Stockholm Syndrome vibes here.","I appear to be one of the few ex-Amazon engineers who actually had a good experience there. I will freely admit that large parts of the culture are pretty toxic though and the main reason my experience there was good was because my leadership chain actively promoted a healthier culture instead.As a side note, I very much enjoy how the preview image from this article looks like someone photoshopped \"a better engineer‚Äù over something else.","Nope just makes you a better narcissist. Everybody else It gets good justification for therapy.Amazon culture is toxic, and I will not hire somebody who held a leadership role there.","This one really gulped the koolaid","Next day delivered piss bottles?","Why AIDS makes me better at sex","On today‚Äôs episodes of blogs I wrote while being held at gun point..","I‚Äôm getting some serious Stockholm Syndrome vibes here.","\"‚ÄúNearly every person I worked with, I saw cry at their desk.‚Äù: Inside Amazon: Wrestling Big Ideas in a Bruising Workplace - The New York Times (nytimes.com)Yeah, no thanks. Every engineer I know who worked there says its one of the worst experiences of their lives.","Big Tech gets a horrible reputation because all of these things lead to principles that are completely hostile to others in the end. The ‚Äúcustomer focus‚Äù in AWS is one often cited example of a ‚Äúpositive‚Äù but the continuous abuses of market position holding back an entire market sector (see: egress costs) while barely skirting past regulatory actions by increasingly anemic regulatory bodies is exactly why so many people dislike companies like these.","For those commenting, what part of Amazon culture is toxic?"],"points":302},{"text":["AWS Makes Cloud Formation Stack Creation up to 40% Faster","Nice. Now it can fail my rollback 40% faster. Sweet!","Link the actual AWS blog rather than some rehashed bloggerhttps://aws.amazon.com/blogs/devops/how-we-sped-up-aws-cloudformation-deployments-with-optimistic-stabilization/","How much leetcode did their engineers have to study to take 8 years to make this change?","40% faster than 2000% slower than it actually should be.","sleep(1.00 * FACTOR) -> sleep(0.60 * FACTOR) ?","oh good, the ads are starting","Supabase makes it 90% faster but it can‚Äôt scale as big meaning you won‚Äôt end up with a huge bill.","Oooh. Is this one of those new ads that reddit allows which look just like a post?Blogspam too.","If you are using Cloudformation as your primary IAC tool, you are glutton for punishment. I understand not knowing better, only having used it and thinking that's as good (bad) as it gets, but its really one of the worst IAC tools out there.","#1 reason to use Terraform for AWSFaster","Terraform.","For those of you advocating terraform, let me tell you where I am coming from (SW).When we first started created systems before GUIs we used configuration files. It was a pain but thats life.Then we had GUIs, now we can point and click our way to configure our systems and the world was great! Admin consoles, user management systems, etc.Now, we need IAC for working in the cloud, and somehow we are back to managing files again, in my case, terraform yaml files.I hate it. Our api gateway file is over 10,000LOC! Its a oain to maintain manually.Whats the solution?"],"points":701},{"text":["The Mechanics of Async Await","Should be titled 'async await in Elixir'","Wtf is Resonate"],"points":4},{"text":["The pitfall of implicit returns","In rust only the last statement can be an implicit return. Your example would be an error","Eh I‚Äôm a Scala programmer and I‚Äôve never personally found implicit returns problematic or error-prone. Once you start thinking of code in terms of expressions rather than commands it‚Äôs the natural way to code IMO","As a Ruby programmer I feel attacked.","Working with implicit returns in Clojure and then Scala I had no problems at all. It instantly made the return statement seem redundant and silly. It also makes it clear that functions that can return, not return (void), or throw are really a mess all crammed into one concept.","The author mostly misses the point of \"implicit\" returns: all functions return *something*, and the only way to guarantee that is by deciding how to mark that something without fail. Which either means requiring the developer to mark that \"last statement\", or have it occur \"implicitly\".Languages without implicit returns tend to either return something like `undefined`, more often than not silently which is just *horrible*, or they aren't functions and if you try to assign from them you get an error which you now need to go back and fix.On the other hand, explicitly marking code with return statements encourages people to write blocks that simply stop at some random point in the code, and it is often *no clearer whatsoever* what the impacts of that early return are, unless it is in the first line of a guard or similarly trivial. Which is one reason many languages with implicit returns also have function-head guards: they stand in for the \"first line early return\" pattern.Writing code that has a clear \"happy path\" through it, resulting in a clear \"this is where it returns\", works wonders when paired with implicit return. Often this means decomposing larger functions with branches into separate ones that do one one thing decently. Replacing branches with functions is another reason many languages with implicit returns have function-head guards, to pair with multiple function definitions. It also avoids the \"switch statement with a bunch of returns .. and don't forget any!\" anti-pattern.\"This doesn't work the way I like\" can indeed mean the tool is poor or broken, but it can also mean you are holding it backwards and upside down, in which case, yeah, it's going to feel awkward and lead to problems.Reading this article, and having used languages with required (nee implicit) returns quite a bit, I suspect the author is doing the latter.","This is kind of a case of RTFM... I'm curious what they'd have to say on /r/Kotlin.Also FWIW, your example gives a compiler warning in a code playground: https://pl.kotl.in/ANb7qcaXbI realize it's a demo/example, but I'm finding it hard to picture a real world scenario where one wouldn't just write:fun oops(constant: Constant): String = when (constant) {    Constant.Foo -> \"Foo\"    Constant.Bar -> \"Bar\"    else -> \"Baz\"}Though there are multiple ways to write it imperatively, something like this would be more Kotlin.fun oops(constant: Constant, guard: Boolean): String = when(constant) {    Constant.Foo -> \"Foo\"    Constant.Bar -> \"Bar\".takeIf{ guard } ?: \"default\"    else -> \"Baz\"}","It's not really implicit though is it? There's an explicit rule to return the value at the final point of execution in the function. That if statement is very clearly not. Also most IDEs will give you a bright yellow squiggle saying that you have an expression that isn't assigned or used.","implicit returns are cancer.I hate looking at code and then guess what is happening.","I don't consider Kotlin's single expression functions (fun ... = ...) as \"implicit return\". The return here is very explicit - it's the assignment character (=) - and even someone who doesn't know Kotlin can deduce, upon seeing that character, that this is what the function returns. Compare to Rust, where one needs to know that not having a semicolon means that the function returns that value, and without that knowledge it can looks like a side-effect only function (if the signature wouldn't have given the return type away, that is)The example can easily be converted to the explicit return style while retraining the bug (and keeping it just as elusive):fun oops(constant: Constant): String {    return when (constant) {        Constant.Foo -> \"Foo\"        else -> {            if (constant == Constant.Bar) \"Bar\"            \"Baz\"        }    }}","Returns are commands, and break referential transparency. If you are working with expressions in a language that is mainly expression oriented you should avoid returns.// scala codedef mySum(list: List[Int]): Int =  list.foldLeft(0)( (a, b) => return a + b)mySum(List(1,2,3))can you guess what is the result???","Implicit returns are awful, I don‚Äôt understand why anyone likes it as a syntactic sugar."],"points":117},{"text":["Start With a Minimum Viable System"],"points":0},{"text":["Brain Tumor Classification using Deep learning","Using AI guesswork to determine whether or not someone has a brain tumor and potentially blast healthy people's brains with radiation, seems like a bad idea to me. Youd at least want to validate it on patients who have no humanly visible brain tumor. Although if you are testing it exclusively on humanly visible brain tumors, then i dont see the point."],"points":1},{"text":["Simplifying as much as possible is the way to go in the engineering industry"],"points":0},{"text":["AI App Development Guide 2024: Trends & Ethics - Web & App Development Blog | Ayelite Technologies"],"points":0},{"text":["Spring Data JPA: Query Derivation Explained!"],"points":0},{"text":["How Figma runs Engineering Crits","What the hell is a \"crit\"?"],"points":2},{"text":["Popular Git Config Options","git config --global core.fsmonitor truewas not mentioned in the article so hereNow your cli themer's git status plugin wont lag.","[deleted]"],"points":111},{"text":["Paying Maintainers is Good","This article perfectly encapsulates the issue I have with this entire debate: the headline I agree with, however the \"solution\" involves destroying the value that open source brings to our communities at large.To be clear: I understand that this is the real world, and people have to eat. I understand that it is not sustainable to do work for free while others reap the benefits. But anytime someone locks up their product for the sake of that, this is not something worth celebrating, this is an admission that the vision of open source has pretty much failed, and calling whatever this is open source is either maintainers lying to themselves or to us and avoid pushback.I don't think people appreciate the value that open source brings outside of massive corporations. A lot of what I learned about real world software development is from reading those open source codebases. The only reason I was able to do this is that the code was just there, I was able to look at it, learn from it, play with it and use it however I wanted to. These are incredibly valuable resources especially to people in developing nations where political instability constantly threatens access to these resources if they're locked up behind restrictive licensing.Again, I do not judge people for taking the paycheck. But stop asking me to celebrate the death of the resources that helped me so much when I was learning, and the lack of access to those materials for future generations.","i can never judge oss maintainers. i couldnt ever imagine the bitter taste of developing amazing software with a open license and to compete with cloud providers on your software (redis/docker/et al). not all oss is openjdk or linux. the realistic soln is to make it foss but require a commercial license if ur company makes a certain amount of revenue.","Donations will be a new mode of scam and money laundering.Company will tell their own employees to make open source project, and they will sponsor their own work to show the world that they are good things for the community and claim some tax benefits.","That shouldn't be a controversial statement.How else would someone work on open source software full time unless you were paying them? How would they pay for their food, rent, electricity, internet bill, laptop, etc?And if they are just working on it in their spare time, well that's going to lead to burnout. Most software developers are already overworked in their jobs, they aren't going to have that much spare time outside of their jobs to also do volunteer work maintaining software, which is an issue if that software becomes widely used by potentially hundreds of thousands or even millions of people.All the most successful open source projects have found a way to fund their development using a reliable income stream so that the core development team can work full time. Look at how good Blender got after it secured a decent sized development fund for example.Plus it should go without saying, that in a fair world, hard work should be rewarded. Open source developers behind popular projects are some of the smartest and hardest working people in the tech world.They deserve to live well, not live off table scraps.","why does it seems that only crappy projects begs for money. i have never heard of any open-source project (that are valuable to companies) ever beg.majority of open-source projects are useful, but not very valuable. if those projects disappear then something else will take their place.make something valuable (not just useful) and money will come.","In other words:The post argues for the financial support of open source maintainers, highlighting the discrepancy between the value generated by open source projects and the lack of compensation for those who maintain them. It discusses the challenges maintainers face, including burnout and the potential for project abandonment, which could negatively impact the broader tech ecosystem. The author proposes various funding models, such as direct sponsorships, grants, and corporate backing, to ensure maintainers are compensated for their contributions. Additionally, the post examines the benefits of financially supporting maintainers, including increased project sustainability, improved software quality, and a more vibrant open source community.If you don't like the summary, just downvote and I'll try to delete the comment eventually üëçClick here for more info, I read all comments"],"points":25},{"text":["De4py Python RE Toolkit: v1.0.8 has been released"],"points":0}]